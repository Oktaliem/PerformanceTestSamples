<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="7">
  <HTTPTask id="458" hostname="192.168.1.66" path="/web/content/434-383b496/web.assets_common_lazy.js" url="http://192.168.1.66/web/content/434-383b496/web.assets_common_lazy.js" ip="192.168.1.66" port="80" connectionId="30" origin="Primary" frame="1" startDateTime="2020-01-19T09:04:34.132+08:00" startTime="257335093" endTime="257335156">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTkyLjE2OC4xLjY2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc5LjAuMzk0NS4xMTcgU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzE5Mi4xNjguMS42Ni93ZWIvbG9naW4=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c2Vzc2lvbl9pZD1iYWUzMWM0Mzg0NWM1ZDhmZTZjMTk2M2RjNGRmNGQzMmNmOWJlN2Yz</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC93ZWIvY29udGVudC80MzQtMzgzYjQ5Ni93ZWIuYXNzZXRzX2NvbW1vbl9sYXp5LmpzIEhUVFAvMS4xDQpIb3N0OiAxOTIuMTY4LjEuNjYNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83OS4wLjM5NDUuMTE3IFNhZmFyaS81MzcuMzYNCkFjY2VwdDogKi8qDQpSZWZlcmVyOiBodHRwOi8vMTkyLjE2OC4xLjY2L3dlYi9sb2dpbg0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IHNlc3Npb25faWQ9YmFlMzFjNDM4NDVjNWQ4ZmU2YzE5NjNkYzRkZjRkMzJjZjliZTdmMw0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="session_id" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YmFlMzFjNDM4NDVjNWQ4ZmU2YzE5NjNkYzRkZjRkMzJjZjliZTdmMw==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>1091933</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Content-Type" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Content-Type-Options" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm9zbmlmZg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZDdiYmE5NmY2YzJlMTEyNjg3MjZiMzZjYzI1NzdiNDgzZTZkZTUzOA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT0zMTUzNjAwMA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTA5MTkzMw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Set-Cookie" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c2Vzc2lvbl9pZD1iYWUzMWM0Mzg0NWM1ZDhmZTZjMTk2M2RjNGRmNGQzMmNmOWJlN2YzOyBFeHBpcmVzPVR1ZSwgMTQtQXByLTIwMjAgMjI6NTY6MTkgR01UOyBNYXgtQWdlPTc3NzYwMDA7IEh0dHBPbmx5OyBQYXRoPS8=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2Vya3pldWcvMC4xNC4xIFB5dGhvbi8zLjYuOQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAxNSBKYW4gMjAyMCAyMjo1NjoxOSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjAgMjAwIE9LDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNClgtQ29udGVudC1UeXBlLU9wdGlvbnM6IG5vc25pZmYNCkVUYWc6IGQ3YmJhOTZmNmMyZTExMjY4NzI2YjM2Y2MyNTc3YjQ4M2U2ZGU1MzgNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MzE1MzYwMDANCkNvbnRlbnQtTGVuZ3RoOiAxMDkxOTMzDQpTZXQtQ29va2llOiBzZXNzaW9uX2lkPWJhZTMxYzQzODQ1YzVkOGZlNmMxOTYzZGM0ZGY0ZDMyY2Y5YmU3ZjM7IEV4cGlyZXM9VHVlLCAxNC1BcHItMjAyMCAyMjo1NjoxOSBHTVQ7IE1heC1BZ2U9Nzc3NjAwMDsgSHR0cE9ubHk7IFBhdGg9Lw0KU2VydmVyOiBXZXJremV1Zy8wLjE0LjEgUHl0aG9uLzMuNi45DQpEYXRlOiBXZWQsIDE1IEphbiAyMDIwIDIyOjU2OjE5IEdNVA0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData></ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="257335140" offset="0" length="410" />
        <PacketInfo time="257335171" offset="410" length="16344" />
        <PacketInfo time="257335218" offset="16754" length="11396" />
        <PacketInfo time="257335234" offset="28150" length="1460" />
        <PacketInfo time="257335234" offset="29610" length="16344" />
        <PacketInfo time="257335265" offset="45954" length="16344" />
        <PacketInfo time="257335296" offset="62298" length="14032" />
        <PacketInfo time="257335312" offset="76330" length="1460" />
        <PacketInfo time="257335312" offset="77790" length="16344" />
        <PacketInfo time="257335328" offset="94134" length="8476" />
        <PacketInfo time="257335359" offset="102610" length="1460" />
        <PacketInfo time="257335375" offset="104070" length="16060" />
        <PacketInfo time="257335390" offset="120130" length="16344" />
        <PacketInfo time="257335421" offset="136474" length="11396" />
        <PacketInfo time="257335437" offset="147870" length="1460" />
        <PacketInfo time="257335453" offset="149330" length="16344" />
        <PacketInfo time="257335468" offset="165674" length="16344" />
        <PacketInfo time="257335484" offset="182018" length="9652" />
        <PacketInfo time="257335500" offset="191670" length="11680" />
        <PacketInfo time="257335515" offset="203350" length="1460" />
        <PacketInfo time="257335531" offset="204810" length="16344" />
        <PacketInfo time="257335546" offset="221154" length="15776" />
        <PacketInfo time="257335703" offset="236930" length="1460" />
        <PacketInfo time="257335703" offset="238390" length="16384" />
        <PacketInfo time="257335718" offset="254774" length="16304" />
        <PacketInfo time="257335718" offset="271078" length="16384" />
        <PacketInfo time="257335734" offset="287462" length="16384" />
        <PacketInfo time="257335734" offset="303846" length="16264" />
        <PacketInfo time="257335734" offset="320110" length="14640" />
        <PacketInfo time="257335750" offset="334750" length="1460" />
        <PacketInfo time="257335750" offset="336210" length="16344" />
        <PacketInfo time="257335781" offset="352554" length="16344" />
        <PacketInfo time="257335781" offset="368898" length="16344" />
        <PacketInfo time="257335796" offset="385242" length="608" />
        <PacketInfo time="257335812" offset="385850" length="1460" />
        <PacketInfo time="257335812" offset="387310" length="16344" />
        <PacketInfo time="257335843" offset="403654" length="9936" />
        <PacketInfo time="257335921" offset="413590" length="1460" />
        <PacketInfo time="257335921" offset="415050" length="16344" />
        <PacketInfo time="257335921" offset="431394" length="16344" />
        <PacketInfo time="257335921" offset="447738" length="16344" />
        <PacketInfo time="257335921" offset="464082" length="16384" />
        <PacketInfo time="257335937" offset="480466" length="16304" />
        <PacketInfo time="257335937" offset="496770" length="40" />
        <PacketInfo time="257336000" offset="496810" length="1460" />
        <PacketInfo time="257336000" offset="498270" length="16344" />
        <PacketInfo time="257336000" offset="514614" length="16384" />
        <PacketInfo time="257336015" offset="530998" length="16304" />
        <PacketInfo time="257336015" offset="547302" length="4988" />
        <PacketInfo time="257336046" offset="552290" length="1460" />
        <PacketInfo time="257336062" offset="553750" length="1460" />
        <PacketInfo time="257336093" offset="555210" length="14600" />
        <PacketInfo time="257336109" offset="569810" length="1460" />
        <PacketInfo time="257336125" offset="571270" length="16344" />
        <PacketInfo time="257336140" offset="587614" length="13890" />
        <PacketInfo time="257336218" offset="601504" length="1460" />
        <PacketInfo time="257336218" offset="602964" length="16344" />
        <PacketInfo time="257336234" offset="619308" length="16384" />
        <PacketInfo time="257336250" offset="635692" length="16384" />
        <PacketInfo time="257336250" offset="652076" length="16384" />
        <PacketInfo time="257336265" offset="668460" length="7504" />
        <PacketInfo time="257336281" offset="675964" length="13140" />
        <PacketInfo time="257336312" offset="689104" length="1460" />
        <PacketInfo time="257336328" offset="690564" length="10220" />
        <PacketInfo time="257336359" offset="700784" length="1460" />
        <PacketInfo time="257336359" offset="702244" length="16344" />
        <PacketInfo time="257336375" offset="718588" length="16344" />
        <PacketInfo time="257336375" offset="734932" length="892" />
        <PacketInfo time="257336453" offset="735824" length="1460" />
        <PacketInfo time="257336468" offset="737284" length="1460" />
        <PacketInfo time="257336484" offset="738744" length="16344" />
        <PacketInfo time="257336484" offset="755088" length="13504" />
        <PacketInfo time="257336484" offset="768592" length="16384" />
        <PacketInfo time="257336500" offset="784976" length="16384" />
        <PacketInfo time="257336500" offset="801360" length="16384" />
        <PacketInfo time="257336500" offset="817744" length="1340" />
        <PacketInfo time="257336500" offset="819084" length="2388" />
        <PacketInfo time="257336578" offset="821472" length="1460" />
        <PacketInfo time="257336578" offset="822932" length="1460" />
        <PacketInfo time="257336609" offset="824392" length="16344" />
        <PacketInfo time="257336640" offset="840736" length="16344" />
        <PacketInfo time="257336656" offset="857080" length="16344" />
        <PacketInfo time="257336671" offset="873424" length="11968" />
        <PacketInfo time="257336703" offset="885392" length="1460" />
        <PacketInfo time="257336703" offset="886852" length="16344" />
        <PacketInfo time="257336703" offset="903196" length="16344" />
        <PacketInfo time="257336718" offset="919540" length="16344" />
        <PacketInfo time="257336750" offset="935884" length="13740" />
        <PacketInfo time="257336765" offset="949624" length="1460" />
        <PacketInfo time="257336765" offset="951084" length="16344" />
        <PacketInfo time="257336781" offset="967428" length="16344" />
        <PacketInfo time="257336796" offset="983772" length="8192" />
        <PacketInfo time="257336812" offset="991964" length="1460" />
        <PacketInfo time="257336812" offset="993424" length="16344" />
        <PacketInfo time="257336843" offset="1009768" length="16344" />
        <PacketInfo time="257336859" offset="1026112" length="16344" />
        <PacketInfo time="257336859" offset="1042456" length="16344" />
        <PacketInfo time="257336875" offset="1058800" length="324" />
        <PacketInfo time="257336875" offset="1059124" length="1460" />
        <PacketInfo time="257336890" offset="1060584" length="16344" />
        <PacketInfo time="257336937" offset="1076928" length="15415" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>