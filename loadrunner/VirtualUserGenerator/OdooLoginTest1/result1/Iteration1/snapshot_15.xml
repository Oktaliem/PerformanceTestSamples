<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="15">
  <HTTPTask id="16" hostname="192.168.1.66" path="/web/content/438-44561e6/web.assets_backend.js" url="http://192.168.1.66/web/content/438-44561e6/web.assets_backend.js" ip="192.168.1.66" port="80" client_ip="192.168.1.112" client_port="22612" connectionId="2424" origin="Primary" encodingType="ANSI" startDateTime="2020-01-19T11:40:17.506+08:00" startTime="4032" endTime="4856" blockedTime="0" dnsTime="0" connectTime="0" sendTime="0" waitTime="0" receiveTime="0" sslNegotiateTime="0" responseBodySize="0">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Referer" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzE5Mi4xNjguMS42Ni93ZWI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc5LjAuMzk0NS4xMTcgU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTkyLjE2OC4xLjY2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c2Vzc2lvbl9pZD02YjU4MzE2NjQxOWYxZWUxZGVlZTg3YTE2ZjAwMzRkNjJiMTNhYjVi</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC93ZWIvY29udGVudC80MzgtNDQ1NjFlNi93ZWIuYXNzZXRzX2JhY2tlbmQuanMgSFRUUC8xLjENClJlZmVyZXI6IGh0dHA6Ly8xOTIuMTY4LjEuNjYvd2ViDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNzkuMC4zOTQ1LjExNyBTYWZhcmkvNTM3LjM2DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkFjY2VwdDogKi8qDQpDb25uZWN0aW9uOiBLZWVwLUFsaXZlDQpIb3N0OiAxOTIuMTY4LjEuNjYNCkNvb2tpZTogc2Vzc2lvbl9pZD02YjU4MzE2NjQxOWYxZWUxZGVlZTg3YTE2ZjAwMzRkNjJiMTNhYjViDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="session_id" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NmI1ODMxNjY0MTlmMWVlMWRlZWU4N2ExNmYwMDM0ZDYyYjEzYWI1Yg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>1015985</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Content-Type" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Content-Type-Options" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm9zbmlmZg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>OTE5YTkwN2U3MGQ1NDQ2MzcwNGY0NmU2NDBlNGFlYmYzOTYxNGFlOA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bWF4LWFnZT0zMTUzNjAwMA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAxNTk4NQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Set-Cookie" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>c2Vzc2lvbl9pZD02YjU4MzE2NjQxOWYxZWUxZGVlZTg3YTE2ZjAwMzRkNjJiMTNhYjViOyBFeHBpcmVzPVdlZCwgMTUtQXByLTIwMjAgMDE6MzQ6MTkgR01UOyBNYXgtQWdlPTc3NzYwMDA7IEh0dHBPbmx5OyBQYXRoPS8=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2Vya3pldWcvMC4xNC4xIFB5dGhvbi8zLjYuOQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VGh1LCAxNiBKYW4gMjAyMCAwMTozNDoxOSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjAgMjAwIE9LDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNClgtQ29udGVudC1UeXBlLU9wdGlvbnM6IG5vc25pZmYNCkVUYWc6IDkxOWE5MDdlNzBkNTQ0NjM3MDRmNDZlNjQwZTRhZWJmMzk2MTRhZTgNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MzE1MzYwMDANCkNvbnRlbnQtTGVuZ3RoOiAxMDE1OTg1DQpTZXQtQ29va2llOiBzZXNzaW9uX2lkPTZiNTgzMTY2NDE5ZjFlZTFkZWVlODdhMTZmMDAzNGQ2MmIxM2FiNWI7IEV4cGlyZXM9V2VkLCAxNS1BcHItMjAyMCAwMTozNDoxOSBHTVQ7IE1heC1BZ2U9Nzc3NjAwMDsgSHR0cE9ubHk7IFBhdGg9Lw0KU2VydmVyOiBXZXJremV1Zy8wLjE0LjEgUHl0aG9uLzMuNi45DQpEYXRlOiBUaHUsIDE2IEphbiAyMDIwIDAxOjM0OjE5IEdNVA0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>
/* /base/static/src/js/res_config_settings.js defined in bundle 'web.assets_backend' */
odoo.define('base.settings',function(require){"use strict";var BasicModel=require('web.BasicModel');var core=require('web.core');var config=require('web.config');var FormView=require('web.FormView');var FormController=require('web.FormController');var FormRenderer=require('web.FormRenderer');var view_registry=require('web.view_registry');var QWeb=core.qweb;var _t=core._t;var BaseSettingRenderer=FormRenderer.extend({events:_.extend({},FormRenderer.prototype.events,{'click .tab':'_onSettingTabClick','keyup .searchInput':'_onKeyUpSearch',}),init:function(){this._super.apply(this,arguments);this.activeView=false;this.activeTab=false;},start:function(){var prom=this._super.apply(this,arguments);if(config.device.isMobile){core.bus.on("DOM_updated",this,function(){this._moveToTab(this.currentIndex||this._currentAppIndex());});}
return prom;},confirmChange:function(){var self=this;return this._super.apply(this,arguments).then(function(){if(!self.$(".o_dirty_warning").length){self.$('.o_statusbar_buttons').append($('<span/>',{text:_t("Unsaved changes"),class:'text-muted ml-2 o_dirty_warning'}))}});},on_attach_callback:function(){this._super.apply(this,arguments);this.searchInput.focus();},_initModules:function(){var self=this;this.modules=[];_.each(this.$('.app_settings_block'),function(settingView,index){var group=!$(settingView).hasClass('o_invisible_modifier');var isNotApp=$(settingView).hasClass('o_not_app');if(group&&!isNotApp){var data=$(settingView).data();data.string=$(settingView).attr('string')||data.string;self.modules.push({key:data.key,string:data.string,imgurl:self._getAppIconUrl(data.key),});}else{$(settingView).remove();}});},_initSearch:function(){this.searchInput=this.$('.searchInput');if(this.searchText){this.searchInput.val(this.searchText);this._onKeyUpSearch();}else{this.searchText="";}},_activateSettingMobileTab:function(currentTab){var self=this;var moveTo=currentTab;var next=moveTo+1;var previous=moveTo-1;this.$(".settings .app_settings_block").removeClass("previous next current before after");this.$(".settings_tab .tab").removeClass("previous next current before after");_.each(this.modules,function(module,index){var tab=self.$(".tab[data-key='"+module.key+"']");var view=module.settingView;if(index===previous){tab.addClass("previous");tab.css("margin-left","0px");view.addClass("previous");}else if(index===next){tab.addClass("next");tab.css("margin-left","-"+tab.outerWidth()+"px");view.addClass("next");}else if(index<moveTo){tab.addClass("before");tab.css("margin-left","-"+tab.outerWidth()+"px");view.addClass("before");}else if(index===moveTo){var marginLeft=tab.outerWidth()/2;tab.css("margin-left","-"+marginLeft+"px");tab.addClass("current");view.addClass("current");}else if(index>moveTo){tab.addClass("after");tab.css("margin-left","0");view.addClass("after");}});},_currentAppIndex:function(){var self=this;var index=_.findIndex(this.modules,function(module){return module.key===self.activeSettingTab;});return index;},_enableSwipe:function(){var self=this;this.$('.settings').swipe({swipeLeft:function(){self._moveToTab(self.currentIndex+1);},swipeRight:function(){self._moveToTab(self.currentIndex-1);}});},_getAppIconUrl:function(module){return module==="general_settings"?"/base/static/description/settings.png":"/"+module+"/static/description/icon.png";},_getSearchHeader:function(imgurl,string){return $(QWeb.render('BaseSetting.SearchHeader',{imgurl:imgurl,string:string}));},_moveToTab:function(index){this.currentIndex=!index||index===-1?0:(index===this.modules.length?index-1:index);if(this.currentIndex!==-1){if(this.activeView){this.activeView.addClass("o_hidden");}
if(this.activeTab){this.activeTab.removeClass("selected");}
var view=this.modules[this.currentIndex].settingView;var tab=this.$(".tab[data-key='"+this.modules[this.currentIndex].key+"']");view.removeClass("o_hidden");this.activeView=view;this.activeTab=tab;if(config.device.isMobile){this._activateSettingMobileTab(this.currentIndex);}else{tab.addClass("selected");}}},_onSettingTabClick:function(event){this.searchInput.focus();if(this.searchText.length>0){this.searchInput.val('');this.searchText="";this._searchSetting();}
var settingKey=this.$(event.currentTarget).data('key');this._moveToTab(_.findIndex(this.modules,function(m){return m.key===settingKey;}));},_onKeyUpSearch:function(event){this.searchText=this.searchInput.val();this.activeTab.removeClass('selected');if(config.device.isMobile){this.$('.settings_tab').addClass('o_hidden');this.$('.settings').addClass('d-block');}
this._searchSetting();},_resetSearch:function(){this.searchInput.val("");_.each(this.modules,function(module){module.settingView.addClass('o_hidden');module.settingView.find('.o_setting_box').removeClass('o_hidden');module.settingView.find('h2').removeClass('o_hidden');module.settingView.find('.settingSearchHeader').addClass('o_hidden');module.settingView.find('.o_settings_container').addClass('mt16');});this.activeTab.removeClass('o_hidden').addClass('selected');this.activeView.removeClass('o_hidden');if(config.device.isMobile){this.$('.settings_tab').removeClass('o_hidden');this.$('.settings').removeClass('d-block');}},_render:function(){var self=this;return this._super.apply(this,arguments).then(function(){self._initModules();self._renderLeftPanel();self._initSearch();if(config.device.isMobile){self._enableSwipe();}});},_renderLeftPanel:function(){var self=this;_.each(this.modules,function(module){module.settingView=self.$('.app_settings_block[data-key="'+module.key+'"]');module.settingView.addClass("o_hidden");module.settingView.prepend(self._getSearchHeader(module.imgurl,module.string));});this._renderTabs();this._moveToTab(this.currentIndex||this._currentAppIndex());},_renderTabs:function(){var tabs=$(QWeb.render('BaseSetting.Tabs',{tabItems:this.modules}));tabs.appendTo(this.$(".settings_tab"));},_searchSetting:function(){var self=this;this.count=0;_.each(this.modules,function(module){self.inVisibleCount=0;module.settingView.find('.o_setting_box').addClass('o_hidden');module.settingView.find('h2').addClass('o_hidden');module.settingView.find('.settingSearchHeader').addClass('o_hidden');module.settingView.find('.o_settings_container').removeClass('mt16');var resultSetting=module.settingView.find(".o_form_label:containsTextLike('"+self.searchText+"')");if(resultSetting.length>0){resultSetting.each(function(){var settingBox=$(this).closest('.o_setting_box');if(!settingBox.hasClass('o_invisible_modifier')){settingBox.removeClass('o_hidden');$(this).html(self._wordHighlighter($(this).html(),self.searchText));}else{self.inVisibleCount++;}});if(self.inVisibleCount!==resultSetting.length){module.settingView.find('.settingSearchHeader').removeClass('o_hidden');module.settingView.removeClass('o_hidden');}}else{++self.count;}});this.count===_.size(this.modules)?this.$('.notFound').removeClass('o_hidden'):this.$('.notFound').addClass('o_hidden');if(this.searchText.length===0){this._resetSearch();}},_wordHighlighter:function(text,word){if(text.indexOf('highlighter')!==-1){text=text.replace('<span class="highlighter">',"");text=text.replace("</span>","");}
var match=text.search(new RegExp(word,"i"));word=text.substring(match,match+word.length);var highlightedWord="<span class='highlighter'>"+word+'</span>';return text.replace(word,highlightedWord);},});var BaseSettingController=FormController.extend({custom_events:_.extend({},FormController.prototype.custom_events,{button_clicked:'_onButtonClicked',}),init:function(){this._super.apply(this,arguments);this.disableAutofocus=true;this.renderer.activeSettingTab=this.initialState.context.module;},willRestore:function(){this.mode='edit';},_onButtonClicked:function(ev){var self=this;if(ev.data.attrs.name!=='execute'&&ev.data.attrs.name!=='cancel'){var recordID=ev.data.recordID;var _super=this._super;var args=arguments;this._discardChanges(recordID).then(function(){_super.apply(self,args);});}else{this._super.apply(this,arguments);}},});var BaseSettingsModel=BasicModel.extend({save:function(recordID){var self=this;return this._super.apply(this,arguments).then(function(result){delete self.localData[recordID].res_id;return result;});},});var BaseSettingView=FormView.extend({jsLibs:[],config:_.extend({},FormView.prototype.config,{Model:BaseSettingsModel,Renderer:BaseSettingRenderer,Controller:BaseSettingController,}),init:function(){if(config.device.isMobile){this.jsLibs.push('/web/static/lib/jquery.touchSwipe/jquery.touchSwipe.js');}
this._super.apply(this,arguments);},});view_registry.add('base_settings',BaseSettingView);return{Model:BaseSettingsModel,Renderer:BaseSettingRenderer,Controller:BaseSettingController,};});;

/* /web/static/lib/jquery.scrollTo/jquery.scrollTo.js defined in bundle 'web.assets_backend' */
;(function(define){'use strict';define(['jquery'],function($){var $scrollTo=$.scrollTo=function(target,duration,settings){return $(window).scrollTo(target,duration,settings);};$scrollTo.defaults={axis:'xy',duration:0,limit:true};$scrollTo.window=function(scope){return $(window)._scrollable();};$.fn._scrollable=function(){return this.map(function(){var elem=this,isWin=!elem.nodeName||$.inArray(elem.nodeName.toLowerCase(),['iframe','#document','html','body'])!=-1;if(!isWin)
return elem;var doc=(elem.contentWindow||elem).document||elem.ownerDocument||elem;return/webkit/i.test(navigator.userAgent)||doc.compatMode=='BackCompat'?doc.body:doc.documentElement;});};$.fn.scrollTo=function(target,duration,settings){if(typeof duration=='object'){settings=duration;duration=0;}
if(typeof settings=='function')
settings={onAfter:settings};if(target=='max')
target=9e9;settings=$.extend({},$scrollTo.defaults,settings);duration=duration||settings.duration;settings.queue=settings.queue&&settings.axis.length>1;if(settings.queue)
duration/=2;settings.offset=both(settings.offset);settings.over=both(settings.over);return this._scrollable().each(function(){if(target==null)return;var elem=this,$elem=$(elem),targ=target,toff,attr={},win=$elem.is('html,body');switch(typeof targ){case'number':case'string':if(/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)){targ=both(targ);break;}
targ=win?$(targ):$(targ,this);if(!targ.length)return;case'object':if(targ.is||targ.style)
toff=(targ=$(targ)).offset();}
var offset=$.isFunction(settings.offset)&&settings.offset(elem,targ)||settings.offset;$.each(settings.axis.split(''),function(i,axis){var Pos=axis=='x'?'Left':'Top',pos=Pos.toLowerCase(),key='scroll'+Pos,old=elem[key],max=$scrollTo.max(elem,axis);if(toff){attr[key]=toff[pos]+(win?0:old-$elem.offset()[pos]);if(settings.margin){attr[key]-=parseInt(targ.css('margin'+Pos))||0;attr[key]-=parseInt(targ.css('border'+Pos+'Width'))||0;}
attr[key]+=offset[pos]||0;if(settings.over[pos])
attr[key]+=targ[axis=='x'?'width':'height']()*settings.over[pos];}else{var val=targ[pos];attr[key]=val.slice&&val.slice(-1)=='%'?parseFloat(val)/100*max:val;}
if(settings.limit&&/^\d+$/.test(attr[key]))
attr[key]=attr[key]<=0?0:Math.min(attr[key],max);if(!i&&settings.queue){if(old!=attr[key])
animate(settings.onAfterFirst);delete attr[key];}});animate(settings.onAfter);function animate(callback){$elem.animate(attr,duration,settings.easing,callback&&function(){callback.call(this,targ,settings);});}}).end();};$scrollTo.max=function(elem,axis){var Dim=axis=='x'?'Width':'Height',scroll='scroll'+Dim;if(!$(elem).is('html,body'))
return elem[scroll]-$(elem)[Dim.toLowerCase()]();var size='client'+Dim,html=elem.ownerDocument.documentElement,body=elem.ownerDocument.body;return Math.max(html[scroll],body[scroll])-Math.min(html[size],body[size]);};function both(val){return $.isFunction(val)||$.isPlainObject(val)?val:{top:val,left:val};}
return $scrollTo;})}(typeof define==='function'&&define.amd?define:function(deps,factory){if(typeof module!=='undefined'&&module.exports){module.exports=factory(require('jquery'));}else{factory(jQuery);}}));;

/* /web/static/lib/fuzzy-master/fuzzy.js defined in bundle 'web.assets_backend' */
(function(){var root=this;var fuzzy={};if(typeof exports!=='undefined'){module.exports=fuzzy;}else{root.fuzzy=fuzzy;}
fuzzy.simpleFilter=function(pattern,array){return array.filter(function(string){return fuzzy.test(pattern,string);});};fuzzy.test=function(pattern,string){return fuzzy.match(pattern,string)!==null;};fuzzy.match=function(pattern,string,opts){opts=opts||{};var patternIdx=0,result=[],len=string.length,totalScore=0,currScore=0,pre=opts.pre||'',post=opts.post||'',compareString=opts.caseSensitive&&string||string.toLowerCase(),ch,compareChar;pattern=opts.caseSensitive&&pattern||pattern.toLowerCase();for(var idx=0;idx<len;idx++){ch=string[idx];if(compareString[idx]===pattern[patternIdx]){if(pattern[patternIdx]===' '){currScore=1-idx/200;}else{currScore+=1+currScore-idx/200;}
ch=pre+ch+post;patternIdx+=1;}else{currScore=0;}
totalScore+=currScore;if(compareString[idx]===' '){currScore=0;}
result[result.length]=ch;}
if(patternIdx===pattern.length){return{rendered:result.join(''),score:totalScore};}
return null;};fuzzy.filter=function(pattern,arr,opts){if(!arr||arr.length===0){return[]}
if(typeof pattern!=='string'){return arr}
opts=opts||{};return arr.reduce(function(prev,element,idx,arr){var str=element;if(opts.extract){str=opts.extract(element);}
var rendered=fuzzy.match(pattern,str,opts);if(rendered!=null){prev[prev.length]={string:rendered.rendered,score:rendered.score,index:idx,original:element};}
return prev;},[]).sort(function(a,b){var compare=b.score-a.score;if(compare)return compare;return a.index-b.index;});};}());;

/* <inline asset> defined in bundle 'web.assets_backend' */
odoo._modules=["base","web","base_import","web_diagram","web_editor","web_kanban_gauge","web_tour"];;

/* /web/static/lib/py.js/lib/py.js defined in bundle 'web.assets_backend' */
var py={};(function(py){var create=function(o,props){function F(){}
F.prototype=o;var inst=new F;if(props){for(var name in props){if(!props.hasOwnProperty(name)){continue;}
inst[name]=props[name];}}
return inst;};var symbols={};var comparators={};var Base={nud:function(){throw new Error(this.id+" undefined as prefix");},led:function(led){throw new Error(this.id+" undefined as infix");},toString:function(){if(this.id==='(constant)'||this.id==='(number)'||this.id==='(name)'||this.id==='(string)'){return[this.id.slice(0,this.id.length-1),' ',this.value,')'].join('');}else if(this.id==='(end)'){return'(end)';}else if(this.id==='(comparator)'){var repr=['(comparator',this.expressions[0]];for(var i=0;i<this.operators.length;++i){repr.push(this.operators[i],this.expressions[i+1]);}
return repr.join(' ')+')';}
var out=[this.id,this.first,this.second,this.third].filter(function(r){return r}).join(' ');return'('+out+')';}};function symbol(id,bp){bp=bp||0;var s=symbols[id];if(s){if(bp>s.lbp){s.lbp=bp;}
return s;}
return symbols[id]=create(Base,{id:id,lbp:bp});}
function constant(id){var s=symbol(id);s.id='(constant)';s.value=id;s.nud=function(){return this;};}
function prefix(id,bp,nud){symbol(id).nud=nud||function(){this.first=expression(bp);return this}}
function infix(id,bp,led){symbol(id,bp).led=led||function(left){this.first=left;this.second=expression(bp);return this;}}
function infixr(id,bp){symbol(id,bp).led=function(left){this.first=left;this.second=expression(bp-1);return this;}}
function comparator(id){comparators[id]=true;var bp=60;infix(id,bp,function(left){this.id='(comparator)';this.operators=[id];this.expressions=[left,expression(bp)];while(token.id in comparators){this.operators.push(token.id);advance();this.expressions.push(expression(bp));}
return this;});}
constant('None');constant('False');constant('True');symbol('(number)').nud=function(){return this;};symbol('(name)').nud=function(){return this;};symbol('(string)').nud=function(){return this;};symbol('(end)');symbol(':');symbol(')');symbol(']');symbol('}');symbol(',');symbol('else');infix('=',10,function(left){if(left.id!=='(name)'){throw new Error("Expected keyword argument name, got "+token.id);}
this.first=left;this.second=expression();return this;});symbol('lambda',20).nud=function(){this.first=[];if(token.id!==':'){for(;;){if(token.id!=='(name)'){throw new Error('Excepted an argument name');}
this.first.push(token);advance();if(token.id!==','){break;}
advance(',');}}
advance(':');this.second=expression();return this;};infix('if',20,function(left){this.first=left;this.second=expression();advance('else');this.third=expression();return this;});infixr('or',30);infixr('and',40);prefix('not',50);comparator('in');comparator('not in');comparator('is');comparator('is not');comparator('<');comparator('<=');comparator('>');comparator('>=');comparator('<>');comparator('!=');comparator('==');infix('|',70);infix('^',80);infix('&',90);infix('<<',100);infix('>>',100);infix('+',110);infix('-',110);infix('*',120);infix('/',120);infix('//',120);infix('%',120);prefix('-',130);prefix('+',130);prefix('~',130);infixr('**',140);infix('.',150,function(left){if(token.id!=='(name)'){throw new Error('Expected attribute name, got '+token.id);}
this.first=left;this.second=token;advance();return this;});symbol('(',150).nud=function(){this.first=[];var comma=false;if(token.id!==')'){while(true){if(token.id===')'){break;}
this.first.push(expression());if(token.id!==','){break;}
comma=true;advance(',');}}
advance(')');if(!this.first.length||comma){return this;}else{return this.first[0];}};symbol('(').led=function(left){this.first=left;this.second=[];if(token.id!==")"){for(;;){this.second.push(expression());if(token.id!==','){break;}
advance(',');}}
advance(")");return this;};infix('[',150,function(left){this.first=left;this.second=expression();advance("]");return this;});symbol('[').nud=function(){this.first=[];if(token.id!==']'){for(;;){if(token.id===']'){break;}
this.first.push(expression());if(token.id!==','){break;}
advance(',');}}
advance(']');return this;};symbol('{').nud=function(){this.first=[];if(token.id!=='}'){for(;;){if(token.id==='}'){break;}
var key=expression();advance(':');var value=expression();this.first.push([key,value]);if(token.id!==','){break;}
advance(',');}}
advance('}');return this;};py.tokenize=(function(){function group(){return'('+Array.prototype.join.call(arguments,'|')+')';}
var Whitespace='[ \\f\\t]*';var Name='[a-zA-Z_]\\w*';var DecNumber='\\d+(L|l)?';var IntNumber=DecNumber;var PointFloat=group('\\d+\\.\\d*','\\.\\d+');var FloatNumber=PointFloat;var Number=group(FloatNumber,IntNumber);var Operator=group("\\*\\*=?",">>=?","<<=?","<>","!=","//=?","[+\\-*/%&|^=<>]=?","~");var Bracket='[\\[\\]\\(\\)\\{\\}]';var Special='[:;.,`@]';var Funny=group(Operator,Bracket,Special);var ContStr=group("([uU])?'([^\n'\\\\]*(?:\\\\.[^\n'\\\\]*)*)'",'([uU])?"([^\n"\\\\]*(?:\\\\.[^\n"\\\\]*)*)"');var PseudoToken=Whitespace+group(Number,Funny,ContStr,Name);var number_pattern=new RegExp('^'+Number+'$');var string_pattern=new RegExp('^'+ContStr+'$');var name_pattern=new RegExp('^'+Name+'$');var strip=new RegExp('^'+Whitespace);return function tokenize(s){var max=s.length,tokens=[],start,end;var pseudoprog=new RegExp(PseudoToken,'g');while(pseudoprog.lastIndex<max){var pseudomatch=pseudoprog.exec(s);if(!pseudomatch){if(/^\s+$/.test(s.slice(end))){break;}
throw new Error('Failed to tokenize <<'+s
+'>> at index '+(end||0)
+'; parsed so far: '+tokens);}
start=pseudomatch.index;end=pseudoprog.lastIndex;var token=s.slice(start,end).replace(strip,'');if(number_pattern.test(token)){tokens.push(create(symbols['(number)'],{value:parseFloat(token)}));}else if(string_pattern.test(token)){var m=string_pattern.exec(token);var value=(m[3]!==undefined?m[3]:m[5]);tokens.push(create(symbols['(string)'],{unicode:!!(m[2]||m[4]),value:value}));}else if(token in symbols){var symbol;if(token==='in'&&tokens.length>1&&tokens[tokens.length-1].id==='not'){symbol=symbols['not in'];tokens.pop();}else if(token==='not'&&tokens.length>1&&tokens[tokens.length-1].id==='is'){symbol=symbols['is not'];tokens.pop();}else{symbol=symbols[token];}
tokens.push(create(symbol));}else if(name_pattern.test(token)){tokens.push(create(symbols['(name)'],{value:token}));}else{throw new Error("Tokenizing failure of <<"+s+">> at index "+start
+" for token [["+token+"]]"
+"; parsed so far: "+tokens);}}
tokens.push(create(symbols['(end)']));return tokens;}})();var token,next;function expression(rbp){rbp=rbp||0;var t=token;token=next();var left=t.nud();while(rbp<token.lbp){t=token;token=next();left=t.led(left);}
return left;}
function advance(id){if(id&&token.id!==id){throw new Error('Expected "'+id+'", got "'+token.id+'"');}
token=next();}
function PY_ensurepy(val,name){switch(val){case undefined:throw new Error("NameError: name '"+name+"' is not defined");case null:return py.None;case true:return py.True;case false:return py.False;}
var fn=function(){};fn.prototype=py.object;if(py.PY_isInstance(val,py.object)||py.PY_isSubclass(val,py.object)){return val;}
switch(typeof val){case'number':return py.float.fromJSON(val);case'string':return py.str.fromJSON(val);case'function':return py.PY_def.fromJSON(val);}
switch(val.constructor){case Object:var o=py.PY_call(py.object);for(var prop in val){if(val.hasOwnProperty(prop)){o[prop]=val[prop];}}
return o;case Array:return py.list.fromJSON(val);}
throw new Error("Could not convert "+val+" to a pyval");}
var typename=function(obj){if(obj.__class__){return obj.__class__.__name__;}else if(typeof obj!=='object'){return typeof obj;}else{return obj.constructor.name;}};py.py={};py.PY_parseArgs=function PY_parseArgs(argument,format){var out={};var args=argument[0];var kwargs={};for(var k in argument[1]){if(!argument[1].hasOwnProperty(k)){continue;}
kwargs[k]=argument[1][k];}
if(typeof format==='string'){format=format.split(/\s+/);}
var name=function(spec){if(typeof spec==='string'){return spec;}else if(spec instanceof Array&&spec.length===2){return spec[0];}
throw new Error("TypeError: unknown format specification "+
JSON.stringify(spec));};var spec;for(var i=0;i<args.length;++i){spec=format[i];if(!spec||spec==='*'){throw new Error("TypeError: function takes exactly "+(i-1)+" positional arguments ("+args.length+" given")}else if(/^\*\w/.test(spec)){out[name(spec.slice(1))]=args.slice(i);break;}
out[name(spec)]=args[i];}
for(var j=i;j<format.length;++j){spec=format[j];var n=name(spec);if(n in out){throw new Error("TypeError: function got multiple values "+"for keyword argument '"+kwarg+"'");}
if(/^\*\*\w/.test(n)){out[n.slice(2)]=kwargs;kwargs={};break;}
if(n in kwargs){out[n]=kwargs[n];delete kwargs[n];}}
for(var key in kwargs){throw new Error("TypeError: function got an unexpected keyword argument '"
+key+"'");}
var kwonly=0;for(var k=0;k<format.length;++k){if(/^\*/.test(format[k])){kwonly=1;break;}}
for(var k=0;k<format.length;++k){spec=format[k];var n=name(spec);if(/^\*/.test(n)||n in out){continue;}
if(!(spec instanceof Array)){throw new Error("TypeError: function takes exactly "+(format.length-kwonly)
+" arguments");}
out[n]=spec[1];}
return out;};py.PY_hasAttr=function(o,attr_name){try{py.PY_getAttr(o,attr_name);return true;}catch(e){return false;}};py.PY_getAttr=function(o,attr_name){return PY_ensurepy(o.__getattribute__(attr_name));};py.PY_str=function(o){var v=o.__str__();if(py.PY_isInstance(v,py.str)){return v;}
throw new Error('TypeError: __str__ returned non-string (type '
+typename(v)
+')');};py.PY_isInstance=function(inst,cls){var fn=function(){};fn.prototype=cls;return inst instanceof fn;};py.PY_isSubclass=function(derived,cls){var fn=function(){};fn.prototype=cls;return derived===cls||derived instanceof fn;};py.PY_call=function(callable,args,kwargs){if(!args){args=[];}
if(typeof args==='object'&&!(args instanceof Array)){kwargs=args;args=[];}
if(!kwargs){kwargs={};}
if(callable.__is_type){var instance=callable.__new__.call(callable,args,kwargs);var typ=function(){};typ.prototype=callable;if(instance instanceof typ){instance.__init__.call(instance,args,kwargs);}
return instance}
return callable.__call__(args,kwargs);};py.PY_isTrue=function(o){var res=o.__nonzero__();if(res===py.True){return true;}
if(res===py.False){return false;}
throw new Error("TypeError: __nonzero__ should return bool, returned "
+typename(res));};py.PY_not=function(o){return!py.PY_isTrue(o);};py.PY_size=function(o){if(!o.__len__){throw new Error("TypeError: object of type '"+
typename(o)+"' has no len()");}
var v=o.__len__();if(typeof v!=='number'){throw new Error("TypeError: a number is required");}
return v;};py.PY_getItem=function(o,key){if(!('__getitem__'in o)){throw new Error("TypeError: '"+typename(o)+"' object is unsubscriptable")}
if(!py.PY_isInstance(key,py.object)){throw new Error("TypeError: '"+typename(key)+"' is not a py.js object");}
var res=o.__getitem__(key);if(!py.PY_isInstance(key,py.object)){throw new Error("TypeError: __getitem__ must return a py.js object, got "
+typename(res));}
return res;};py.PY_setItem=function(o,key,v){if(!('__setitem__'in o)){throw new Error("TypeError: '"+typename(o)+"' object does not support item assignment");}
if(!py.PY_isInstance(key,py.object)){throw new Error("TypeError: '"+typename(key)+"' is not a py.js object");}
if(!py.PY_isInstance(v,py.object)){throw new Error("TypeError: '"+typename(v)+"' is not a py.js object");}
o.__setitem__(key,v);};py.PY_add=function(o1,o2){return PY_op(o1,o2,'+');};py.PY_subtract=function(o1,o2){return PY_op(o1,o2,'-');};py.PY_multiply=function(o1,o2){return PY_op(o1,o2,'*');};py.PY_divide=function(o1,o2){return PY_op(o1,o2,'/');};py.PY_negative=function(o){if(!o.__neg__){throw new Error("TypeError: bad operand for unary -: '"
+typename(o)
+"'");}
return o.__neg__();};py.PY_positive=function(o){if(!o.__pos__){throw new Error("TypeError: bad operand for unary +: '"
+typename(o)
+"'");}
return o.__pos__();};py.type=function type(name,bases,dict){if(typeof name!=='string'){throw new Error("ValueError: a class name should be a string");}
if(!bases||bases.length===0){bases=[py.object];}else if(bases.length>1){throw new Error("ValueError: can't provide multiple bases for a "
+"new type");}
var base=bases[0];var ClassObj=create(base);if(dict){for(var k in dict){if(!dict.hasOwnProperty(k)){continue;}
ClassObj[k]=dict[k];}}
ClassObj.__class__=ClassObj;ClassObj.__name__=name;ClassObj.__bases__=bases;ClassObj.__is_type=true;return ClassObj;};py.type.__call__=function(){var args=py.PY_parseArgs(arguments,['object']);return args.object.__class__;};var hash_counter=0;py.object=py.type('object',[{}],{__new__:function(){var inst=create(this);inst.__is_type=false;return inst;},__init__:function(){},__hash__:function(){if(this._hash){return this._hash;}
return this._hash='\0\0\0'+String(hash_counter++);},__eq__:function(other){return(this===other)?py.True:py.False;},__ne__:function(other){if(py.PY_isTrue(this.__eq__(other))){return py.False;}else{return py.True;}},__lt__:function(){return py.NotImplemented;},__le__:function(){return py.NotImplemented;},__ge__:function(){return py.NotImplemented;},__gt__:function(){return py.NotImplemented;},__str__:function(){return this.__unicode__();},__unicode__:function(){return py.str.fromJSON('<'+typename(this)+' object>');},__nonzero__:function(){return py.True;},__getattribute__:function(name){if(name in this){var val=this[name];if(typeof val==='object'&&'__get__'in val){return val.__get__(this,py.PY_call(py.type,[this]));}
if(typeof val==='function'&&!this.hasOwnProperty(name)){return PY_instancemethod.fromJSON(val,this);}
return val;}
if('__getattr__'in this){return this.__getattr__(name);}
throw new Error("AttributeError: object has no attribute '"+name+"'");},__setattr__:function(name,value){if(name in this&&'__set__'in this[name]){this[name].__set__(this,value);}
this[name]=value;},toJSON:function(){throw new Error(this.constructor.name+' can not be converted to JSON');}});var NoneType=py.type('NoneType',null,{__nonzero__:function(){return py.False;},toJSON:function(){return null;}});py.None=py.PY_call(NoneType);var NotImplementedType=py.type('NotImplementedType',null,{});py.NotImplemented=py.PY_call(NotImplementedType);var booleans_initialized=false;py.bool=py.type('bool',null,{__new__:function(){if(!booleans_initialized){return py.object.__new__.apply(this);}
var ph={};var args=py.PY_parseArgs(arguments,[['value',ph]]);if(args.value===ph){return py.False;}
return py.PY_isTrue(args.value)?py.True:py.False;},__str__:function(){return py.str.fromJSON((this===py.True)?"True":"False");},__nonzero__:function(){return this;},fromJSON:function(val){return val?py.True:py.False},toJSON:function(){return this===py.True;}});py.True=py.PY_call(py.bool);py.False=py.PY_call(py.bool);booleans_initialized=true;py.float=py.type('float',null,{__init__:function(){var placeholder={};var args=py.PY_parseArgs(arguments,[['value',placeholder]]);var value=args.value;if(value===placeholder){this._value=0;return;}
if(py.PY_isInstance(value,py.float)){this._value=value._value;}
if(py.PY_isInstance(value,py.object)&&'__float__'in value){var res=value.__float__();if(py.PY_isInstance(res,py.float)){this._value=res._value;return;}
throw new Error('TypeError: __float__ returned non-float (type '+
typename(res)+')');}
throw new Error('TypeError: float() argument must be a string or a number');},__str__:function(){return py.str.fromJSON(String(this._value));},__eq__:function(other){return this._value===other._value?py.True:py.False;},__lt__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return this._value<other._value?py.True:py.False;},__le__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return this._value<=other._value?py.True:py.False;},__gt__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return this._value>other._value?py.True:py.False;},__ge__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return this._value>=other._value?py.True:py.False;},__abs__:function(){return py.float.fromJSON(Math.abs(this._value));},__add__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return py.float.fromJSON(this._value+other._value);},__mod__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return py.float.fromJSON(this._value%other._value);},__neg__:function(){return py.float.fromJSON(-this._value);},__sub__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return py.float.fromJSON(this._value-other._value);},__mul__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return py.float.fromJSON(this._value*other._value);},__pow__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return py.float.fromJSON(this._value**other._value);},__div__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
return py.float.fromJSON(this._value/other._value);},__nonzero__:function(){return this._value?py.True:py.False;},fromJSON:function(v){if(!(typeof v==='number')){throw new Error('py.float.fromJSON can only take numbers');}
var instance=py.PY_call(py.float);instance._value=v;return instance;},toJSON:function(){return this._value;}});py.str=py.type('str',null,{__init__:function(){var placeholder={};var args=py.PY_parseArgs(arguments,[['value',placeholder]]);var s=args.value;if(s===placeholder){this._value='';return;}
this._value=py.PY_str(s)._value;},__hash__:function(){return'\1\0\1'+this._value;},__str__:function(){return this;},__eq__:function(other){if(py.PY_isInstance(other,py.str)&&this._value===other._value){return py.True;}
return py.False;},__lt__:function(other){if(py.PY_not(py.PY_call(py.isinstance,[other,py.str]))){return py.NotImplemented;}
return this._value<other._value?py.True:py.False;},__le__:function(other){if(!py.PY_isInstance(other,py.str)){return py.NotImplemented;}
return this._value<=other._value?py.True:py.False;},__gt__:function(other){if(!py.PY_isInstance(other,py.str)){return py.NotImplemented;}
return this._value>other._value?py.True:py.False;},__ge__:function(other){if(!py.PY_isInstance(other,py.str)){return py.NotImplemented;}
return this._value>=other._value?py.True:py.False;},__add__:function(other){if(!py.PY_isInstance(other,py.str)){return py.NotImplemented;}
return py.str.fromJSON(this._value+other._value);},__nonzero__:function(){return this._value.length?py.True:py.False;},__contains__:function(s){return(this._value.indexOf(s._value)!==-1)?py.True:py.False;},fromJSON:function(s){if(typeof s==='string'){var instance=py.PY_call(py.str);instance._value=s;return instance;}
throw new Error("str.fromJSON can only take strings");},toJSON:function(){return this._value;}});py.tuple=py.type('tuple',null,{__init__:function(){this._values=[];},__len__:function(){return this._values.length;},__nonzero__:function(){return py.PY_size(this)>0?py.True:py.False;},__contains__:function(value){for(var i=0,len=this._values.length;i<len;++i){if(py.PY_isTrue(this._values[i].__eq__(value))){return py.True;}}
return py.False;},__getitem__:function(index){return this._values[index.toJSON()];},toJSON:function(){var out=[];for(var i=0;i<this._values.length;++i){out.push(this._values[i].toJSON());}
return out;},fromJSON:function(ar){if(!(ar instanceof Array)){throw new Error("Can only create a py.tuple from an Array");}
var t=py.PY_call(py.tuple);for(var i=0;i<ar.length;++i){t._values.push(PY_ensurepy(ar[i]));}
return t;}});py.list=py.type('list',null,{__nonzero__:function(){return this.__len__>0?py.True:py.False;},});_.defaults(py.list,py.tuple)
py.dict=py.type('dict',null,{__init__:function(){this._store={};},__getitem__:function(key){var h=key.__hash__();if(!(h in this._store)){throw new Error("KeyError: '"+key.toJSON()+"'");}
return this._store[h][1];},__setitem__:function(key,value){this._store[key.__hash__()]=[key,value];},__len__:function(){return Object.keys(this._store).length},__nonzero__:function(){return py.PY_size(this)>0?py.True:py.False;},get:function(){var args=py.PY_parseArgs(arguments,['k',['d',py.None]]);var h=args.k.__hash__();if(!(h in this._store)){return args.d;}
return this._store[h][1];},fromJSON:function(d){var instance=py.PY_call(py.dict);for(var k in(d||{})){if(!d.hasOwnProperty(k)){continue;}
instance.__setitem__(py.str.fromJSON(k),PY_ensurepy(d[k]));}
return instance;},toJSON:function(){var out={};for(var k in this._store){var item=this._store[k];out[item[0].toJSON()]=item[1].toJSON();}
return out;}});py.PY_def=py.type('function',null,{__call__:function(){return this._func.apply(this._inst,arguments);},fromJSON:function(nativefunc){var instance=py.PY_call(py.PY_def);instance._inst=null;instance._func=nativefunc;return instance;},toJSON:function(){return this._func;}});py.classmethod=py.type('classmethod',null,{__init__:function(){var args=py.PY_parseArgs(arguments,'function');this._func=args['function'];},__get__:function(obj,type){return PY_instancemethod.fromJSON(this._func,type);},fromJSON:function(func){return py.PY_call(py.classmethod,[func]);}});var PY_instancemethod=py.type('instancemethod',[py.PY_def],{fromJSON:function(nativefunc,instance){var inst=py.PY_call(PY_instancemethod);inst._inst=instance;inst._func=nativefunc;return inst;}});py.abs=new py.PY_def.fromJSON(function abs(){var args=py.PY_parseArgs(arguments,['number']);if(!args.number.__abs__){throw new Error("TypeError: bad operand type for abs(): '"
+typename(args.number)
+"'");}
return args.number.__abs__();});py.len=new py.PY_def.fromJSON(function len(){var args=py.PY_parseArgs(arguments,['object']);return py.float.fromJSON(py.PY_size(args.object));});py.isinstance=new py.PY_def.fromJSON(function isinstance(){var args=py.PY_parseArgs(arguments,['object','class']);return py.PY_isInstance(args.object,args['class'])?py.True:py.False;});py.issubclass=new py.PY_def.fromJSON(function issubclass(){var args=py.PY_parseArgs(arguments,['C','B']);return py.PY_isSubclass(args.C,args.B)?py.True:py.False;});var PY_decode_string_literal=function(str,unicode){var out=[],code;var direct_map={'\\':'\\','"':'"',"'":"'",'a':'\x07','b':'\x08','f':'\x0c','n':'\n','r':'\r','t':'\t','v':'\v'};for(var i=0;i<str.length;++i){if(str[i]!=='\\'){out.push(str[i]);continue;}
var escape=str[i+1];if(escape in direct_map){out.push(direct_map[escape]);++i;continue;}
switch(escape){case'\n':++i;continue;case'N':if(!unicode){break;}
throw Error("SyntaxError: \\N{} escape not implemented");case'u':if(!unicode){break;}
var uni=str.slice(i+2,i+6);if(!/[0-9a-f]{4}/i.test(uni)){throw new Error(["SyntaxError: (unicode error) 'unicodeescape' codec"," can't decode bytes in position ",i,"-",i+4,": truncated \\uXXXX escape"].join(''));}
code=parseInt(uni,16);out.push(String.fromCharCode(code));i+=5;continue;case'U':if(!unicode){break;}
throw Error("SyntaxError: \\U escape not implemented");case'x':var hex=str.slice(i+2,i+4);if(!/[0-9a-f]{2}/i.test(hex)){if(!unicode){throw new Error('ValueError: invalid \\x escape');}
throw new Error(["SyntaxError: (unicode error) 'unicodeescape'"," codec can't decode bytes in position ",i,'-',i+2,": truncated \\xXX escape"].join(''))}
code=parseInt(hex,16);out.push(String.fromCharCode(code));i+=3;continue;default:if(!/[0-8]/.test(escape)){break;}
var r=/[0-8]{1,3}/g;r.lastIndex=i+1;var m=r.exec(str);var oct=m[0];code=parseInt(oct,8);out.push(String.fromCharCode(code));i+=oct.length;continue;}
out.push('\\');}
return out.join('');};var PY_operators={'==':['eq','eq',function(a,b){return a===b;}],'!=':['ne','ne',function(a,b){return a!==b;}],'<>':['ne','ne',function(a,b){return a!==b;}],'<':['lt','gt',function(a,b){return a.__class__.__name__<b.__class__.__name__;}],'<=':['le','ge',function(a,b){return a.__class__.__name__<=b.__class__.__name__;}],'>':['gt','lt',function(a,b){return a.__class__.__name__>b.__class__.__name__;}],'>=':['ge','le',function(a,b){return a.__class__.__name__>=b.__class__.__name__;}],'+':['add','radd'],'-':['sub','rsub'],'*':['mul','rmul'],'/':['div','rdiv'],'//':['floordiv','rfloordiv'],'%':['mod','rmod'],'**':['pow','rpow'],'<<':['lshift','rlshift'],'>>':['rshift','rrshift'],'&':['and','rand'],'^':['xor','rxor'],'|':['or','ror']};var PY_op=function(o1,o2,op){var r;var methods=PY_operators[op];var forward='__'+methods[0]+'__',reverse='__'+methods[1]+'__';var otherwise=methods[2];if(forward in o1&&(r=o1[forward](o2))!==py.NotImplemented){return r;}
if(reverse in o2&&(r=o2[reverse](o1))!==py.NotImplemented){return r;}
if(otherwise){return PY_ensurepy(otherwise(o1,o2));}
throw new Error("TypeError: unsupported operand type(s) for "+op+": '"
+typename(o1)+"' and '"+typename(o2)+"'");};var PY_builtins={type:py.type,None:py.None,True:py.True,False:py.False,NotImplemented:py.NotImplemented,object:py.object,bool:py.bool,float:py.float,str:py.str,unicode:py.unicode,tuple:py.tuple,list:py.list,dict:py.dict,abs:py.abs,len:py.len,isinstance:py.isinstance,issubclass:py.issubclass,classmethod:py.classmethod,};py.parse=function(toks){var index=0;token=toks[0];next=function(){return toks[++index];};return expression();};var evaluate_operator=function(operator,a,b){switch(operator){case'is':return a===b?py.True:py.False;case'is not':return a!==b?py.True:py.False;case'in':return b.__contains__(a);case'not in':return py.PY_isTrue(b.__contains__(a))?py.False:py.True;case'==':case'!=':case'<>':case'<':case'<=':case'>':case'>=':return PY_op(a,b,operator);}
throw new Error('SyntaxError: unknown comparator [['+operator+']]');};py.evaluate=function(expr,context){context=context||{};switch(expr.id){case'(name)':var val=context[expr.value];if(val===undefined&&expr.value in PY_builtins){return PY_builtins[expr.value];}
return PY_ensurepy(val,expr.value);case'(string)':return py.str.fromJSON(PY_decode_string_literal(expr.value,expr.unicode));case'(number)':return py.float.fromJSON(expr.value);case'(constant)':switch(expr.value){case'None':return py.None;case'False':return py.False;case'True':return py.True;}
throw new Error("SyntaxError: unknown constant '"+expr.value+"'");case'(comparator)':var result,left=py.evaluate(expr.expressions[0],context);for(var i=0;i<expr.operators.length;++i){result=evaluate_operator(expr.operators[i],left,left=py.evaluate(expr.expressions[i+1],context));if(py.PY_not(result)){return py.False;}}
return py.True;case'not':return py.PY_isTrue(py.evaluate(expr.first,context))?py.False:py.True;case'and':var and_first=py.evaluate(expr.first,context);if(py.PY_isTrue(and_first.__nonzero__())){return py.evaluate(expr.second,context);}
return and_first;case'or':var or_first=py.evaluate(expr.first,context);if(py.PY_isTrue(or_first.__nonzero__())){return or_first}
return py.evaluate(expr.second,context);case'(':if(expr.second){var callable=py.evaluate(expr.first,context);var args=[],kwargs={};for(var jj=0;jj<expr.second.length;++jj){var arg=expr.second[jj];if(arg.id!=='='){args.push(py.evaluate(arg,context));}else{kwargs[arg.first.value]=py.evaluate(arg.second,context);}}
return py.PY_call(callable,args,kwargs);}
var tuple_exprs=expr.first,tuple_values=[];for(var j=0,len=tuple_exprs.length;j<len;++j){tuple_values.push(py.evaluate(tuple_exprs[j],context));}
return py.tuple.fromJSON(tuple_values);case'[':if(expr.second){return py.PY_getItem(py.evaluate(expr.first,context),py.evaluate(expr.second,context));}
var list_exprs=expr.first,list_values=[];for(var k=0;k<list_exprs.length;++k){list_values.push(py.evaluate(list_exprs[k],context));}
return py.list.fromJSON(list_values);case'{':var dict_exprs=expr.first,dict=py.PY_call(py.dict);for(var l=0;l<dict_exprs.length;++l){py.PY_setItem(dict,py.evaluate(dict_exprs[l][0],context),py.evaluate(dict_exprs[l][1],context));}
return dict;case'.':if(expr.second.id!=='(name)'){throw new Error('SyntaxError: '+expr);}
return py.PY_getAttr(py.evaluate(expr.first,context),expr.second.value);case'~':return(py.evaluate(expr.first,context)).__invert__();case'+':if(!expr.second){return py.PY_positive(py.evaluate(expr.first,context));}
case'-':if(!expr.second){return py.PY_negative(py.evaluate(expr.first,context));}
case'*':case'/':case'//':case'%':case'**':case'<<':case'>>':case'&':case'^':case'|':return PY_op(py.evaluate(expr.first,context),py.evaluate(expr.second,context),expr.id);default:throw new Error('SyntaxError: Unknown node [['+expr.id+']]');}};py.eval=function(str,context){return py.evaluate(py.parse(py.tokenize(str)),context).toJSON();}})(typeof exports==='undefined'?py:exports);;

/* /web/static/lib/py.js/lib/py_extras.js defined in bundle 'web.assets_backend' */
(function(py){"use strict";function divmod(a,b,fn){var mod=a%b;if(mod>0&&b<0||mod<0&&b>0){mod+=b;}
return fn(Math.floor(a/b),mod);}
function modf(x,fn){var mod=x%1;if(mod<0){mod+=1;}
return fn(mod,Math.floor(x));}
function assert(bool){if(!bool){throw new Error("AssertionError");}}
var obj=function(){};obj.prototype=py.object;var asJS=function(arg){if(arg instanceof obj){return arg.toJSON();}
return arg;};var datetime=py.PY_call(py.object);var zero=py.float.fromJSON(0);var DAYS_IN_MONTH=[null,31,28,31,30,31,30,31,31,30,31,30,31];var DAYS_BEFORE_MONTH=[null];var dbm=0;for(var i=1;i<DAYS_IN_MONTH.length;++i){DAYS_BEFORE_MONTH.push(dbm);dbm+=DAYS_IN_MONTH[i];}
function is_leap(year){return year%4===0&&(year%100!==0||year%400===0);}
function days_before_year(year){var y=year-1;return y*365+Math.floor(y/4)-Math.floor(y/100)+Math.floor(y/400);}
function days_in_month(year,month){if(month===2&&is_leap(year)){return 29;}
return DAYS_IN_MONTH[month];}
function days_before_month(year,month){var post_leap_feb=month>2&&is_leap(year);return DAYS_BEFORE_MONTH[month]+(post_leap_feb?1:0);}
function ymd2ord(year,month,day){var dim=days_in_month(year,month);if(!(1<=day&&day<=dim)){throw new Error("ValueError: day must be in 1.."+dim);}
return days_before_year(year)+
days_before_month(year,month)+
day;}
function get_quarter_number(month){return Math.ceil(month/3);}
function get_quarter(year,month){var quarter_number=get_quarter_number(month);var month_from=((quarter_number-1)*3)+1
var date_from={year:year,month:month_from,day:1}
var date_to={year:year,month:month_from+2,day:days_in_month(year,month)}
return[date_from,date_to];}
function get_day_of_week(year,month,day){var d=new Date(year,month-1,day);return(d.getDay()+6)%7;}
var DI400Y=days_before_year(401);var DI100Y=days_before_year(101);var DI4Y=days_before_year(5);function ord2ymd(n){--n;var n400,n100,n4,n1,n0;divmod(n,DI400Y,function(_n400,n){n400=_n400;divmod(n,DI100Y,function(_n100,n){n100=_n100;divmod(n,DI4Y,function(_n4,n){n4=_n4;divmod(n,365,function(_n1,n){n1=_n1;n0=n;});});});});n=n0;var year=n400*400+1+n100*100+n4*4+n1;if(n1==4||n100==100){assert(n0===0);return{year:year-1,month:12,day:31};}
var leapyear=n1===3&&(n4!==24||n100==3);assert(leapyear==is_leap(year));var month=(n+50)>>5;var preceding=DAYS_BEFORE_MONTH[month]+((month>2&&leapyear)?1:0);if(preceding>n){--month;preceding-=DAYS_IN_MONTH[month]+((month===2&&leapyear)?1:0);}
n-=preceding;return{year:year,month:month,day:n+1};}
function tmxxx(year,month,day,hour,minute,second,microsecond){hour=hour||0;minute=minute||0;second=second||0;microsecond=microsecond||0;if(microsecond<0||microsecond>999999){divmod(microsecond,1000000,function(carry,ms){microsecond=ms;second+=carry;});}
if(second<0||second>59){divmod(second,60,function(carry,s){second=s;minute+=carry;});}
if(minute<0||minute>59){divmod(minute,60,function(carry,m){minute=m;hour+=carry;});}
if(hour<0||hour>23){divmod(hour,24,function(carry,h){hour=h;day+=carry;});}
if(month<1||month>12){divmod(month-1,12,function(carry,m){month=m+1;year+=carry;});}
var dim=days_in_month(year,month);if(day<1||day>dim){if(day===0){--month;if(month>0){day=days_in_month(year,month);}else{--year;month=12;day=31;}}else if(day==dim+1){++month;day=1;if(month>12){month=1;++year;}}else{var r=ord2ymd(ymd2ord(year,month,1)+(day-1));year=r.year;month=r.month;day=r.day;}}
return{year:year,month:month,day:day,hour:hour,minute:minute,second:second,microsecond:microsecond};}
datetime.timedelta=py.type('timedelta',null,{__init__:function(){var args=py.PY_parseArgs(arguments,[['days',zero],['seconds',zero],['microseconds',zero],['milliseconds',zero],['minutes',zero],['hours',zero],['weeks',zero]]);var d=0,s=0,m=0;var days=args.days.toJSON()+args.weeks.toJSON()*7;var seconds=args.seconds.toJSON()
+args.minutes.toJSON()*60
+args.hours.toJSON()*3600;var microseconds=args.microseconds.toJSON()
+args.milliseconds.toJSON()*1000;var daysecondsfrac=modf(days,function(dayfrac,days){d=days;if(dayfrac){return modf(dayfrac*24*3600,function(dsf,dsw){s=dsw;return dsf;});}
return 0;});var secondsfrac=modf(seconds,function(sf,s){seconds=s;return sf+daysecondsfrac;});divmod(seconds,24*3600,function(days,seconds){d+=days;s+=seconds;});microseconds+=secondsfrac*1e6;divmod(microseconds,1000000,function(seconds,microseconds){divmod(seconds,24*3600,function(days,seconds){d+=days;s+=seconds;m+=Math.round(microseconds);});});this.days=d;this.seconds=s;this.microseconds=m;},__str__:function(){var hh,mm,ss;divmod(this.seconds,60,function(m,s){divmod(m,60,function(h,m){hh=h;mm=m;ss=s;});});var s=_.str.sprintf("%d:%02d:%02d",hh,mm,ss);if(this.days){s=_.str.sprintf("%d day%s, %s",this.days,(this.days!=1&&this.days!=-1)?'s':'',s);}
if(this.microseconds){s=_.str.sprintf("%s.%06d",s,this.microseconds);}
return py.str.fromJSON(s);},__eq__:function(other){if(!py.PY_isInstance(other,datetime.timedelta)){return py.False;}
return(this.days===other.days&&this.seconds===other.seconds&&this.microseconds===other.microseconds)?py.True:py.False;},__add__:function(other){if(!py.PY_isInstance(other,datetime.timedelta)){return py.NotImplemented;}
return py.PY_call(datetime.timedelta,[py.float.fromJSON(this.days+other.days),py.float.fromJSON(this.seconds+other.seconds),py.float.fromJSON(this.microseconds+other.microseconds)]);},__radd__:function(other){return this.__add__(other);},__sub__:function(other){if(!py.PY_isInstance(other,datetime.timedelta)){return py.NotImplemented;}
return py.PY_call(datetime.timedelta,[py.float.fromJSON(this.days-other.days),py.float.fromJSON(this.seconds-other.seconds),py.float.fromJSON(this.microseconds-other.microseconds)]);},__rsub__:function(other){if(!py.PY_isInstance(other,datetime.timedelta)){return py.NotImplemented;}
return this.__neg__().__add__(other);},__neg__:function(){return py.PY_call(datetime.timedelta,[py.float.fromJSON(-this.days),py.float.fromJSON(-this.seconds),py.float.fromJSON(-this.microseconds)]);},__pos__:function(){return this;},__mul__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
var n=other.toJSON();return py.PY_call(datetime.timedelta,[py.float.fromJSON(this.days*n),py.float.fromJSON(this.seconds*n),py.float.fromJSON(this.microseconds*n)]);},__rmul__:function(other){return this.__mul__(other);},__div__:function(other){if(!py.PY_isInstance(other,py.float)){return py.NotImplemented;}
var usec=((this.days*24*3600)+this.seconds)*1000000
+this.microseconds;return py.PY_call(datetime.timedelta,[zero,zero,py.float.fromJSON(usec/other.toJSON())]);},__floordiv__:function(other){return this.__div__(other);},total_seconds:function(){return py.float.fromJSON(this.days*86400
+this.seconds
+this.microseconds/1000000);},__nonzero__:function(){return(!!this.days||!!this.seconds||!!this.microseconds)?py.True:py.False;}});datetime.datetime=py.type('datetime',null,{__init__:function(){var zero=py.float.fromJSON(0);var args=py.PY_parseArgs(arguments,['year','month','day',['hour',zero],['minute',zero],['second',zero],['microsecond',zero],['tzinfo',py.None]]);for(var key in args){if(!args.hasOwnProperty(key)){continue;}
this[key]=asJS(args[key]);}},__eq__:function(other){return(this.year===other.year&&this.month===other.month&&this.day===other.day&&this.hour===other.hour&&this.minute===other.minute&&this.second===other.second&&this.microsecond===other.microsecond&&this.tzinfo===other.tzinfo)?py.True:py.False;},replace:function(){var args=py.PY_parseArgs(arguments,[['year',py.None],['month',py.None],['day',py.None],['hour',py.None],['minute',py.None],['second',py.None],['microsecond',py.None]]);var params={};for(var key in args){if(!args.hasOwnProperty(key)){continue;}
var arg=args[key];params[key]=(arg===py.None?this[key]:asJS(arg));}
return py.PY_call(datetime.datetime,params);},start_of:function(){var args=py.PY_parseArgs(arguments,'granularity');var granularity=args.granularity.toJSON();if(granularity==='year'){return py.PY_call(datetime.datetime,[this.year,1,1]);}else if(granularity==='quarter'){var quarter=get_quarter(this.year,this.month)[0];return py.PY_call(datetime.datetime,[quarter.year,quarter.month,quarter.day]);}else if(granularity==='month'){return py.PY_call(datetime.datetime,[this.year,this.month,1]);}else if(granularity==='week'){var dow=get_day_of_week(this.year,this.month,this.day);return py.PY_call(datetime.datetime,[this.year,this.month,this.day-dow]);}else if(granularity==='day'){return py.PY_call(datetime.datetime,[this.year,this.month,this.day]);}else if(granularity==='hour'){return py.PY_call(datetime.datetime,[this.year,this.month,this.day,this.hour]);}else{throw new Error('ValueError: '+granularity+' is not a supported granularity, supported '+' granularities are: year, quarter, month, week, day and hour.')}},end_of:function(){var args=py.PY_parseArgs(arguments,'granularity');var granularity=args.granularity.toJSON();var min=[23,59,59];if(granularity==='year'){return py.PY_call(datetime.datetime,[this.year,12,31].concat(min));}else if(granularity==='quarter'){var quarter=get_quarter(this.year,this.month)[1];return py.PY_call(datetime.datetime,[quarter.year,quarter.month,quarter.day].concat(min));}else if(granularity==='month'){var dom=days_in_month(this.year,this.month);return py.PY_call(datetime.datetime,[this.year,this.month,dom].concat(min));}else if(granularity==='week'){var dow=get_day_of_week(this.year,this.month,this.day);return py.PY_call(datetime.datetime,[this.year,this.month,this.day+(6-dow)].concat(min));}else if(granularity==='day'){return py.PY_call(datetime.datetime,[this.year,this.month,this.day].concat(min));}else if(granularity==='hour'){return py.PY_call(datetime.datetime,[this.year,this.month,this.day,this.hour,59,59]);}else{throw new Error('ValueError: '+granularity+' is not a supported granularity, supported '+' granularities are: year, quarter, month, week, day and hour.')}},add:function(){var args=py.PY_parseArgs(arguments,[['years',py.None],['months',py.None],['days',py.None],['hours',py.None],['minutes',py.None],['seconds',py.None],]);return py.PY_add(this,py.PY_call(relativedelta,{'years':args.years,'months':args.months,'days':args.days,'hours':args.hours,'minutes':args.minutes,'seconds':args.seconds,}));},subtract:function(){var args=py.PY_parseArgs(arguments,[['years',py.None],['months',py.None],['days',py.None],['hours',py.None],['minutes',py.None],['seconds',py.None],]);var params={};for(var key in args){params[key]=(args[key]===py.None?args[key]:py.float.fromJSON(-asJS(args[key])));}
return py.PY_add(this,py.PY_call(relativedelta,params));},strftime:function(){var self=this;var args=py.PY_parseArgs(arguments,'format');return py.str.fromJSON(args.format.toJSON().replace(/%([A-Za-z])/g,function(m,c){switch(c){case'Y':return _.str.sprintf('%04d',self.year);case'm':return _.str.sprintf('%02d',self.month);case'd':return _.str.sprintf('%02d',self.day);case'H':return _.str.sprintf('%02d',self.hour);case'M':return _.str.sprintf('%02d',self.minute);case'S':return _.str.sprintf('%02d',self.second);}
throw new Error('ValueError: No known conversion for '+m);}));},to_utc:function(){var d=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);var offset=d.getTimezoneOffset();var kwargs={minutes:py.float.fromJSON(offset)};var timedelta=py.PY_call(py.extras.datetime.timedelta,[],kwargs);var s=tmxxx(this.year,this.month,this.day+timedelta.days,this.hour,this.minute,this.second+timedelta.seconds);return datetime.datetime.fromJSON(s.year,s.month,s.day,s.hour,s.minute,s.second);},now:py.classmethod.fromJSON(function(){var d=new Date();return py.PY_call(datetime.datetime,[d.getFullYear(),d.getMonth()+1,d.getDate(),d.getHours(),d.getMinutes(),d.getSeconds(),d.getMilliseconds()*1000]);}),today:py.classmethod.fromJSON(function(){var dt_class=py.PY_getAttr(datetime,'datetime');return py.PY_call(py.PY_getAttr(dt_class,'now'));}),utcnow:py.classmethod.fromJSON(function(){var d=new Date();return py.PY_call(datetime.datetime,[d.getUTCFullYear(),d.getUTCMonth()+1,d.getUTCDate(),d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()*1000]);}),combine:py.classmethod.fromJSON(function(){var args=py.PY_parseArgs(arguments,'date time');return py.PY_call(datetime.datetime,[py.PY_getAttr(args.date,'year'),py.PY_getAttr(args.date,'month'),py.PY_getAttr(args.date,'day'),py.PY_getAttr(args.time,'hour'),py.PY_getAttr(args.time,'minute'),py.PY_getAttr(args.time,'second')]);}),toJSON:function(){return new Date(this.year,this.month-1,this.day,this.hour,this.minute,this.second,this.microsecond/1000);},__add__:function(other){if(!py.PY_isInstance(other,datetime.timedelta)){return py.NotImplemented;}
var s=tmxxx(this.year,this.month,this.day+other.days,this.hour,this.minute,this.second+other.seconds);return datetime.datetime.fromJSON(s.year,s.month,s.day,s.hour,s.minute,s.second);},__sub__:function(other){if(py.PY_isInstance(other,datetime.timedelta)){return py.PY_add(this,py.PY_negative(other));}
return py.NotImplemented;},fromJSON:function(year,month,day,hour,minute,second){return py.PY_call(datetime.datetime,[year,month,day,hour,minute,second]);},});datetime.date=py.type('date',null,{__init__:function(){var args=py.PY_parseArgs(arguments,'year month day');this.year=asJS(args.year);this.month=asJS(args.month);this.day=asJS(args.day);},strftime:function(){var self=this;var args=py.PY_parseArgs(arguments,'format');return py.str.fromJSON(args.format.toJSON().replace(/%([A-Za-z])/g,function(m,c){switch(c){case'Y':return self.year;case'm':return _.str.sprintf('%02d',self.month);case'd':return _.str.sprintf('%02d',self.day);}
throw new Error('ValueError: No known conversion for '+m);}));},__eq__:function(other){return(this.year===other.year&&this.month===other.month&&this.day===other.day)?py.True:py.False;},replace:function(){var args=py.PY_parseArgs(arguments,[['year',py.None],['month',py.None],['day',py.None]]);var params={};for(var key in args){if(!args.hasOwnProperty(key)){continue;}
var arg=args[key];params[key]=(arg===py.None?this[key]:asJS(arg));}
return py.PY_call(datetime.date,params);},start_of:function(){var args=py.PY_parseArgs(arguments,'granularity');var granularity=args.granularity.toJSON();if(granularity==='year'){return py.PY_call(datetime.date,[this.year,1,1]);}else if(granularity==='quarter'){var quarter=get_quarter(this.year,this.month)[0];return py.PY_call(datetime.date,[quarter.year,quarter.month,quarter.day]);}else if(granularity==='month'){return py.PY_call(datetime.date,[this.year,this.month,1]);}else if(granularity==='week'){var dow=get_day_of_week(this.year,this.month,this.day);return py.PY_call(datetime.date,[this.year,this.month,this.day-dow]);}else if(granularity==='day'){return py.PY_call(datetime.date,[this.year,this.month,this.day]);}else{throw new Error('ValueError: '+granularity+' is not a supported granularity, supported '+' granularities are: year, quarter, month, week and day.')}},end_of:function(){var args=py.PY_parseArgs(arguments,'granularity');var granularity=args.granularity.toJSON();if(granularity==='year'){return py.PY_call(datetime.date,[this.year,12,31]);}else if(granularity==='quarter'){var quarter=get_quarter(this.year,this.month)[1];return py.PY_call(datetime.date,[quarter.year,quarter.month,quarter.day]);}else if(granularity==='month'){var dom=days_in_month(this.year,this.month);return py.PY_call(datetime.date,[this.year,this.month,dom]);}else if(granularity==='week'){var dow=get_day_of_week(this.year,this.month,this.day);return py.PY_call(datetime.date,[this.year,this.month,this.day+(6-dow)]);}else if(granularity==='day'){return py.PY_call(datetime.date,[this.year,this.month,this.day]);}else{throw new Error('ValueError: '+granularity+' is not a supported granularity, supported '+' granularities are: year, quarter, month, week and day.')}},add:function(){var args=py.PY_parseArgs(arguments,[['years',py.None],['months',py.None],['days',py.None],]);return py.PY_add(this,py.PY_call(relativedelta,{'years':args.years,'months':args.months,'days':args.days,}));},subtract:function(){var args=py.PY_parseArgs(arguments,[['years',py.None],['months',py.None],['days',py.None],]);var params={};for(var key in args){params[key]=(args[key]===py.None?args[key]:py.float.fromJSON(-asJS(args[key])));}
return py.PY_add(this,py.PY_call(relativedelta,params));},__add__:function(other){if(!py.PY_isInstance(other,datetime.timedelta)){return py.NotImplemented;}
var s=tmxxx(this.year,this.month,this.day+other.days);return datetime.date.fromJSON(s.year,s.month,s.day);},__radd__:function(other){return this.__add__(other);},__sub__:function(other){if(py.PY_isInstance(other,datetime.timedelta)){return py.PY_add(this,py.PY_negative(other));}
if(py.PY_isInstance(other,datetime.date)){return py.PY_call(datetime.timedelta,[py.PY_subtract(py.PY_call(py.PY_getAttr(this,'toordinal')),py.PY_call(py.PY_getAttr(other,'toordinal')))]);}
return py.NotImplemented;},toordinal:function(){return py.float.fromJSON(ymd2ord(this.year,this.month,this.day));},weekday:function(){return py.float.fromJSON((this.toordinal().toJSON()+6)%7);},fromJSON:function(year,month,day){return py.PY_call(datetime.date,[year,month,day]);},today:py.classmethod.fromJSON(function(){var d=new Date();return py.PY_call(datetime.date,[d.getFullYear(),d.getMonth()+1,d.getDate()]);}),});datetime.time=py.type('time',null,{__init__:function(){var zero=py.float.fromJSON(0);var args=py.PY_parseArgs(arguments,[['hour',zero],['minute',zero],['second',zero],['microsecond',zero],['tzinfo',py.None]]);for(var k in args){if(!args.hasOwnProperty(k)){continue;}
this[k]=asJS(args[k]);}}});var time=py.PY_call(py.object);time.strftime=py.PY_def.fromJSON(function(){var args=py.PY_parseArgs(arguments,'format');var dt_class=py.PY_getAttr(datetime,'datetime');var d=py.PY_call(py.PY_getAttr(dt_class,'utcnow'));return py.PY_call(py.PY_getAttr(d,'strftime'),[args.format]);});var args=_.map(('year month day hour minute second '
+'years months weeks days hours minutes seconds '
+'weekday leapdays yearday nlyearday').split(' '),function(arg){switch(arg){case'years':case'months':case'days':case'leapdays':case'weeks':case'hours':case'minutes':case'seconds':return[arg,zero];case'year':case'month':case'day':case'weekday':case'hour':case'minute':case'second':case'yearday':case'nlyearday':return[arg,null];default:throw new Error("Unknown relativedelta argument "+arg);}});args.unshift('*');var _utils={monthrange:function(year,month){if(month<1||month>12){throw new Error("Illegal month "+month);}
var day1=this.weekday(year,month,1);var ndays=this.mdays[month]+(month==this.February&&this.isleap(year));return[day1,ndays];},weekday:function(year,month,day){var date=py.PY_call(datetime.date,[year,month,day]);return py.PY_call(py.PY_getAttr(date,'weekday'));},isleap:function(year){return year%4===0&&(year%100!==0||year%400===0);},mdays:[0,31,28,31,30,31,30,31,31,30,31,30,31],January:1,February:2};var relativedelta=py.type('relativedelta',null,{__init__:function(){this.ops=py.PY_parseArgs(arguments,args);this.ops.days=py.float.fromJSON(asJS(this.ops.days)+asJS(this.ops.weeks)*7);var yday=zero;if(this.ops.nlyearday){yday=this.ops.nlyearday;}else if(this.ops.yearday){yday=this.ops.yearday;if(asJS(this.ops.yearday)>59){this.ops.leapdays=py.float.fromJS(-1);}}
if(py.PY_isTrue(yday)){var ydayidx=[31,59,90,120,151,181,212,243,273,304,334,366];for(var idx=0;idx<ydayidx.length;++idx){var ydays=ydayidx[idx];if(asJS(yday)<=ydays){this.ops.month=py.float.fromJSON(idx+1);if(!idx){this.ops.day=yday;}else{this.ops.day=py.PY_subtract(yday,py.float.fromJSON(ydayidx[idx-1]));}
break;}}
if(idx===ydayidx.length){throw new Error("Invalid year day ("+asJS(yday)+")");}}
this._fix();},_fix:function(){var self=this;var months=asJS(this.ops.months);if(Math.abs(months)>11){var s=months>0?1:-1;divmod(months*s,12,function(years,months){self.ops.months=py.float.fromJSON(months*s);self.ops.years=py.float.fromJSON(asJS(self.ops.years)+years*s);});}
this._has_time=0;},__add__:function(other){if(!(py.PY_isInstance(other,datetime.date)||py.PY_isInstance(other,datetime.datetime))){return py.NotImplemented;}
var year=(asJS(this.ops.year)||asJS(other.year))+asJS(this.ops.years);var month=asJS(this.ops.month)||asJS(other.month);var months;if(months=asJS(this.ops.months)){if(Math.abs(months)<1||Math.abs(months)>12){throw new Error("Can only use relative months between -12 and +12");}
month+=months;if(month>12){year+=1;month-=12;}
if(month<1){year-=1;month+=12;}}
var day=Math.min(_utils.monthrange(year,month)[1],asJS(this.ops.day)||asJS(other.day));var repl={year:py.float.fromJSON(year),month:py.float.fromJSON(month),day:py.float.fromJSON(day)};if(py.PY_isInstance(other,datetime.datetime)){repl.hour=py.float.fromJSON(asJS(this.ops.hour)||asJS(other.hour));repl.minute=py.float.fromJSON(asJS(this.ops.minute)||asJS(other.minute));repl.second=py.float.fromJSON(asJS(this.ops.second)||asJS(other.second));}
var days=asJS(this.ops.days);if(py.PY_isTrue(this.ops.leapdays)&&month>2&&_utils.isleap(year)){days+=asJS(this.ops.leapdays);}
var ret=py.PY_add(py.PY_call(py.PY_getAttr(other,'replace'),repl),py.PY_call(datetime.timedelta,{days:py.float.fromJSON(days),hours:py.float.fromJSON(asJS(this.ops.hours)),minutes:py.float.fromJSON(asJS(this.ops.minutes)),seconds:py.float.fromJSON(asJS(this.ops.seconds))}));if(this.ops.weekday){var weekday=asJS(this.ops.weekday),nth=1;var jumpdays=(Math.abs(nth)-1)*7;var ret_weekday=asJS(py.PY_call(py.PY_getAttr(ret,'weekday')));if(nth>0){jumpdays+=(7-ret_weekday+weekday)%7;}else{jumpdays+=(ret_weekday-weekday)%7;jumpdays*=-1;}
ret=py.PY_add(ret,py.PY_call(datetime.timedelta,{days:py.float.fromJSON(jumpdays)}));}
return ret;},__radd__:function(other){return this.__add__(other);},__rsub__:function(other){return this.__neg__().__radd__(other);},__neg__:function(){return py.PY_call(relativedelta,{years:py.PY_negative(this.ops.years),months:py.PY_negative(this.ops.months),days:py.PY_negative(this.ops.days),leapdays:this.ops.leapdays,hours:py.PY_negative(this.ops.hours),minutes:py.PY_negative(this.ops.minutes),seconds:py.PY_negative(this.ops.seconds),year:this.ops.year,month:this.ops.month,day:this.ops.day,weekday:this.ops.weekday,hour:this.ops.hour,minute:this.ops.minute,second:this.ops.second});}});py.extras={datetime:datetime,time:time,relativedelta:relativedelta,};})(typeof exports==='undefined'?py:exports);;

/* /web/static/lib/jquery.ba-bbq/jquery.ba-bbq.js defined in bundle 'web.assets_backend' */
(function($,window){'$:nomunge';var undefined,aps=Array.prototype.slice,decode=decodeURIComponent,jq_param=$.param,jq_param_sorted,jq_param_fragment,jq_deparam,jq_deparam_fragment,jq_bbq=$.bbq=$.bbq||{},jq_bbq_pushState,jq_bbq_getState,jq_elemUrlAttr,special=$.event.special,str_hashchange='hashchange',str_querystring='querystring',str_fragment='fragment',str_elemUrlAttr='elemUrlAttr',str_href='href',str_src='src',re_params_querystring=/^.*\?|#.*$/g,re_params_fragment,re_fragment,re_no_escape,ajax_crawlable,fragment_prefix,elemUrlAttr_cache={};function is_string(arg){return typeof arg==='string';};function curry(func){var args=aps.call(arguments,1);return function(){return func.apply(this,args.concat(aps.call(arguments)));};};function get_fragment(url){return url.replace(re_fragment,'$2');};function get_querystring(url){return url.replace(/(?:^[^?#]*\?([^#]*).*$)?.*/,'$1');};function jq_param_sub(is_fragment,get_func,url,params,merge_mode){var result,qs,matches,url_params,hash;if(params!==undefined){matches=url.match(is_fragment?re_fragment:/^([^#?]*)\??([^#]*)(#?.*)/);hash=matches[3]||'';if(merge_mode===2&&is_string(params)){qs=params.replace(is_fragment?re_params_fragment:re_params_querystring,'');}else{url_params=jq_deparam(matches[2]);params=is_string(params)?jq_deparam[is_fragment?str_fragment:str_querystring](params):params;qs=merge_mode===2?params:merge_mode===1?$.extend({},params,url_params):$.extend({},url_params,params);qs=jq_param_sorted(qs);if(is_fragment){qs=qs.replace(re_no_escape,decode);}}
result=matches[1]+(is_fragment?fragment_prefix:qs||!matches[1]?'?':'')+qs+hash;}else{result=get_func(url!==undefined?url:location.href);}
return result;};jq_param[str_querystring]=curry(jq_param_sub,0,get_querystring);jq_param[str_fragment]=jq_param_fragment=curry(jq_param_sub,1,get_fragment);jq_param.sorted=jq_param_sorted=function(a,traditional){var arr=[],obj={};$.each(jq_param(a,traditional).split('&'),function(i,v){var key=v.replace(/(?:%5B|=).*$/,''),key_obj=obj[key];if(!key_obj){key_obj=obj[key]=[];arr.push(key);}
key_obj.push(v);});return $.map(arr.sort(),function(v){return obj[v];}).join('&');};jq_param_fragment.noEscape=function(chars){chars=chars||'';var arr=$.map(chars.split(''),encodeURIComponent);re_no_escape=new RegExp(arr.join('|'),'g');};jq_param_fragment.noEscape(',/');jq_param_fragment.ajaxCrawlable=function(state){if(state!==undefined){if(state){re_params_fragment=/^.*(?:#!|#)/;re_fragment=/^([^#]*)(?:#!|#)?(.*)$/;fragment_prefix='#!';}else{re_params_fragment=/^.*#/;re_fragment=/^([^#]*)#?(.*)$/;fragment_prefix='#';}
ajax_crawlable=!!state;}
return ajax_crawlable;};jq_param_fragment.ajaxCrawlable(0);$.deparam=jq_deparam=function(params,coerce){var obj={},coerce_types={'true':!0,'false':!1,'null':null};$.each(params.replace(/\+/g,' ').split('&'),function(j,v){var param=v.split('='),key=decode(param[0]),val,cur=obj,i=0,keys=key.split(']['),keys_last=keys.length-1;if(/\[/.test(keys[0])&&/\]$/.test(keys[keys_last])){keys[keys_last]=keys[keys_last].replace(/\]$/,'');keys=keys.shift().split('[').concat(keys);keys_last=keys.length-1;}else{keys_last=0;}
if(param.length===2){val=decode(param[1]);if(coerce){val=val&&!isNaN(val)?+val:val==='undefined'?undefined:coerce_types[val]!==undefined?coerce_types[val]:val;}
if(keys_last){for(;i<=keys_last;i++){key=keys[i]===''?cur.length:keys[i];cur=cur[key]=i<keys_last?cur[key]||(keys[i+1]&&isNaN(keys[i+1])?{}:[]):val;}}else{if($.isArray(obj[key])){obj[key].push(val);}else if(obj[key]!==undefined){obj[key]=[obj[key],val];}else{obj[key]=val;}}}else if(key){obj[key]=coerce?undefined:'';}});return obj;};function jq_deparam_sub(is_fragment,url_or_params,coerce){if(url_or_params===undefined||typeof url_or_params==='boolean'){coerce=url_or_params;url_or_params=jq_param[is_fragment?str_fragment:str_querystring]();}else{url_or_params=is_string(url_or_params)?url_or_params.replace(is_fragment?re_params_fragment:re_params_querystring,''):url_or_params;}
return jq_deparam(url_or_params,coerce);};jq_deparam[str_querystring]=curry(jq_deparam_sub,0);jq_deparam[str_fragment]=jq_deparam_fragment=curry(jq_deparam_sub,1);$[str_elemUrlAttr]||($[str_elemUrlAttr]=function(obj){return $.extend(elemUrlAttr_cache,obj);})({a:str_href,base:str_href,iframe:str_src,img:str_src,input:str_src,form:'action',link:str_href,script:str_src});jq_elemUrlAttr=$[str_elemUrlAttr];function jq_fn_sub(mode,force_attr,params,merge_mode){if(!is_string(params)&&typeof params!=='object'){merge_mode=params;params=force_attr;force_attr=undefined;}
return this.each(function(){var that=$(this),attr=force_attr||jq_elemUrlAttr()[(this.nodeName||'').toLowerCase()]||'',url=attr&&that.attr(attr)||'';that.attr(attr,jq_param[mode](url,params,merge_mode));});};$.fn[str_querystring]=curry(jq_fn_sub,str_querystring);$.fn[str_fragment]=curry(jq_fn_sub,str_fragment);jq_bbq.pushState=jq_bbq_pushState=function(params,merge_mode){if(is_string(params)&&/^#/.test(params)&&merge_mode===undefined){merge_mode=2;}
var has_args=params!==undefined,url=jq_param_fragment(location.href,has_args?params:{},has_args?merge_mode:2);location.href=url;};jq_bbq.getState=jq_bbq_getState=function(key,coerce){return key===undefined||typeof key==='boolean'?jq_deparam_fragment(key):jq_deparam_fragment(coerce)[key];};jq_bbq.removeState=function(arr){var state={};if(arr!==undefined){state=jq_bbq_getState();$.each($.isArray(arr)?arr:arguments,function(i,v){delete state[v];});}
jq_bbq_pushState(state,2);};special[str_hashchange]=$.extend(special[str_hashchange],{add:function(handleObj){var old_handler;function new_handler(e){var hash=e[str_fragment]=jq_param_fragment();e.getState=function(key,coerce){return key===undefined||typeof key==='boolean'?jq_deparam(hash,key):jq_deparam(hash,coerce)[key];};old_handler.apply(this,arguments);};if($.isFunction(handleObj)){old_handler=handleObj;return new_handler;}else{old_handler=handleObj.handler;handleObj.handler=new_handler;}}});})(jQuery,this);(function($,window,undefined){'$:nomunge';var str_hashchange='hashchange',doc=document,fake_onhashchange,special=$.event.special,doc_mode=doc.documentMode,supports_onhashchange='on'+str_hashchange in window&&(doc_mode===undefined||doc_mode>7);function get_fragment(url){url=url||location.href;return'#'+url.replace(/^[^#]*#?(.*)$/,'$1');};$.fn[str_hashchange]=function(fn){return fn?this.bind(str_hashchange,fn):this.trigger(str_hashchange);};$.fn[str_hashchange].delay=50;special[str_hashchange]=$.extend(special[str_hashchange],{setup:function(){if(supports_onhashchange){return false;}
$(fake_onhashchange.start);},teardown:function(){if(supports_onhashchange){return false;}
$(fake_onhashchange.stop);}});fake_onhashchange=(function(){var self={},timeout_id,last_hash=get_fragment(),fn_retval=function(val){return val;},history_set=fn_retval,history_get=fn_retval;self.start=function(){timeout_id||poll();};self.stop=function(){timeout_id&&clearTimeout(timeout_id);timeout_id=undefined;};function poll(){var hash=get_fragment(),history_hash=history_get(last_hash);if(hash!==last_hash){history_set(last_hash=hash,history_hash);$(window).trigger(str_hashchange);}else if(history_hash!==last_hash){location.href=location.href.replace(/#.*/,'')+history_hash;}
timeout_id=setTimeout(poll,$.fn[str_hashchange].delay);};$.browser.msie&&!supports_onhashchange&&(function(){var iframe,iframe_src;self.start=function(){if(!iframe){iframe_src=$.fn[str_hashchange].src;iframe_src=iframe_src&&iframe_src+get_fragment();iframe=$('<iframe tabindex="-1" title="empty"/>').hide().one('load',function(){iframe_src||history_set(get_fragment());poll();}).attr('src',iframe_src||'javascript:0').insertAfter('body')[0].contentWindow;doc.onpropertychange=function(){try{if(event.propertyName==='title'){iframe.document.title=doc.title;}}catch(e){}};}};self.stop=fn_retval;history_get=function(){return get_fragment(iframe.location.href);};history_set=function(hash,history_hash){var iframe_doc=iframe.document,domain=$.fn[str_hashchange].domain;if(hash!==history_hash){iframe_doc.title=doc.title;iframe_doc.open();domain&&iframe_doc.write('<script>document.domain="'+domain+'"</script>');iframe_doc.close();iframe.location.hash=hash;}};})();return self;})();})(jQuery,this);;

/* /web/static/src/js/core/domain.js defined in bundle 'web.assets_backend' */
odoo.define("web.Domain",function(require){"use strict";var collections=require("web.collections");var pyUtils=require("web.py_utils");var py=window.py;var Domain=collections.Tree.extend({init:function(domain,evalContext){this._super.apply(this,arguments);if(_.isArray(domain)||_.isString(domain)){this._parse(this.normalizeArray(_.clone(this.stringToArray(domain,evalContext))));}else{this._data=!!domain;}},compute:function(values){if(this._data===true||this._data===false){return this._data;}else if(_.isArray(this._data)){var isParentField=false;var fieldName=this._data[0];var parentField=this._data[0].split('.');if('parent'in values&&parentField.length===2){fieldName=parentField[1];isParentField=parentField[0]==='parent'&&fieldName in values.parent;}
if(!(this._data[0]in values)&&!(isParentField)){throw new Error(_.str.sprintf("Unknown field %s in domain",this._data[0]));}
var fieldValue;if(!isParentField){fieldValue=values[fieldName];}else{fieldValue=values.parent[fieldName];}
switch(this._data[1]){case"=":case"==":return _.isEqual(fieldValue,this._data[2]);case"!=":case"<>":return!_.isEqual(fieldValue,this._data[2]);case"<":return(fieldValue<this._data[2]);case">":return(fieldValue>this._data[2]);case"<=":return(fieldValue<=this._data[2]);case">=":return(fieldValue>=this._data[2]);case"in":return _.contains(_.isArray(this._data[2])?this._data[2]:[this._data[2]],fieldValue);case"not in":return!_.contains(_.isArray(this._data[2])?this._data[2]:[this._data[2]],fieldValue);case"like":return(fieldValue.toLowerCase().indexOf(this._data[2].toLowerCase())>=0);case"=like":var regExp=new RegExp(this._data[2].toLowerCase().replace(/([.\[\]\{\}\+\*])/g,'\\\$1').replace(/%/g,'.*'));return regExp.test(fieldValue.toLowerCase());case"ilike":return(fieldValue.indexOf(this._data[2])>=0);case"=ilike":return new RegExp(this._data[2].replace(/%/g,'.*'),'i').test(fieldValue);default:throw new Error(_.str.sprintf("Domain %s uses an unsupported operator",this._data));}}else{switch(this._data){case"&":return _.every(this._children,function(child){return child.compute(values);});case"|":return _.some(this._children,function(child){return child.compute(values);});case"!":return!this._children[0].compute(values);}}},toArray:function(){if(this._data===false){throw new Error("'false' domain cannot be converted to array");}else if(this._data===true){return[];}else{var arr=[this._data];return arr.concat.apply(arr,_.map(this._children,function(child){return child.toArray();}));}},toString:function(){return Domain.prototype.arrayToString(this.toArray());},_parse:function(domain){this._data=(domain.length===0?true:domain[0]);if(domain.length<=1)return;var expected=1;for(var i=1;i<domain.length;i++){if(domain[i]==="&"||domain[i]==="|"){expected++;}else if(domain[i]!=="!"){expected--;}
if(!expected){i++;this._addSubdomain(domain.slice(1,i));this._addSubdomain(domain.slice(i));break;}}},_addSubdomain:function(domain){if(!domain.length)return;var subdomain=new Domain(domain);if(!subdomain._children.length||subdomain._data!==this._data){this._children.push(subdomain);}else{var self=this;_.each(subdomain._children,function(childDomain){self._children.push(childDomain);});}},arrayToString:function(domain){if(_.isString(domain))return domain;return JSON.stringify(domain||[]).replace(/null/g,"None").replace(/false/g,"False").replace(/true/g,"True");},constructDomain:function(fieldName,period,type,comparisonPeriod){var leftBoundaryParams,rightBoundaryParams;var offsetPeriodParams;function makeInterval(){switch(comparisonPeriod){case'previous_period':_.each(offsetPeriodParams,function(value,key){if(!leftBoundaryParams[key]||_.isNumber(leftBoundaryParams[key])){leftBoundaryParams[key]=value+(leftBoundaryParams[key]||0);}else{leftBoundaryParams[key]=value+' + '+leftBoundaryParams[key];}
if(!rightBoundaryParams[key]||_.isNumber(rightBoundaryParams[key])){rightBoundaryParams[key]=value+(rightBoundaryParams[key]||0);}else{rightBoundaryParams[key]=value+' + '+rightBoundaryParams[key];}});break;case'previous_year':leftBoundaryParams.years=leftBoundaryParams.years?leftBoundaryParams.years-1:-1;rightBoundaryParams.years=rightBoundaryParams.years?rightBoundaryParams.years-1:-1;break;}
var stringifyParams=function(value,key){return key+'='+value;};var leftBoundaryStringifyParams=_.map(leftBoundaryParams,stringifyParams).join(', ');var rightBoundaryStringifyParams=_.map(rightBoundaryParams,stringifyParams).join(', ');if(type==='date'){return"['&',"+"('"+fieldName+"', '>=', (context_today() + relativedelta("+leftBoundaryStringifyParams+")).strftime('%Y-%m-%d')),"+"('"+fieldName+"', '<', (context_today() + relativedelta("+rightBoundaryStringifyParams+")).strftime('%Y-%m-%d'))"+"]";}
else{return"['&',"+"('"+fieldName+"', '>=', "+"(datetime.datetime.combine(context_today() + relativedelta("+leftBoundaryStringifyParams+"), datetime.time(0,0,0)).to_utc()).strftime('%Y-%m-%d %H:%M:%S')),"+"('"+fieldName+"', '<', "+"(datetime.datetime.combine(context_today() + relativedelta("+rightBoundaryStringifyParams+"), datetime.time(0,0,0)).to_utc()).strftime('%Y-%m-%d %H:%M:%S'))"+"]";}}
switch(period){case'today':leftBoundaryParams={};rightBoundaryParams={days:1};offsetPeriodParams={days:-1};return makeInterval();case'this_week':leftBoundaryParams={weeks:-1,days:1,weekday:0};rightBoundaryParams={days:1,weekday:0};offsetPeriodParams={weeks:-1};return makeInterval();case'this_month':leftBoundaryParams={day:1};rightBoundaryParams={day:1,months:1};offsetPeriodParams={months:-1};return makeInterval();case'this_quarter':leftBoundaryParams={months:'- (context_today().month - 1) % 3',day:1};rightBoundaryParams={months:'3 - (context_today().month - 1) % 3',day:1};offsetPeriodParams={months:-3};return makeInterval();case'this_year':leftBoundaryParams={month:1,day:1};rightBoundaryParams={month:1,day:1,years:1};offsetPeriodParams={years:-1};return makeInterval();case'yesterday':leftBoundaryParams={days:-1};rightBoundaryParams={};offsetPeriodParams={days:-1};return makeInterval();case'last_week':leftBoundaryParams={weeks:-2,days:1,weekday:0};rightBoundaryParams={weeks:-1,days:1,weekday:0};offsetPeriodParams={weeks:-1};return makeInterval();case'last_month':leftBoundaryParams={months:-1,day:1};rightBoundaryParams={day:1};offsetPeriodParams={months:-1};return makeInterval();case'last_quarter':leftBoundaryParams={months:'- 3 - (context_today().month - 1) % 3',day:1};rightBoundaryParams={months:'- (context_today().month - 1) % 3',day:1};offsetPeriodParams={months:-3};return makeInterval();case'last_year':leftBoundaryParams={month:1,day:1,years:-1};rightBoundaryParams={month:1,day:1};offsetPeriodParams={years:-1};return makeInterval();case'last_7_days':leftBoundaryParams={days:-7};rightBoundaryParams={};offsetPeriodParams={days:-7};return makeInterval();case'last_30_days':leftBoundaryParams={days:-30};rightBoundaryParams={};offsetPeriodParams={days:-30};return makeInterval();case'last_365_days':leftBoundaryParams={days:-365};rightBoundaryParams={};offsetPeriodParams={days:-365};return makeInterval();case'last_5_years':leftBoundaryParams={years:-5};rightBoundaryParams={};offsetPeriodParams={years:-5};return makeInterval();}},stringToArray:function(domain,evalContext){if(!_.isString(domain))return _.clone(domain);return pyUtils.eval("domain",domain?domain.replace(/%%/g,'%'):"[]",evalContext);},normalizeArray:function(domain){var expected=1;_.each(domain,function(item){if(item==="&"||item==="|"){expected++;}else if(item!=="!"){expected--;}});if(expected<0){domain.unshift.apply(domain,_.times(Math.abs(expected),_.constant("&")));}
return domain;},domainToCondition:function(domain){if(!domain.length){return'True';}
var self=this;function consume(stack){var len=stack.length;if(len<=1){return stack;}else if(stack[len-1]==='|'||stack[len-1]==='&'||stack[len-2]==='|'||stack[len-2]==='&'){return stack;}else if(len==2){stack.splice(-2,2,stack[len-2]+' and '+stack[len-1]);}else if(stack[len-3]=='|'){if(len===3){stack.splice(-3,3,stack[len-2]+' or '+stack[len-1]);}else{stack.splice(-3,3,'('+stack[len-2]+' or '+stack[len-1]+')');}}else{stack.splice(-3,3,stack[len-2]+' and '+stack[len-1]);}
consume(stack);}
var stack=[];_.each(domain,function(dom){if(dom==='|'||dom==='&'){stack.push(dom);}else{var operator=dom[1]==='='?'==':dom[1];if(!operator){throw new Error('Wrong operator for this domain');}
if(operator==='!='&&dom[2]===false){stack.push(dom[0]);}else if(dom[2]===null||dom[2]===true||dom[2]===false){stack.push(dom[0]+' '+(operator==='!='?'is not ':'is ')+(dom[2]===null?'None':(dom[2]?'True':'False')));}else{stack.push(dom[0]+' '+operator+' '+JSON.stringify(dom[2]));}
consume(stack);}});if(stack.length!==1){throw new Error('Wrong domain');}
return stack[0];},conditionToDomain:function(condition){if(!condition||condition.match(/^\s*(True)?\s*$/)){return[];}
var ast=py.parse(py.tokenize(condition));function astToStackValue(node){switch(node.id){case'(name)':return node.value;case'.':return astToStackValue(node.first)+'.'+astToStackValue(node.second);case'(string)':return node.value;case'(number)':return node.value;case'(constant)':return node.value==='None'?null:node.value==='True'?true:false;case'[':return _.map(node.first,function(node){return astToStackValue(node);});}}
function astToStack(node){switch(node.id){case'(name)':return[[astToStackValue(node),'!=',false]];case'.':return[[astToStackValue(node.first)+'.'+astToStackValue(node.second),'!=',false]];case'not':return[[astToStackValue(node.first),'=',false]];case'or':return['|'].concat(astToStack(node.first)).concat(astToStack(node.second));case'and':return['&'].concat(astToStack(node.first)).concat(astToStack(node.second));case'(comparator)':if(node.operators.length!==1){throw new Error('Wrong condition to convert in domain');}
var right=astToStackValue(node.expressions[0]);var left=astToStackValue(node.expressions[1]);var operator=node.operators[0];switch(operator){case'is':operator='=';break;case'is not':operator='!=';break;case'==':operator='=';break;}
return[[right,operator,left]];default:throw"Condition cannot be transformed into domain";}}
return astToStack(ast);},});return Domain;});;

/* /web/static/src/js/core/mvc.js defined in bundle 'web.assets_backend' */
odoo.define('web.mvc',function(require){"use strict";var ajax=require('web.ajax');var Class=require('web.Class');var mixins=require('web.mixins');var ServicesMixin=require('web.ServicesMixin');var Widget=require('web.Widget');var Model=Class.extend(mixins.EventDispatcherMixin,ServicesMixin,{init:function(parent,params){mixins.EventDispatcherMixin.init.call(this);this.setParent(parent);},get:function(){},load:function(){return Promise.resolve();},});var Renderer=Widget.extend({init:function(parent,state,params){this._super(parent);this.state=state;},});var Controller=Widget.extend({init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.model=model;this.renderer=renderer;},start:function(){return Promise.all([this._super.apply(this,arguments),this._startRenderer()]);},_startRenderer:function(){return this.renderer.appendTo(this.$el);},});var Factory=Class.extend({config:{Model:Model,Renderer:Renderer,Controller:Controller,},init:function(){this.rendererParams={};this.controllerParams={};this.modelParams={};this.loadParams={};},getController:function(parent){var self=this;var model=this.getModel(parent);return Promise.all([this._loadData(model),ajax.loadLibs(this)]).then(function(result){var state=result[0];var renderer=self.getRenderer(parent,state);var Controller=self.Controller||self.config.Controller;var controllerParams=_.extend({initialState:state,},self.controllerParams);var controller=new Controller(parent,model,renderer,controllerParams);model.setParent(controller);renderer.setParent(controller);return controller;});},getModel:function(parent){var Model=this.config.Model;return new Model(parent,this.modelParams);},getRenderer:function(parent,state){var Renderer=this.config.Renderer;return new Renderer(parent,state,this.rendererParams);},_loadData:function(model){return model.load(this.loadParams).then(function(){return model.get.apply(model,arguments);});},});return{Factory:Factory,Model:Model,Renderer:Renderer,Controller:Controller,};});;

/* /web/static/src/js/core/py_utils.js defined in bundle 'web.assets_backend' */
odoo.define('web.py_utils',function(require){"use strict";var core=require('web.core');var _t=core._t;var py=window.py;function wrap(value){if(value===null){return py.None;}
switch(typeof value){case'undefined':throw new Error("No conversion for undefined");case'boolean':return py.bool.fromJSON(value);case'number':return py.float.fromJSON(value);case'string':return py.str.fromJSON(value);}
switch(value.constructor){case Object:return wrapping_dict.fromJSON(value);case Array:return wrapping_list.fromJSON(value);}
throw new Error("ValueError: unable to wrap "+value);}
var wrapping_dict=py.type('wrapping_dict',null,{__init__:function(){this._store={};},__getitem__:function(key){var k=key.toJSON();if(!(k in this._store)){throw new Error("KeyError: '"+k+"'");}
return wrap(this._store[k]);},__getattr__:function(key){return this.__getitem__(py.str.fromJSON(key));},__len__:function(){return Object.keys(this._store).length;},__nonzero__:function(){return py.PY_size(this)>0?py.True:py.False;},get:function(){var args=py.PY_parseArgs(arguments,['k',['d',py.None]]);if(!(args.k.toJSON()in this._store)){return args.d;}
return this.__getitem__(args.k);},fromJSON:function(d){var instance=py.PY_call(wrapping_dict);instance._store=d;return instance;},toJSON:function(){return this._store;},});var wrapping_list=py.type('wrapping_list',null,{__init__:function(){this._store=[];},__getitem__:function(index){return wrap(this._store[index.toJSON()]);},__len__:function(){return this._store.length;},__nonzero__:function(){return py.PY_size(this)>0?py.True:py.False;},fromJSON:function(ar){var instance=py.PY_call(wrapping_list);instance._store=ar;return instance;},toJSON:function(){return this._store;},});function wrap_context(context){for(var k in context){if(!context.hasOwnProperty(k)){continue;}
var val=context[k];if(val===null){continue;}
if(val.constructor===Array){context[k]=wrapping_list.fromJSON(val);}else if(val.constructor===Object&&!py.PY_isInstance(val,py.object)){context[k]=wrapping_dict.fromJSON(val);}}
return context;}
function eval_contexts(contexts,evaluation_context){evaluation_context=_.extend(pycontext(),evaluation_context||{});return _(contexts).reduce(function(result_context,ctx){if(_.isEmpty(ctx)){return result_context;}
if(_.isString(ctx)){ctx={__ref:'context',__debug:ctx};}
var evaluated=ctx;switch(ctx.__ref){case'context':evaluation_context.context=evaluation_context;evaluated=py.eval(ctx.__debug,wrap_context(evaluation_context));break;case'compound_context':var eval_context=eval_contexts([ctx.__eval_context]);evaluated=eval_contexts(ctx.__contexts,_.extend({},evaluation_context,eval_context));break;}
_.extend(evaluation_context,evaluated);return _.extend(result_context,evaluated);},{});}
function eval_domains(domains,evaluation_context){evaluation_context=_.extend(pycontext(),evaluation_context||{});var result_domain=[];var need_normalization=(domains&&domains.length>0&&domains[0].length===1&&(domains[0][0]==="|"||domains[0][0]==="!"));_(domains).each(function(domain){if(_.isString(domain)){domain={__ref:'domain',__debug:domain};}
var domain_array_to_combine;switch(domain.__ref){case'domain':evaluation_context.context=evaluation_context;domain_array_to_combine=py.eval(domain.__debug,wrap_context(evaluation_context));break;default:domain_array_to_combine=domain;}
if(need_normalization){domain_array_to_combine=get_normalized_domain(domain_array_to_combine);}
result_domain.push.apply(result_domain,domain_array_to_combine);});return result_domain;}
function get_normalized_domain(domain_array){var expected=1;_.each(domain_array,function(item){if(item==="&"||item==="|"){expected++;}else if(item!=="!"){expected--;}});var new_explicit_ands=_.times(-expected,_.constant("&"));return new_explicit_ands.concat(domain_array);}
function eval_groupbys(contexts,evaluation_context){evaluation_context=_.extend(pycontext(),evaluation_context||{});var result_group=[];_(contexts).each(function(ctx){if(_.isString(ctx)){ctx={__ref:'context',__debug:ctx};}
var group;var evaluated=ctx;switch(ctx.__ref){case'context':evaluation_context.context=evaluation_context;evaluated=py.eval(ctx.__debug,wrap_context(evaluation_context));break;case'compound_context':var eval_context=eval_contexts([ctx.__eval_context]);evaluated=eval_contexts(ctx.__contexts,_.extend({},evaluation_context,eval_context));break;}
group=evaluated.group_by;if(!group){return;}
if(typeof group==='string'){result_group.push(group);}else if(group instanceof Array){result_group.push.apply(result_group,group);}else{throw new Error('Got invalid groupby {{'
+JSON.stringify(group)+'}}');}
_.extend(evaluation_context,evaluated);});return result_group;}
function context_today(){var d=new Date();return py.PY_call(py.extras.datetime.date,[d.getFullYear(),d.getMonth()+1,d.getDate()]);}
function tz_offset(){var offset=new Date().getTimezoneOffset();var kwargs={minutes:py.float.fromJSON(offset)};return py.PY_call(py.extras.datetime.timedelta,[],kwargs);}
function pycontext(){return{datetime:py.extras.datetime,context_today:context_today,time:py.extras.time,relativedelta:py.extras.relativedelta,current_date:py.PY_call(py.extras.time.strftime,[py.str.fromJSON('%Y-%m-%d')]),tz_offset:tz_offset,};}
function pyeval(type,object,context){context=_.extend(pycontext(),context||{});switch(type){case'context':case'contexts':if(type==='context'){object=[object];}
return eval_contexts(object,context);case'domain':case'domains':if(type==='domain')
object=[object];return eval_domains(object,context);case'groupbys':return eval_groupbys(object,context);}
throw new Error("Unknow evaluation type "+type);}
function eval_arg(arg){if(typeof arg!=='object'||!arg.__ref){return arg;}
switch(arg.__ref){case'domain':return pyeval('domains',[arg]);case'context':case'compound_context':return pyeval('contexts',[arg]);default:throw new Error(_t("Unknown nonliteral type ")+' '+arg.__ref);}}
function ensure_evaluated(args,kwargs){for(var i=0;i<args.length;++i){args[i]=eval_arg(args[i]);}
for(var k in kwargs){if(!kwargs.hasOwnProperty(k)){continue;}
kwargs[k]=eval_arg(kwargs[k]);}}
function eval_domains_and_contexts(source){return{context:pyeval('contexts',source.contexts||[],source.eval_context),domain:pyeval('domains',source.domains,source.eval_context),group_by:pyeval('groupbys',source.group_by_seq||[],source.eval_context),};}
function py_eval(expr,context){return py.eval(expr,_.extend({},context||{},{"true":true,"false":false,"null":null}));}
function assembleDomains(domains,operator){var ASTs=domains.map(_getPyJSAST);if(operator==="OR"){operator=py.tokenize("'|'")[0];}else{operator=py.tokenize("'&'")[0];}
var result=_getPyJSAST("[]");var normalizedDomains=ASTs.filter(function(AST){return AST.first.length>0;}).map(_normalizeDomainAST);if(normalizedDomains.length>0){result.first=normalizedDomains.reduce(function(acc,ast){return acc.concat(ast.first);},_.times(normalizedDomains.length-1,_.constant(operator)));}
return _formatAST(result);}
function normalizeDomain(domain){return _formatAST(_normalizeDomainAST(_getPyJSAST(domain)));}
var BINDING_POWERS={or:30,and:40,not:50,};function _formatAST(ast,lbp){lbp=lbp||0;switch(ast.id){case"(number)":return String(ast.value);case"(string)":return JSON.stringify(ast.value.replace(/(\\(['"\\]))/g,"\$2"));case"(constant)":return ast.value;case"(name)":return ast.value;case"[":if(ast.second){return _formatAST(ast.first)+'['+_formatAST(ast.second)+']';}else{var values=ast.first.map(_formatAST);return'['+values.join(', ')+']';}
case"{":var keyValues=ast.first.map(function(kv){return _formatAST(kv[0])+': '+_formatAST(kv[1]);});return'{'+keyValues.join(', ')+'}';case"=":return _formatAST(ast.first)+' '+ast.id+' '+_formatAST(ast.second);case"-":case"+":case"~":case"*":case"**":case"%":case"//":case"and":case"or":if(ast.second){var r=_formatAST(ast.first,ast.lbp)+' '+ast.id+' '+_formatAST(ast.second,ast.lbp);if(ast.lbp<lbp){r='('+r+')';}
return r;}
var actualBP=BINDING_POWERS[ast.id]||130;return ast.id+_formatAST(ast.first,actualBP);case".":return _formatAST(ast.first,ast.lbp)+'.'+_formatAST(ast.second);case"not":return"not "+_formatAST(ast.first);case"(comparator)":var operator=ast.operators[0];return _formatAST(ast.expressions[0])+' '+operator+' '+_formatAST(ast.expressions[1]);case"(":if(ast.second){return _formatAST(ast.first)+'('+ast.second.map(_formatAST).join(', ')+')';}else{return'('+ast.first.map(_formatAST).join(', ')+')';}}
throw new Error("Unimplemented python construct");}
function _getPyJSAST(domain){return py.parse(py.tokenize(domain));}
function _normalizeDomainAST(domain){var expected=1;for(var i=0;i<domain.first.length;i++){var value=domain.first[i].value;if(value==='&'||value==='|'){expected++;}else if(value!=='!'){expected--;}}
var andOperator=py.tokenize("'&'")[0];if(expected<0){domain.first.unshift.apply(domain.first,_.times(Math.abs(expected),_.constant(andOperator)));}
return domain;}
return{context:pycontext,ensure_evaluated:ensure_evaluated,eval:pyeval,eval_domains_and_contexts:eval_domains_and_contexts,py_eval:py_eval,normalizeDomain:normalizeDomain,assembleDomains:assembleDomains,_getPyJSAST:_getPyJSAST,_formatAST:_formatAST,_normalizeDomainAST:_normalizeDomainAST,};});;

/* /web/static/src/js/chrome/abstract_action.js defined in bundle 'web.assets_backend' */
odoo.define('web.AbstractAction',function(require){"use strict";var ActionMixin=require('web.ActionMixin');var ControlPanelView=require('web.ControlPanelView');var Widget=require('web.Widget');var AbstractAction=Widget.extend(ActionMixin,{config:{ControlPanelView:ControlPanelView,},hasControlPanel:false,loadControlPanel:false,withSearchBar:false,searchMenuTypes:[],init:function(parent,action,options){this._super(parent);this._title=action.display_name||action.name;this.controlPanelParams={actionId:action.id,context:action.context,breadcrumbs:options&&options.breadcrumbs||[],title:this.getTitle(),viewId:action.search_view_id&&action.search_view_id[0],withSearchBar:this.withSearchBar,searchMenuTypes:this.searchMenuTypes,};},willStart:function(){var self=this;var proms=[this._super.apply(this,arguments)];if(this.hasControlPanel){var params=this.controlPanelParams;if(this.loadControlPanel){proms.push(this.loadFieldView(params.modelName,params.context||{},params.viewId,'search').then(function(fieldsView){params.viewInfo={arch:fieldsView.arch,fields:fieldsView.fields,};}));}
return Promise.all(proms).then(function(){var controlPanelView=new self.config.ControlPanelView(params);return controlPanelView.getController(self).then(function(controlPanel){self._controlPanel=controlPanel;return self._controlPanel.appendTo(document.createDocumentFragment());});});}
return Promise.all(proms);},start:function(){if(this._controlPanel){this._controlPanel.$el.prependTo(this.$el);}
return this._super.apply(this,arguments);},});return AbstractAction;});;

/* /web/static/src/js/chrome/action_manager.js defined in bundle 'web.assets_backend' */
odoo.define('web.ActionManager',function(require){"use strict";var AbstractAction=require('web.AbstractAction');var concurrency=require('web.concurrency');var Context=require('web.Context');var core=require('web.core');var Dialog=require('web.Dialog');var dom=require('web.dom');var framework=require('web.framework');var pyUtils=require('web.py_utils');var Widget=require('web.Widget');var _t=core._t;var ActionManager=Widget.extend({className:'o_action_manager',custom_events:{breadcrumb_clicked:'_onBreadcrumbClicked',history_back:'_onHistoryBack',push_state:'_onPushState',redirect:'_onRedirect',},init:function(parent,userContext){this._super.apply(this,arguments);this.userContext=userContext||{};this.dp=new concurrency.DropPrevious();this.actions={};this.controllers={};this.controllerStack=[];this.currentDialogController=null;},on_attach_callback:function(){this.isInDOM=true;var currentController=this.getCurrentController();if(currentController){currentController.widget.on_attach_callback();}},on_detach_callback:function(){this.isInDOM=false;var currentController=this.getCurrentController();if(currentController){currentController.widget.on_detach_callback();}},clearUncommittedChanges:function(){var currentController=this.getCurrentController();if(currentController){return currentController.widget.canBeRemoved();}
return Promise.resolve();},doAction:function(action,options){var self=this;options=_.defaults({},options,{additional_context:{},clear_breadcrumbs:false,on_close:function(){},on_reverse_breadcrumb:function(){},pushState:true,replace_last_action:false,});var def;if(_.isString(action)&&core.action_registry.contains(action)){action={type:'ir.actions.client',tag:action};}else if(_.isNumber(action)||_.isString(action)){def=this._loadAction(action,{active_id:options.additional_context.active_id,active_ids:options.additional_context.active_ids,active_model:options.additional_context.active_model,}).then(function(result){action=result;});}
return this.dp.add(Promise.resolve(def)).then(function(){options.clear_breadcrumbs=action.target==='main'||options.clear_breadcrumbs;self._preprocessAction(action,options);return self._handleAction(action,options).then(function(){action.pushState=true;return action;});});},do_push_state:function(state){this.trigger_up('push_state',{state:state});},getCurrentAction:function(){var controller=this.getCurrentController();return controller?this.actions[controller.actionID]:null;},getCurrentController:function(){var currentControllerID=_.last(this.controllerStack);return currentControllerID?this.controllers[currentControllerID]:null;},loadState:function(state){var action;if(!state.action){return Promise.resolve();}
if(_.isString(state.action)&&core.action_registry.contains(state.action)){action={params:state,tag:state.action,type:'ir.actions.client',};}else{action=state.action;}
return this.doAction(action,{clear_breadcrumbs:true,pushState:false,});},_appendController:function(controller){dom.append(this.$el,controller.widget.$el,{in_DOM:this.isInDOM,callbacks:[{widget:controller.widget}],});if(controller.scrollPosition){this.trigger_up('scrollTo',controller.scrollPosition);}},_closeDialog:function(options){if(this.currentDialogController){this.currentDialogController.dialog.destroy(options);}},_detachCurrentController:function(){var currentController=this.getCurrentController();if(currentController){currentController.scrollPosition=this._getScrollPosition();dom.detach([{widget:currentController.widget}]);}},_executeAction:function(action,options){var self=this;this.actions[action.jsID]=action;if(action.target==='new'){return this._executeActionInDialog(action,options);}
var controller=self.controllers[action.controllerID];return this.clearUncommittedChanges().then(function(){return self.dp.add(self._startController(controller));}).then(function(){if(self.currentDialogController){self._closeDialog({silent:true});}
if(options.on_reverse_breadcrumb){var currentAction=self.getCurrentAction();if(currentAction){currentAction.on_reverse_breadcrumb=options.on_reverse_breadcrumb;}}
self._pushController(controller);self.call('session_storage','setItem','current_action',action._originalAction);return action;}).guardedCatch(function(){self._removeAction(action.jsID);});},_executeActionInDialog:function(action,options){var self=this;var controller=this.controllers[action.controllerID];var widget=controller.widget;return this._startController(controller).then(function(controller){var prevDialogOnClose;if(self.currentDialogController){prevDialogOnClose=self.currentDialogController.onClose;self._closeDialog({silent:true});}
controller.onClose=prevDialogOnClose||options.on_close;var dialog=new Dialog(self,_.defaults({},options,{buttons:[],dialogClass:controller.className,title:action.name,size:action.context.dialog_size,}));dialog.on('closed',self,function(options){options=options||{};self._removeAction(action.jsID);self.currentDialogController=null;if(options.silent!==true){controller.onClose(options.infos);}});controller.dialog=dialog;return dialog.open().opened(function(){self.currentDialogController=controller;dom.append(dialog.$el,widget.$el,{in_DOM:true,callbacks:[{widget:dialog},{widget:controller.widget}],});widget.renderButtons(dialog.$footer);dialog.rebindButtonBehavior();return action;});}).guardedCatch(function(){self._removeAction(action.jsID);});},_executeClientAction:function(action,options){var self=this;var ClientAction=core.action_registry.get(action.tag);if(!ClientAction){console.error("Could not find client action "+action.tag,action);return Promise.reject();}
if(!(ClientAction.prototype instanceof AbstractAction)){console.warn('The client action '+action.tag+' should be an instance of AbstractAction!');}
if(!(ClientAction.prototype instanceof Widget)){var next=ClientAction(this,action);if(next){return this.doAction(next,options);}
return Promise.resolve();}
var controllerID=_.uniqueId('controller_');var index=this._getControllerStackIndex(options);options.breadcrumbs=this._getBreadcrumbs(this.controllerStack.slice(0,index));options.controllerID=controllerID;var widget=new ClientAction(this,action,options);var controller={actionID:action.jsID,index:index,jsID:controllerID,title:widget.getTitle(),widget:widget,};this.controllers[controllerID]=controller;action.controllerID=controllerID;var prom=this._executeAction(action,options);prom.then(function(){self._pushState(controllerID,{});});return prom;},_executeCloseAction:function(action,options){var result;if(!this.currentDialogController){result=options.on_close(action.infos);}
this._closeDialog({infos:action.infos});if(action.effect){this.trigger_up('show_effect',action.effect);}
return Promise.resolve(result);},_executeServerAction:function(action,options){var self=this;var runDef=this._rpc({route:'/web/action/run',params:{action_id:action.id,context:action.context||{},},});return this.dp.add(runDef).then(function(action){action=action||{type:'ir.actions.act_window_close'};return self.doAction(action,options);});},_executeURLAction:function(action,options){var url=action.url;if(action.target==='self'){framework.redirect(url);return Promise.resolve();}else{var w=window.open(url,'_blank');if(!w||w.closed||typeof w.closed==='undefined'){var message=_t('A popup window has been blocked. You '+'may need to change your browser settings to allow '+'popup windows for this page.');this.do_warn(_t('Warning'),message,true);}}
options.on_close();return Promise.resolve();},_getBreadcrumbs:function(controllerStack){var self=this;return _.map(controllerStack,function(controllerID){return{controllerID:controllerID,title:self.controllers[controllerID].title,};});},_getControllerStackIndex:function(options){var index;if('index'in options){index=options.index;}else if(options.clear_breadcrumbs){index=0;}else if(options.replace_last_action){index=this.controllerStack.length-1;}else{index=this.controllerStack.length;}
return index;},_getControllerState:function(controllerID){var controller=this.controllers[controllerID];var action=this.actions[controller.actionID];var state={title:controller.widget.getTitle(),};if(action.id){state.action=action.id;}else if(action.type==='ir.actions.client'){state.action=action.tag;var params=_.pick(action.params,function(v){return _.isString(v)||_.isNumber(v);});state=_.extend(params||{},state);}
if(action.context){var active_id=action.context.active_id;if(active_id){state.active_id=active_id;}
var active_ids=action.context.active_ids;if(active_ids&&!(active_ids.length===1&&active_ids[0]===active_id)){state.active_ids=action.context.active_ids.join(',');}}
return state;},_getScrollPosition:function(){var scrollPosition;this.trigger_up('getScrollPosition',{callback:function(_scrollPosition){scrollPosition=_scrollPosition;}});return scrollPosition;},_handleAction:function(action,options){if(!action.type){console.error("No type for action",action);return Promise.reject();}
switch(action.type){case'ir.actions.act_url':return this._executeURLAction(action,options);case'ir.actions.act_window_close':return this._executeCloseAction(action,options);case'ir.actions.client':return this._executeClientAction(action,options);case'ir.actions.server':return this._executeServerAction(action,options);default:console.error("The ActionManager can't handle actions of type "+
action.type,action);return Promise.reject();}},_pushController:function(controller){var self=this;this._detachCurrentController();var toDestroy=this.controllerStack.slice(controller.index);toDestroy=_.reject(toDestroy,function(controllerID){return controllerID===controller.jsID||self.controllers[controllerID].actionID===controller.actionID;});this._removeControllers(toDestroy);this.controllerStack=this.controllerStack.slice(0,controller.index);this.controllerStack.push(controller.jsID);this._appendController(controller);this.trigger_up('current_action_updated',{action:this.getCurrentAction(),controller:controller,});core.bus.trigger('close_dialogs');this._toggleFullscreen();},_pushState:function(controllerID,state){var controller=this.controllers[controllerID];if(controller){var action=this.actions[controller.actionID];if(action.target==='new'||action.pushState===false){return;}
state=_.extend({},state,this._getControllerState(controller.jsID));this.trigger_up('push_state',{state:state});}},_loadAction:function(actionID,context){var self=this;return new Promise(function(resolve,reject){self.trigger_up('load_action',{actionID:actionID,context:context,on_success:resolve,});});},_preprocessAction:function(action,options){var context=new Context(this.userContext,options.additional_context,action.context);action.context=pyUtils.eval('context',context);if(action.domain){action.domain=pyUtils.eval('domain',action.domain,action.context);}
action._originalAction=JSON.stringify(action);action.jsID=_.uniqueId('action_');action.pushState=options.pushState;},_removeAction:function(actionID){var action=this.actions[actionID];var controller=this.controllers[action.controllerID];delete this.actions[action.jsID];delete this.controllers[action.controllerID];controller.widget.destroy();},_removeControllers:function(controllerIDs){var self=this;var actionsToRemove=_.map(controllerIDs,function(controllerID){return self.controllers[controllerID].actionID;});_.each(_.uniq(actionsToRemove),this._removeAction.bind(this));},_restoreController:function(controllerID){var self=this;var controller=this.controllers[controllerID];var action=this.actions[controller.actionID];var def;if(action.on_reverse_breadcrumb){def=action.on_reverse_breadcrumb();}
return Promise.resolve(def).then(function(){return Promise.resolve(controller.widget.do_show()).then(function(){var index=_.indexOf(self.controllerStack,controllerID);self._pushController(controller,index);});});},_startController:function(controller){var fragment=document.createDocumentFragment();return controller.widget.appendTo(fragment).then(function(){return controller;});},_toggleFullscreen:function(){var self=this;var fullscreen=_.some(this.controllerStack,function(controllerID){var controller=self.controllers[controllerID];return self.actions[controller.actionID].target==='fullscreen';});this.trigger_up('toggle_fullscreen',{fullscreen:fullscreen});},_onBreadcrumbClicked:function(ev){ev.stopPropagation();this._restoreController(ev.data.controllerID);},_onHistoryBack:function(){if(this.currentDialogController){this._closeDialog();}else{var length=this.controllerStack.length;if(length>1){this._restoreController(this.controllerStack[length-2]);}}},_onPushState:function(ev){if(ev.target!==this){ev.stopPropagation();this._pushState(ev.data.controllerID,ev.data.state);}},_onRedirect:function(ev){this.do_action({type:'ir.actions.act_window',view_mode:'form',res_model:ev.data.res_model,views:[[false,'form']],res_id:ev.data.res_id,});},});return ActionManager;});;

/* /web/static/src/js/chrome/action_manager_act_window.js defined in bundle 'web.assets_backend' */
odoo.define('web.ActWindowActionManager',function(require){"use strict";var ActionManager=require('web.ActionManager');var config=require('web.config');var Context=require('web.Context');var core=require('web.core');var pyUtils=require('web.py_utils');var view_registry=require('web.view_registry');ActionManager.include({custom_events:_.extend({},ActionManager.prototype.custom_events,{execute_action:'_onExecuteAction',switch_view:'_onSwitchView',}),getCurrentController:function(){var currentController=this._super.apply(this,arguments);var action=currentController&&this.actions[currentController.actionID];if(action&&action.type==='ir.actions.act_window'&&!currentController.widget){var lastControllerID=this.controllerStack.pop();currentController=this._super.apply(this,arguments);this.controllerStack.push(lastControllerID);}
return currentController;},loadState:function(state){var callersArguments=arguments;var _super=this._super.bind(this);var self=this;var action;var def;var options={clear_breadcrumbs:true,pushState:false,};if(state.action){var currentController=this.getCurrentController();var currentAction=currentController&&this.actions[currentController.actionID];if(currentAction&&currentAction.id===state.action&&currentAction.type==='ir.actions.act_window'){this._closeDialog(true);var viewOptions={currentId:state.id};var viewType=state.view_type||currentController.viewType;return this._switchController(currentAction,viewType,viewOptions);}else if(!core.action_registry.contains(state.action)){var context={};if(state.active_id){context.active_id=state.active_id;}
if(state.active_ids){context.active_ids=state.active_ids.split(',').map(function(id){return parseInt(id,10)||id;});}else if(state.active_id){context.active_ids=[state.active_id];}
context.params=state;action=state.action;options=_.extend(options,{additional_context:context,resID:state.id||undefined,viewType:state.view_type,});}}else if(state.model&&state.id){action={res_model:state.model,res_id:state.id,type:'ir.actions.act_window',views:[[state.view_id||false,'form']],};}else if(state.model&&state.view_type){var storedAction=this.call('session_storage','getItem','current_action');var lastAction=JSON.parse(storedAction||'{}');if(lastAction.res_model===state.model){action=lastAction;options.viewType=state.view_type;}}else if(state.sa){def=this._rpc({route:'/web/session/get_session_action',params:{key:state.sa},}).then(function(sessionAction){action=sessionAction;});}
return Promise.all([def]).then(function(){if(action){return self.doAction(action,options);}
return _super.apply(self,callersArguments);});},_createViewController:function(action,viewType,viewOptions,options){var self=this;var viewDescr=_.findWhere(action.views,{type:viewType});if(!viewDescr){return Promise.reject();}
options=options||{};var index=options.index||0;var controllerID=options.controllerID||_.uniqueId('controller_');var controller={actionID:action.jsID,className:'o_act_window',index:index,jsID:controllerID,viewType:viewType,};Object.defineProperty(controller,'title',{get:function(){return controller.widget?controller.widget.getTitle():(action.display_name||action.name);},});this.controllers[controllerID]=controller;if(!options.lazy){var flags=action.flags||{};viewOptions=_.extend({},flags,flags[viewType],viewOptions,{action:action,breadcrumbs:this._getBreadcrumbs(this.controllerStack.slice(0,index)),controllerID:controllerID,});var rejection;var view=new viewDescr.Widget(viewDescr.fieldsView,viewOptions);var def=new Promise(function(resolve,reject){rejection=reject;view.getController(self).then(function(widget){if(def.rejected){widget.destroy();}else{controller.widget=widget;resolve(controller);}}).guardedCatch(reject);});def.reject=rejection;def.guardedCatch(function(){def.rejected=true;delete self.controllers[controllerID];});action.controllers[viewType]=def;}else{action.controllers[viewType]=Promise.resolve(controller);}
return action.controllers[viewType];},_destroyWindowAction:function(action){var self=this;for(var c in action.controllers){var controllerDef=action.controllers[c];controllerDef.then(function(controller){delete self.controllers[controller.jsID];if(controller.widget){controller.widget.destroy();}});if(controllerDef.reject){controllerDef.reject();}}},_executeWindowAction:function(action,options){var self=this;return this.dp.add(this._loadViews(action)).then(function(fieldsViews){var views=self._generateActionViews(action,fieldsViews);action._views=action.views;action.views=views;action.controlPanelFieldsView=fieldsViews.search;action.controllers={};var curView=options.viewType&&_.findWhere(views,{type:options.viewType});var lazyView;if(curView){if(!curView.multiRecord&&views[0].multiRecord){lazyView=views[0];}}else{curView=views[0];}
if(config.device.isMobile){if(!curView.isMobileFriendly){curView=self._findMobileView(views,curView.multiRecord)||curView;}
if(lazyView&&!lazyView.isMobileFriendly){lazyView=self._findMobileView(views,lazyView.multiRecord)||lazyView;}}
var lazyViewDef;var lazyControllerID;if(lazyView){options.clear_breadcrumbs=false;lazyViewDef=self._createViewController(action,lazyView.type,{},{lazy:true}).then(function(lazyLoadedController){lazyControllerID=lazyLoadedController.jsID;self.controllerStack.push(lazyLoadedController.jsID);});}
return self.dp.add(Promise.resolve(lazyViewDef)).then(function(){var viewOptions={controllerState:options.controllerState,currentId:options.resID,};var curViewDef=self._createViewController(action,curView.type,viewOptions,{index:self._getControllerStackIndex(options),});return self.dp.add(curViewDef);}).then(function(controller){action.controllerID=controller.jsID;return self._executeAction(action,options);}).guardedCatch(function(){if(lazyControllerID){var index=self.controllerStack.indexOf(lazyControllerID);self.controllerStack=self.controllerStack.slice(0,index);}
self._destroyWindowAction(action);});});},_findMobileView:function(views,multiRecord){return _.findWhere(views,{isMobileFriendly:true,multiRecord:multiRecord,});},_generateActionViews:function(action,fieldsViews){var views=[];_.each(action.views,function(view){var viewType=view[1];var fieldsView=fieldsViews[viewType];var parsedXML=new DOMParser().parseFromString(fieldsView.arch,"text/xml");var key=parsedXML.documentElement.getAttribute('js_class');var View=view_registry.get(key||viewType);if(View){views.push({accessKey:View.prototype.accessKey||View.prototype.accesskey,displayName:View.prototype.display_name,fieldsView:fieldsView,icon:View.prototype.icon,isMobileFriendly:View.prototype.mobile_friendly,multiRecord:View.prototype.multi_record,type:viewType,viewID:view[0],Widget:View,});}else if(config.isDebug('assets')){console.log("View type '"+viewType+"' is not present in the view registry.");}});return views;},_getControllerState:function(controllerID){var state=this._super.apply(this,arguments);var controller=this.controllers[controllerID];var action=this.actions[controller.actionID];if(action.type==='ir.actions.act_window'){state.model=action.res_model;state.view_type=controller.viewType;}
return state;},_handleAction:function(action,options){if(action.type==='ir.actions.act_window'){return this._executeWindowAction(action,options);}
return this._super.apply(this,arguments);},_loadViews:function(action){var inDialog=action.target==='new';var inline=action.target==='inline';var options={action_id:action.id,toolbar:!inDialog&&!inline,};var views=action.views.slice();if(!inline&&!(inDialog&&action.views[0][1]==='form')){options.load_filters=true;var searchviewID=action.search_view_id&&action.search_view_id[0];views.push([searchviewID||false,'search']);}
return this.loadViews(action.res_model,action.context,views,options);},_removeAction:function(actionID){var action=this.actions[actionID];if(action.type==='ir.actions.act_window'){delete this.actions[action.jsID];this._destroyWindowAction(action);}else{this._super.apply(this,arguments);}},_restoreController:function(controllerID){var self=this;var controller=this.controllers[controllerID];var action=this.actions[controller.actionID];if(action.type==='ir.actions.act_window'){return this.clearUncommittedChanges().then(function(){var def=Promise.resolve();if(action.on_reverse_breadcrumb){def=action.on_reverse_breadcrumb();}
return Promise.resolve(def).then(function(){return self._switchController(action,controller.viewType);});});}
return this._super.apply(this,arguments);},_switchController:function(action,viewType,viewOptions){var self=this;var view=_.findWhere(action.views,{type:viewType});if(!view){return Promise.reject();}
var currentController=this.getCurrentController();var index;if(currentController.actionID!==action.jsID){var controller=_.findWhere(this.controllers,{actionID:action.jsID,viewType:viewType,});index=_.indexOf(this.controllerStack,controller.jsID);}else{if(view.multiRecord){index=_.findIndex(this.controllerStack,function(controllerID){return self.controllers[controllerID].actionID===action.jsID;});}else if(!_.findWhere(action.views,{type:currentController.viewType}).multiRecord){index=this.controllerStack.length-1;}else{index=this.controllerStack.length;}}
var newController=function(controllerID){var options={controllerID:controllerID,index:index,};return self._createViewController(action,viewType,viewOptions,options).then(function(controller){return self._startController(controller);});};var controllerDef=action.controllers[viewType];if(controllerDef){controllerDef=controllerDef.then(function(controller){if(!controller.widget){return newController(controller.jsID);}else{return Promise.resolve(controller.widget.willRestore()).then(function(){viewOptions=_.extend({},viewOptions,{breadcrumbs:self._getBreadcrumbs(self.controllerStack.slice(0,index)),});return controller.widget.reload(viewOptions).then(function(){return controller;});});}},function(){return newController();});}else{controllerDef=newController();}
return this.dp.add(controllerDef).then(function(controller){return self._pushController(controller);});},_onExecuteAction:function(ev){ev.stopPropagation();var self=this;var actionData=ev.data.action_data;var env=ev.data.env;var context=new Context(env.context,actionData.context||{});var recordID=env.currentID||null;var def;if(actionData.special){def=Promise.resolve({type:'ir.actions.act_window_close',infos:{special:true},});}else if(actionData.type==='object'){var args=recordID?[[recordID]]:[env.resIDs];if(actionData.args){try{var additionalArgs=JSON.parse(actionData.args.replace(/'/g,'"'));args=args.concat(additionalArgs);}catch(e){console.error("Could not JSON.parse arguments",actionData.args);}}
def=this._rpc({route:'/web/dataset/call_button',params:{args:args,kwargs:{context:context.eval()},method:actionData.name,model:env.model,},});}else if(actionData.type==='action'){def=this._loadAction(actionData.name,_.extend(pyUtils.eval('context',context),{active_model:env.model,active_ids:env.resIDs,active_id:recordID,}));}else{def=Promise.reject();}
def.guardedCatch(ev.data.on_fail);this.dp.add(def).then(function(action){var effect=false;if(actionData.effect){effect=pyUtils.py_eval(actionData.effect);}
if(action&&action.constructor===Object){var ctx=new Context(_.object(_.reject(_.pairs(env.context),function(pair){return pair[0].match('^(?:(?:default_|search_default_|show_).+|'+'.+_view_ref|group_by|group_by_no_leaf|active_id|'+'active_ids|orderedBy)$')!==null;})));ctx.add(actionData.context||{});ctx.add({active_model:env.model});if(recordID){ctx.add({active_id:recordID,active_ids:[recordID],});}
ctx.add(action.context||{});action.context=ctx;action.effect=effect||action.effect;}else{action={effect:effect,type:'ir.actions.act_window_close',};}
var options={on_close:ev.data.on_closed};action.flags=_.extend({},action.flags,{searchPanelDefaultNoFilter:true});return self.doAction(action,options).then(ev.data.on_success,ev.data.on_fail);});},_onSwitchView:function(ev){ev.stopPropagation();var viewType=ev.data.view_type;var currentController=this.getCurrentController();if(currentController.jsID===ev.data.controllerID){var action=this.actions[currentController.actionID];var currentControllerState=currentController.widget.exportState();action.controllerState=_.extend({},action.controllerState,currentControllerState);var options={controllerState:action.controllerState,currentId:ev.data.res_id,};if(ev.data.mode){options.mode=ev.data.mode;}
this._switchController(action,viewType,options);}},});});;

/* /web/static/src/js/chrome/action_manager_report.js defined in bundle 'web.assets_backend' */
odoo.define('web.ReportActionManager',function(require){"use strict";var ActionManager=require('web.ActionManager');var core=require('web.core');var framework=require('web.framework');var session=require('web.session');var _t=core._t;var _lt=core._lt;var link='<br><br><a href="http://wkhtmltopdf.org/" target="_blank">wkhtmltopdf.org</a>';var WKHTMLTOPDF_MESSAGES={broken:_lt('Your installation of Wkhtmltopdf seems to be broken. The report will be shown '+'in html.')+link,install:_lt('Unable to find Wkhtmltopdf on this system. The report will be shown in '+'html.')+link,upgrade:_lt('You should upgrade your version of Wkhtmltopdf to at least 0.12.0 in order to '+'get a correct display of headers and footers as well as support for '+'table-breaking between pages.')+link,workers:_lt('You need to start Odoo with at least two workers to print a pdf version of '+'the reports.'),};ActionManager.include({_downloadReport:function(url){var self=this;framework.blockUI();return new Promise(function(resolve,reject){var type='qweb-'+url.split('/')[2];var blocked=!session.get_file({url:'/report/download',data:{data:JSON.stringify([url,type]),context:JSON.stringify(session.user_context),},success:resolve,error:(error)=>{self.call('crash_manager','rpc_error',error);reject();},complete:framework.unblockUI,});if(blocked){var message=_t('A popup window with your report was blocked. You '+'may need to change your browser settings to allow '+'popup windows for this page.');self.do_warn(_t('Warning'),message,true);}});},_triggerDownload:function(action,options,type){var self=this;var reportUrls=this._makeReportUrls(action);return this._downloadReport(reportUrls[type]).then(function(){if(action.close_on_report_download){var closeAction={type:'ir.actions.act_window_close'};return self.doAction(closeAction,_.pick(options,'on_close'));}else{return options.on_close();}});},_executeReportAction:function(action,options){var self=this;if(action.report_type==='qweb-html'){return this._executeReportClientAction(action,options);}else if(action.report_type==='qweb-pdf'){return this.call('report','checkWkhtmltopdf').then(function(state){if(state in WKHTMLTOPDF_MESSAGES){self.do_notify(_t('Report'),WKHTMLTOPDF_MESSAGES[state],true);}
if(state==='upgrade'||state==='ok'){return self._triggerDownload(action,options,'pdf');}else{return self._executeReportClientAction(action,options);}});}else if(action.report_type==='qweb-text'){return self._triggerDownload(action,options,'text');}else{console.error("The ActionManager can't handle reports of type "+
action.report_type,action);return Promise.reject();}},_executeReportClientAction:function(action,options){var urls=this._makeReportUrls(action);var clientActionOptions=_.extend({},options,{context:action.context,data:action.data,display_name:action.display_name,name:action.name,report_file:action.report_file,report_name:action.report_name,report_url:urls.html,});return this.doAction('report.client_action',clientActionOptions);},_handleAction:function(action,options){if(action.type==='ir.actions.report'){return this._executeReportAction(action,options);}
return this._super.apply(this,arguments);},_makeReportUrls:function(action){var reportUrls={html:'/report/html/'+action.report_name,pdf:'/report/pdf/'+action.report_name,text:'/report/text/'+action.report_name,};if(_.isUndefined(action.data)||_.isNull(action.data)||(_.isObject(action.data)&&_.isEmpty(action.data))){if(action.context.active_ids){var activeIDsPath='/'+action.context.active_ids.join(',');reportUrls=_.mapObject(reportUrls,function(value){return value+=activeIDsPath;});}}else{var serializedOptionsPath='?options='+encodeURIComponent(JSON.stringify(action.data));serializedOptionsPath+='&context='+encodeURIComponent(JSON.stringify(action.context));reportUrls=_.mapObject(reportUrls,function(value){return value+=serializedOptionsPath;});}
return reportUrls;},});});;

/* /web/static/src/js/chrome/action_mixin.js defined in bundle 'web.assets_backend' */
odoo.define('web.ActionMixin',function(require){"use strict";var core=require('web.core');var ActionMixin={template:'Action',contentTemplate:null,_controlPanel:null,_title:'',renderElement:function(){this._super.apply(this,arguments);if(this.contentTemplate){var content=core.qweb.render(this.contentTemplate,{widget:this});this.$('.o_content').append(content);}},on_attach_callback:function(){},on_detach_callback:function(){},willRestore:function(){},canBeRemoved:function(){return Promise.resolve();},getOwnedQueryParams:function(){return{};},getTitle:function(){return this._title;},giveFocus:function(){},renderButtons:function($node){},updateControlPanel:function(status,options){if(this._controlPanel){status=status||{};status.title=status.title||this.getTitle();this._controlPanel.updateContents(status,options||{});}},_setTitle:function(title){this._title=title;this.updateControlPanel({title:this._title},{clear:false});},};return ActionMixin;});;

/* /web/static/src/js/core/browser_detection.js defined in bundle 'web.assets_backend' */
odoo.define('web.BrowserDetection',function(require){"use strict";var Class=require('web.Class');var BrowserDetection=Class.extend({init:function(){},isOsMac:function(){return navigator.platform.toLowerCase().indexOf('mac')!==-1;},isBrowserChrome:function(){return $.browser.chrome&&navigator.userAgent.toLocaleLowerCase().indexOf('edge')===-1;}});return BrowserDetection;});;

/* /web/static/src/js/chrome/keyboard_navigation_mixin.js defined in bundle 'web.assets_backend' */
odoo.define('web.KeyboardNavigationMixin',function(require){"use strict";var BrowserDetection=require('web.BrowserDetection');var knownUnusableAccessKeys=[' ','A','B','C','H','J','K','L','N','P','S','Q','E','F','D','0','1','2','3','4','5','6','7','8','9'];var KeyboardNavigationMixin={events:{'keydown':'_onKeyDown','keyup':'_onKeyUp',},init:function(){this._areAccessKeyVisible=false;this.BrowserDetection=new BrowserDetection();},_addAccessKeyOverlays:function(){var accesskeyElements=$(document).find('[accesskey]').filter(':visible');_.each(accesskeyElements,function(elem){var overlay=$(_.str.sprintf("<div class='o_web_accesskey_overlay'>%s</div>",$(elem).attr('accesskey').toUpperCase()));var $overlayParent;if(elem.tagName.toUpperCase()==="INPUT"){$overlayParent=$(elem).parent();}else{$overlayParent=$(elem);}
if($overlayParent.css('position')!=='absolute'){$overlayParent.css('position','relative');}
overlay.appendTo($overlayParent);});},_getAllUsedAccessKeys:function(){var usedAccessKeys=knownUnusableAccessKeys.slice();this.$el.find('[accesskey]').each(function(_,elem){usedAccessKeys.push(elem.accessKey.toUpperCase());});return usedAccessKeys;},_hideAccessKeyOverlay:function(){this._areAccessKeyVisible=false;var overlays=this.$el.find('.o_web_accesskey_overlay');if(overlays.length){return overlays.remove();}},_setAccessKeyOnTopNavigation:function(){this.$el.find('.o_menu_sections>li>a').each(function(number,item){item.accessKey=number+1;});},_onKeyDown:function(keyDownEvent){if($('body.o_ui_blocked').length&&(keyDownEvent.altKey||keyDownEvent.key==='Alt')&&!keyDownEvent.ctrlKey){if(keyDownEvent.preventDefault)keyDownEvent.preventDefault();else keyDownEvent.returnValue=false;if(keyDownEvent.stopPropagation)keyDownEvent.stopPropagation();if(keyDownEvent.cancelBubble)keyDownEvent.cancelBubble=true;return false;}
if(!this._areAccessKeyVisible&&(keyDownEvent.altKey||keyDownEvent.key==='Alt')&&!keyDownEvent.ctrlKey){this._areAccessKeyVisible=true;this._setAccessKeyOnTopNavigation();var usedAccessKey=this._getAllUsedAccessKeys();var buttonsWithoutAccessKey=this.$el.find('button.btn:visible').not('[accesskey]').not('[disabled]').not('[tabindex="-1"]');_.each(buttonsWithoutAccessKey,function(elem){var buttonString=[elem.innerText,elem.title,"ABCDEFGHIJKLMNOPQRSTUVWXYZ"].join('');for(var letterIndex=0;letterIndex<buttonString.length;letterIndex++){var candidateAccessKey=buttonString[letterIndex].toUpperCase();if(candidateAccessKey>='A'&&candidateAccessKey<='Z'&&!_.includes(usedAccessKey,candidateAccessKey)){elem.accessKey=candidateAccessKey;usedAccessKey.push(candidateAccessKey);break;}}});var elementsWithoutAriaKeyshortcut=this.$el.find('[accesskey]').not('[aria-keyshortcuts]');_.each(elementsWithoutAriaKeyshortcut,function(elem){elem.setAttribute('aria-keyshortcuts','Alt+Shift+'+elem.accessKey);});this._addAccessKeyOverlays();}
if(this.BrowserDetection.isOsMac())
return;if(keyDownEvent.altKey&&!keyDownEvent.ctrlKey&&keyDownEvent.key.length===1){var elementWithAccessKey=[];if(keyDownEvent.keyCode>=65&&keyDownEvent.keyCode<=90||keyDownEvent.keyCode>=97&&keyDownEvent.keyCode<=122){elementWithAccessKey=document.querySelectorAll('[accesskey="'+String.fromCharCode(keyDownEvent.keyCode).toLowerCase()+'"], [accesskey="'+String.fromCharCode(keyDownEvent.keyCode).toUpperCase()+'"]');if(elementWithAccessKey.length){if(this.BrowserDetection.isOsMac()||!this.BrowserDetection.isBrowserChrome()){elementWithAccessKey[0].focus();elementWithAccessKey[0].click();if(keyDownEvent.preventDefault)keyDownEvent.preventDefault();else keyDownEvent.returnValue=false;if(keyDownEvent.stopPropagation)keyDownEvent.stopPropagation();if(keyDownEvent.cancelBubble)keyDownEvent.cancelBubble=true;return false;}}}
else{var numberKey;if(keyDownEvent.originalEvent.code&&keyDownEvent.originalEvent.code.indexOf('Digit')===0){numberKey=keyDownEvent.originalEvent.code[keyDownEvent.originalEvent.code.length-1];}else if(keyDownEvent.originalEvent.key&&keyDownEvent.originalEvent.key.length===1&&keyDownEvent.originalEvent.key>='0'&&keyDownEvent.originalEvent.key<='9'){numberKey=keyDownEvent.originalEvent.key;}else if(keyDownEvent.keyCode>=48&&keyDownEvent.keyCode<=57){numberKey=keyDownEvent.keyCode-48;}
if(numberKey>='0'&&numberKey<='9'){elementWithAccessKey=document.querySelectorAll('[accesskey="'+numberKey+'"]');if(elementWithAccessKey.length){elementWithAccessKey[0].click();if(keyDownEvent.preventDefault)keyDownEvent.preventDefault();else keyDownEvent.returnValue=false;if(keyDownEvent.stopPropagation)keyDownEvent.stopPropagation();if(keyDownEvent.cancelBubble)keyDownEvent.cancelBubble=true;return false;}}}}},_onKeyUp:function(keyUpEvent){if((keyUpEvent.altKey||keyUpEvent.key==='Alt')&&!keyUpEvent.ctrlKey){this._hideAccessKeyOverlay();if(keyUpEvent.preventDefault)keyUpEvent.preventDefault();else keyUpEvent.returnValue=false;if(keyUpEvent.stopPropagation)keyUpEvent.stopPropagation();if(keyUpEvent.cancelBubble)keyUpEvent.cancelBubble=true;return false;}},};return KeyboardNavigationMixin;});;

/* /web/static/src/js/chrome/abstract_web_client.js defined in bundle 'web.assets_backend' */
odoo.define('web.AbstractWebClient',function(require){"use strict";var ActionManager=require('web.ActionManager');var concurrency=require('web.concurrency');var core=require('web.core');var config=require('web.config');var WarningDialog=require('web.CrashManager').WarningDialog;var data_manager=require('web.data_manager');var dom=require('web.dom');var KeyboardNavigationMixin=require('web.KeyboardNavigationMixin');var Loading=require('web.Loading');var local_storage=require('web.local_storage');var RainbowMan=require('web.RainbowMan');var ServiceProviderMixin=require('web.ServiceProviderMixin');var session=require('web.session');var utils=require('web.utils');var Widget=require('web.Widget');var _t=core._t;var AbstractWebClient=Widget.extend(ServiceProviderMixin,KeyboardNavigationMixin,{dependencies:['notification'],events:_.extend({},KeyboardNavigationMixin.events,{'click .o_search_options .dropdown-menu':'_onClickDropDownMenu',}),custom_events:{clear_uncommitted_changes:function(e){this.clear_uncommitted_changes().then(e.data.callback);},toggle_fullscreen:function(event){this.toggle_fullscreen(event.data.fullscreen);},current_action_updated:function(ev){this.current_action_updated(ev.data.action,ev.data.controller);},warning:'_onDisplayWarning',load_action:'_onLoadAction',load_views:function(event){var params={model:event.data.modelName,context:event.data.context,views_descr:event.data.views,};return data_manager.load_views(params,event.data.options||{}).then(event.data.on_success);},load_filters:function(event){return data_manager.load_filters(event.data).then(event.data.on_success);},create_filter:'_onCreateFilter',delete_filter:'_onDeleteFilter',push_state:'_onPushState',show_effect:'_onShowEffect',get_session:function(event){if(event.data.callback){event.data.callback(session);}},do_action:function(event){this.do_action(event.data.action,event.data.options||{}).then(function(result){if(event.data.on_success){event.data.on_success(result);}}).guardedCatch(function(result){if(event.data.on_fail){event.data.on_fail(result);}});},getScrollPosition:'_onGetScrollPosition',scrollTo:'_onScrollTo',set_title_part:'_onSetTitlePart',},init:function(parent){odoo.isReady=false;this.client_options={};this._super(parent);ServiceProviderMixin.init.call(this);KeyboardNavigationMixin.init.call(this);this.origin=undefined;this._current_state=null;this.menu_dp=new concurrency.DropPrevious();this.action_mutex=new concurrency.Mutex();this.set('title_part',{"zopenerp":"Odoo"});},start:function(){var self=this;this.$el.toggleClass('o_touch_device',config.device.touch);this.on("change:title_part",this,this._title_changed);this._title_changed();var state=$.bbq.getState();var current_company_id=session.user_companies.current_company[0]
if(!state.cids){state.cids=utils.get_cookie('cids')!==null?utils.get_cookie('cids'):String(current_company_id);}
var stateCompanyIDS=_.map(state.cids.split(','),function(cid){return parseInt(cid)});var userCompanyIDS=_.map(session.user_companies.allowed_companies,function(company){return company[0]});if(!_.isEmpty(_.difference(stateCompanyIDS,userCompanyIDS))){state.cids=String(current_company_id);stateCompanyIDS=[current_company_id]}
session.user_context.allowed_company_ids=stateCompanyIDS;$.bbq.pushState(state);$("link[type='image/x-icon']").attr('href','/web/image/res.company/'+String(stateCompanyIDS[0])+'/favicon/')
return session.is_bound.then(function(){self.$el.toggleClass('o_rtl',_t.database.parameters.direction==="rtl");self.bind_events();return Promise.all([self.set_action_manager(),self.set_loading()]);}).then(function(){if(session.session_is_valid()){return self.show_application();}else{return Promise.resolve();}}).then(function(){self.action_manager.$el.on('scroll',core.bus.trigger.bind(core.bus,'scroll'));core.bus.trigger('web_client_ready');odoo.isReady=true;if(session.uid===1){self.$el.addClass('o_is_superuser');}});},bind_events:function(){var self=this;$('.oe_systray').show();this.$el.on('mouseenter','.oe_systray > div:not([data-toggle=tooltip])',function(){$(this).attr('data-toggle','tooltip').tooltip().trigger('mouseenter');});this.$el.on('click','.oe_dropdown_toggle',function(ev){ev.preventDefault();var $toggle=$(this);var doc_width=$(document).width();var $menu=$toggle.siblings('.oe_dropdown_menu');$menu=$menu.length>=1?$menu:$toggle.find('.oe_dropdown_menu');var state=$menu.is('.oe_opened');setTimeout(function(){$toggle.add($menu).toggleClass('oe_opened',!state);if(!state){var offset=$menu.offset();var menu_width=$menu.width();var x=doc_width-offset.left-menu_width-2;if(x<0){$menu.offset({left:offset.left+x}).width(menu_width);}}},0);});window.addEventListener('blur',function(e){self._hideAccessKeyOverlay();});core.bus.on('click',this,function(ev){$('.tooltip').remove();if(!$(ev.target).is('input[type=file]')){$(this.el.getElementsByClassName('oe_dropdown_menu oe_opened')).removeClass('oe_opened');$(this.el.getElementsByClassName('oe_dropdown_toggle oe_opened')).removeClass('oe_opened');}
this._hideAccessKeyOverlay();});core.bus.on('connection_lost',this,this._onConnectionLost);core.bus.on('connection_restored',this,this._onConnectionRestored);},set_action_manager:function(){var self=this;this.action_manager=new ActionManager(this,session.user_context);var fragment=document.createDocumentFragment();return this.action_manager.appendTo(fragment).then(function(){dom.append(self.$el,fragment,{in_DOM:true,callbacks:[{widget:self.action_manager}],});});},set_loading:function(){this.loading=new Loading(this);return this.loading.appendTo(this.$el);},show_application:function(){},clear_uncommitted_changes:function(){return this.action_manager.clearUncommittedChanges();},destroy_content:function(){_.each(_.clone(this.getChildren()),function(el){el.destroy();});this.$el.children().remove();},set_title:function(title){this.set_title_part("action",title);},set_title_part:function(part,title){var tmp=_.clone(this.get("title_part"));tmp[part]=title;this.set("title_part",tmp);},_title_changed:function(){var parts=_.sortBy(_.keys(this.get("title_part")),function(x){return x;});var tmp="";_.each(parts,function(part){var str=this.get("title_part")[part];if(str){tmp=tmp?tmp+" - "+str:str;}},this);document.title=tmp;},do_action:function(){return this.action_manager.doAction.apply(this.action_manager,arguments);},do_reload:function(){var self=this;return session.session_reload().then(function(){session.load_modules(true).then(self.menu.proxy('do_reload'));});},do_push_state:function(state){if(!state.menu_id&&this.menu){state.menu_id=this.menu.getCurrentPrimaryMenu();}
if('title'in state){this.set_title(state.title);delete state.title;}
var url='#'+$.param(state);this._current_state=$.deparam($.param(state),false);$.bbq.pushState(url);this.trigger('state_pushed',state);},current_action_updated:function(action,controller){},toggle_fullscreen:function(fullscreen){this.$el.toggleClass('o_fullscreen',fullscreen);},_onClickDropDownMenu:function(ev){ev.stopPropagation();},_onConnectionLost:function(){this.connectionNotificationID=this.displayNotification({title:_t('Connection lost'),message:_t('Trying to reconnect...'),sticky:true});},_onConnectionRestored:function(){if(this.connectionNotificationID){this.call('notification','close',this.connectionNotificationID);this.displayNotification({type:'info',title:_t('Connection restored'),message:_t('You are back online'),sticky:false});this.connectionNotificationID=false;}},_onCreateFilter:function(e){data_manager.create_filter(e.data.filter).then(e.data.on_success);},_onDeleteFilter:function(e){data_manager.delete_filter(e.data.filterId).then(e.data.on_success);},_onDisplayWarning:function(e){var data=e.data;if(data.type==='dialog'){new WarningDialog(this,{title:data.title,},data).open();}else{data.type='warning';this.call('notification','notify',data);}},_onGetScrollPosition:function(ev){},_onLoadAction:function(event){data_manager.load_action(event.data.actionID,event.data.context).then(event.data.on_success);},_onPushState:function(e){this.do_push_state(_.extend(e.data.state,{'cids':$.bbq.getState().cids}));},_onScrollTo:function(ev){},_onSetTitlePart:function(ev){var part=ev.data.part;var title=ev.data.title;this.set_title_part(part,title);},_onShowEffect:function(e){var data=e.data||{};var type=data.type||'rainbow_man';if(type==='rainbow_man'){if(session.show_effect){new RainbowMan(data).appendTo(this.$el);}else{this.call('notification','notify',{title:"",message:data.message,sticky:false});}}else{throw new Error('Unknown effect type: '+type);}},});return AbstractWebClient;});;

/* /web/static/src/js/chrome/web_client.js defined in bundle 'web.assets_backend' */
odoo.define('web.WebClient',function(require){"use strict";var AbstractWebClient=require('web.AbstractWebClient');var config=require('web.config');var core=require('web.core');var data_manager=require('web.data_manager');var dom=require('web.dom');var Menu=require('web.Menu');var session=require('web.session');return AbstractWebClient.extend({custom_events:_.extend({},AbstractWebClient.prototype.custom_events,{app_clicked:'on_app_clicked',menu_clicked:'on_menu_clicked',}),start:function(){core.bus.on('change_menu_section',this,function(menuID){this.do_push_state(_.extend($.bbq.getState(),{menu_id:menuID,}));});return this._super.apply(this,arguments);},bind_events:function(){var self=this;this._super.apply(this,arguments);this.$el.on('click','a',function(ev){var disable_anchor=ev.target.attributes.disable_anchor;if(disable_anchor&&disable_anchor.value==="true"){return;}
var href=ev.target.attributes.href;if(href){if(href.value[0]==='#'&&href.value.length>1){if(self.$("[id='"+href.value.substr(1)+"']").length){ev.preventDefault();self.trigger_up('scrollTo',{'selector':href.value});}}}});},load_menus:function(){return(odoo.loadMenusPromise||odoo.reloadMenus()).then(function(menuData){for(var i=0;i<menuData.children.length;i++){var child=menuData.children[i];if(child.action===false){while(child.children&&child.children.length){child=child.children[0];if(child.action){menuData.children[i].action=child.action;break;}}}}
odoo.loadMenusPromise=null;return menuData;});},show_application:function(){var self=this;this.set_title();return this.menu_dp.add(this.instanciate_menu_widgets()).then(function(){$(window).bind('hashchange',self.on_hashchange);var state=$.bbq.getState(true);if(_.keys(state).length===1&&_.keys(state)[0]==="cids"){return self.menu_dp.add(self._rpc({model:'res.users',method:'read',args:[session.uid,["action_id"]],})).then(function(result){var data=result[0];if(data.action_id){return self.do_action(data.action_id[0]).then(function(){self.menu.change_menu_section(self.menu.action_id_to_primary_menu_id(data.action_id[0]));});}else{self.menu.openFirstApp();}});}else{return self.on_hashchange();}});},instanciate_menu_widgets:function(){var self=this;var proms=[];return this.load_menus().then(function(menuData){self.menu_data=menuData;if(self.menu){self.menu.destroy();}
self.menu=new Menu(self,menuData);proms.push(self.menu.prependTo(self.$el));return Promise.all(proms);});},on_hashchange:function(event){if(this._ignore_hashchange){this._ignore_hashchange=false;return Promise.resolve();}
var self=this;return this.clear_uncommitted_changes().then(function(){var stringstate=$.bbq.getState(false);if(!_.isEqual(self._current_state,stringstate)){var state=$.bbq.getState(true);if(state.action||(state.model&&(state.view_type||state.id))){return self.menu_dp.add(self.action_manager.loadState(state,!!self._current_state)).then(function(){if(state.menu_id){if(state.menu_id!==self.menu.current_primary_menu){core.bus.trigger('change_menu_section',state.menu_id);}}else{var action=self.action_manager.getCurrentAction();if(action){var menu_id=self.menu.action_id_to_primary_menu_id(action.id);core.bus.trigger('change_menu_section',menu_id);}}});}else if(state.menu_id){var action_id=self.menu.menu_id_to_action_id(state.menu_id);return self.menu_dp.add(self.do_action(action_id,{clear_breadcrumbs:true})).then(function(){core.bus.trigger('change_menu_section',state.menu_id);});}else{self.menu.openFirstApp();}}
self._current_state=stringstate;},function(){if(event){self._ignore_hashchange=true;window.location=event.originalEvent.oldURL;}});},on_app_clicked:function(ev){var self=this;return this.menu_dp.add(data_manager.load_action(ev.data.action_id)).then(function(result){return self.action_mutex.exec(function(){var completed=new Promise(function(resolve,reject){var options=_.extend({},ev.data.options,{clear_breadcrumbs:true,action_menu_id:ev.data.menu_id,});Promise.resolve(self._openMenu(result,options)).then(function(){self._on_app_clicked_done(ev).then(resolve).guardedCatch(reject);}).guardedCatch(function(){resolve();});setTimeout(function(){resolve();},2000);});return completed;});});},_on_app_clicked_done:function(ev){core.bus.trigger('change_menu_section',ev.data.menu_id);return Promise.resolve();},on_menu_clicked:function(ev){var self=this;return this.menu_dp.add(data_manager.load_action(ev.data.action_id)).then(function(result){self.$el.removeClass('o_mobile_menu_opened');return self.action_mutex.exec(function(){var completed=new Promise(function(resolve,reject){Promise.resolve(self._openMenu(result,{clear_breadcrumbs:true,})).then(resolve).guardedCatch(reject);setTimeout(function(){resolve();},2000);});return completed;});}).guardedCatch(function(){self.$el.removeClass('o_mobile_menu_opened');});},_openMenu:function(action,options){return this.do_action(action,options);},getScrollPosition:function(){return{left:this.action_manager.el.scrollLeft,top:this.action_manager.el.scrollTop,};},_onGetScrollPosition:function(ev){ev.data.callback(this.getScrollPosition());},_onScrollTo:function(ev){var offset={top:ev.data.top,left:ev.data.left||0};if(!offset.top){offset=dom.getPosition(document.querySelector(ev.data.selector));offset.top-=dom.getPosition(this.action_manager.el).top;}
this.action_manager.el.scrollTop=offset.top;this.action_manager.el.scrollLeft=offset.left;},});});;

/* /web/static/src/js/chrome/root_widget.js defined in bundle 'web.assets_backend' */
odoo.define('root.widget',function(require){"use strict";var webClient=require('web.web_client');return webClient;});;

/* /web/static/src/js/_deprecated/data.js defined in bundle 'web.assets_backend' */
odoo.define('web.data',function(require){"use strict";var Class=require('web.Class');var Context=require('web.Context');var concurrency=require('web.concurrency');var mixins=require('web.mixins');var session=require('web.session');var translation=require('web.translation');var pyUtils=require('web.py_utils');var _t=translation._t;function serialize_sort(criterion){return _.map(criterion,function(criteria){if(criteria[0]==='-'){return criteria.slice(1)+' DESC';}
return criteria+' ASC';}).join(', ');}
function deserialize_sort(criterion){return _.map(criterion,function(criteria){var split=_.without(criteria.split(' '),'');return(split[1]&&split[1].toLowerCase()==='desc'?'-':'')+split[0];});}
var Query=Class.extend({init:function(model,fields){this._model=model;this._fields=fields;this._filter=[];this._context={};this._lazy=true;this._limit=false;this._offset=0;this._order_by=[];},clone:function(to_set){to_set=to_set||{};var q=new Query(this._model,this._fields);q._context=this._context;q._filter=this._filter;q._lazy=this._lazy;q._limit=this._limit;q._offset=this._offset;q._order_by=this._order_by;for(var key in to_set){if(!to_set.hasOwnProperty(key)){continue;}
switch(key){case'filter':q._filter=(q._filter||[]).concat(to_set.filter||[]);break;case'context':q._context=new Context(q._context,to_set.context);break;case'lazy':case'limit':case'offset':case'order_by':q['_'+key]=to_set[key];}}
return q;},_execute:function(options){var self=this;options=options||{};return session.rpc('/web/dataset/search_read',{model:this._model.name,fields:this._fields||false,domain:pyUtils.eval('domains',[this._model.domain(this._filter)]),context:pyUtils.eval('contexts',[this._model.context(this._context)]),offset:this._offset,limit:this._limit,sort:serialize_sort(this._order_by)},options).then(function(results){self._count=results.length;return results.records;},null);},first:function(options){var self=this;return this.clone({limit:1})._execute(options).then(function(records){delete self._count;if(records.length){return records[0];}
return null;});},all:function(options){return this._execute(options);},count:function(){if(this._count!==undefined){return Promise.resolve(this._count);}
return this._model.call('search_count',[this._filter],{context:this._model.context(this._context)});},group_by:function(grouping){var ctx=pyUtils.eval('context',this._model.context(this._context));if(_.isUndefined(grouping)){grouping=[];}
if(!(grouping instanceof Array)){grouping=_.toArray(arguments);}
if(_.isEmpty(grouping)&&!ctx.group_by_no_leaf){return null;}
var raw_fields=_.map(grouping.concat(this._fields||[]),function(field){return field.split(':')[0];});var self=this;return this._model.call('read_group',{groupby:grouping,fields:_.uniq(raw_fields),domain:this._model.domain(this._filter),context:ctx,offset:this._offset,lazy:this._lazy,limit:this._limit,orderby:serialize_sort(this._order_by)||false}).then(function(results){return _(results).map(function(result){result.__context=result.__context||{};result.__context.group_by=result.__context.group_by||[];_.defaults(result.__context,ctx);var grouping_fields=self._lazy?[grouping[0]]:grouping;return new QueryGroup(self._model.name,grouping_fields,result);});});},context:function(context){if(!context){return this;}
return this.clone({context:context});},filter:function(domain){if(!domain){return this;}
return this.clone({filter:domain});},lazy:function(lazy){return this.clone({lazy:lazy});},limit:function(limit){return this.clone({limit:limit});},offset:function(offset){return this.clone({offset:offset});},order_by:function(fields){if(fields===undefined){return this;}
if(!(fields instanceof Array)){fields=_.toArray(arguments);}
if(_.isEmpty(fields)){return this;}
return this.clone({order_by:fields});}});var QueryGroup=Class.extend({init:function(model,grouping_fields,read_group_group){var fixed_group=_.extend({__context:{group_by:[]},__domain:[]},read_group_group);var count_key=(grouping_fields[0]&&grouping_fields[0].split(':')[0])+'_count';var aggregates={};for(var key in fixed_group){if(fixed_group.hasOwnProperty(key)){if(!(key.indexOf('__')===0||_.contains(grouping_fields,key)||(key===count_key))){aggregates[key]=fixed_group[key]||0;}}}
this.model=new Model(model,fixed_group.__context,fixed_group.__domain);var group_size=fixed_group[count_key]||fixed_group.__count||0;var leaf_group=fixed_group.__context.group_by.length===0;var value=(grouping_fields.length===1)?fixed_group[grouping_fields[0]]:_.map(grouping_fields,function(field){return fixed_group[field];});var grouped_on=(grouping_fields.length===1)?grouping_fields[0]:grouping_fields;this.attributes={folded:!!(fixed_group.__fold),grouped_on:grouped_on,length:group_size,value:value,has_children:!(leaf_group&&fixed_group.__context.group_by_no_leaf),aggregates:aggregates};},get:function(key){return this.attributes[key];},subgroups:function(){return this.model.query().group_by(this.model.context().group_by);},query:function(){return this.model.query.apply(this.model,arguments);}});var DataSet=Class.extend(mixins.PropertiesMixin,{init:function(parent,model,context){mixins.PropertiesMixin.init.call(this);this.setParent(parent);this.model=model;this.context=context||{};this.index=null;this._sort=[];this._model=new Model(model,context);this.orderer=new concurrency.DropMisordered();},previous:function(){this.index-=1;if(!this.ids.length){this.index=null;}else if(this.index<0){this.index=this.ids.length-1;}
return this;},next:function(){this.index+=1;if(!this.ids.length){this.index=null;}else if(this.index>=this.ids.length){this.index=0;}
return this;},select_id:function(id){var idx=this.get_id_index(id);if(idx===null){return false;}else{this.index=idx;return true;}},get_id_index:function(id){for(var i=0,ii=this.ids.length;i<ii;i++){if(id==this.ids[i]){return i;}}
return null;},read_ids:function(ids,fields,options){if(_.isEmpty(ids)){return Promise.resolve([]);}
options=options||{};var method='read';var ids_arg=ids;var context=this.get_context(options.context);if(options.check_access_rule===true){method='search_read';ids_arg=[['id','in',ids]];context=new Context(context,{active_test:false});}
return this._model.call(method,[ids_arg,fields||false],{context:context}).then(function(records){if(records.length<=1){return records;}
var indexes={};for(var i=0;i<ids.length;i++){indexes[ids[i]]=i;}
records.sort(function(a,b){return indexes[a.id]-indexes[b.id];});return records;});},read_slice:function(fields,options){var self=this;options=options||{};var query=this._model.query(fields).limit(options.limit||false).offset(options.offset||0).all();var prom=this.orderer.add(query);prom.then(function(records){self.ids=_(records).pluck('id');});return prom;},read_index:function(fields,options){options=options||{};return this.read_ids([this.ids[this.index]],fields,options).then(function(records){if(_.isEmpty(records)){return Promise.reject();}
return records[0];});},default_get:function(fields,options){options=options||{};return this._model.call('default_get',[fields],{context:this.get_context(options.context)});},create:function(data,options){var self=this;var prom=this._model.call('create',[data],{context:this.get_context()});prom.then(function(){self.trigger('dataset_changed',data,options);});return prom;},write:function(id,data,options){options=options||{};var self=this;var prom=this._model.call('write',[[id],data],{context:this.get_context(options.context)});prom.then(function(){self.trigger('dataset_changed',id,data,options);});return prom;},unlink:function(ids){var self=this;var prom=this._model.call('unlink',[ids],{context:this.get_context()});prom.then(function(){self.trigger('dataset_changed',ids);});return prom;},call:function(method,args){return this._model.call(method,args);},call_button:function(method,args){return this._model.call_button(method,args);},name_get:function(ids){return this._model.call('name_get',[ids],{context:this.get_context()});},name_search:function(name,domain,operator,limit){return this._model.call('name_search',{name:name||'',args:domain||false,operator:operator||'ilike',context:this._model.context(),limit:limit||0});},name_create:function(name,context){return this._model.call('name_create',[name],{context:this.get_context(context)});},get_context:function(request_context){return this._model.context(request_context);},sort:function(field,force_reverse){if(!field){return serialize_sort(this._sort);}
var reverse=force_reverse||(this._sort[0]===field);this._sort.splice.apply(this._sort,[0,this._sort.length].concat(_.without(this._sort,field,'-'+field)));this._sort.unshift((reverse?'-':'')+field);return undefined;},set_sort:function(fields_list){this._sort=deserialize_sort(fields_list);},size:function(){return this.ids.length;},alter_ids:function(n_ids){this.ids=n_ids;},remove_ids:function(ids){this.alter_ids(_(this.ids).difference(ids));},add_ids:function(ids,at){var args=[at,0].concat(_.difference(ids,this.ids));this.ids.splice.apply(this.ids,args);},resequence:function(ids,options){options=options||{};return session.rpc('/web/dataset/resequence',{model:this.model,ids:ids,context:pyUtils.eval('context',this.get_context(options.context)),}).then(function(results){return results;});},});var DataSetStatic=DataSet.extend({init:function(parent,model,context,ids){this._super(parent,model,context);this.ids=ids||[];},read_slice:function(fields,options){options=options||{};fields=fields||{};var offset=options.offset||0,limit=options.limit||false;var end_pos=limit&&limit!==-1?offset+limit:this.ids.length;return this.read_ids(this.ids.slice(offset,end_pos),fields,options);},set_ids:function(ids){this.ids=ids;if(ids.length===0){this.index=null;}else if(this.index>=ids.length-1){this.index=ids.length-1;}},unlink:function(ids){this.set_ids(_.without.apply(null,[this.ids].concat(ids)));this.trigger('unlink',ids);return Promise.resolve({result:true});},});var DataSetSearch=DataSet.extend({init:function(parent,model,context,domain){this._super(parent,model,context);this.domain=domain||[];this._length=null;this.ids=[];this._model=new Model(model,context,domain);},read_slice:function(fields,options){options=options||{};var self=this;var q=this._model.query(fields||false).filter(options.domain).context(options.context).offset(options.offset||0).limit(options.limit||false);q=q.order_by.apply(q,this._sort);var prom=this.orderer.add(q.all());prom.then(function(records){q.count().then(function(count){self._length=count;});self.ids=_(records).pluck('id');});return prom;},get_domain:function(other_domain){return this._model.domain(other_domain);},alter_ids:function(ids){this._super(ids);if(this.index!==null&&this.index>=this.ids.length){this.index=this.ids.length>0?this.ids.length-1:0;}},remove_ids:function(ids){var before=this.ids.length;this._super(ids);if(this._length){this._length-=(before-this.ids.length);}},add_ids:function(ids,at){var before=this.ids.length;this._super(ids,at);if(this._length){this._length+=(this.ids.length-before);}},unlink:function(ids,callback,error_callback){var self=this;var prom=this._super(ids);prom.then(function(){self.remove_ids(ids);self.trigger("dataset_changed",ids,callback,error_callback);});return prom;},size:function(){if(this._length!==null){return this._length;}
return this._super();}});var data={Query:Query,DataSet:DataSet,DataSetStatic:DataSetStatic,DataSetSearch:DataSetSearch,noDisplayContent:"<em class=\"text-warning\">"+_t("Unnamed")+"</em>",};var Model=Class.extend({init:function(name,context,domain){this.name=name;this._context=context||{};this._domain=domain||[];},get_func:function(method_name){var self=this;return function(){return self.call(method_name,_.toArray(arguments));};},query:function(fields){return new data.Query(this,fields);},domain:function(domain){if(!domain){return this._domain;}
return this._domain.concat(domain);},context:function(context){return new Context(session.user_context,this._context,context||{});},call:function(method,args,kwargs,options){args=args||[];kwargs=kwargs||{};if(!_.isArray(args)){kwargs=args;args=[];}
pyUtils.ensure_evaluated(args,kwargs);var call_kw='/web/dataset/call_kw/'+this.name+'/'+method;return session.rpc(call_kw,{model:this.name,method:method,args:args,kwargs:kwargs},options);},call_button:function(method,args){pyUtils.ensure_evaluated(args,{});var context=(args||[]).length>0?args.pop():{};return session.rpc('/web/dataset/call_button',{model:this.name,method:method,args:args||[],kwargs:{context:context},});},});return data;});;

/* /web/static/src/js/core/context.js defined in bundle 'web.assets_backend' */
odoo.define('web.Context',function(require){"use strict";var Class=require('web.Class');var pyUtils=require('web.py_utils');var Context=Class.extend({init:function(){this.__ref="compound_context";this.__contexts=[];this.__eval_context=null;var self=this;_.each(arguments,function(x){self.add(x);});},add:function(context){this.__contexts.push(context);return this;},eval:function(){return pyUtils.eval('context',this);},set_eval_context:function(evalContext){for(var key in evalContext){if(evalContext[key]instanceof moment){evalContext[key]=evalContext[key].toJSON();}}
this.__eval_context=evalContext;return this;},});return Context;});;

/* /web/static/src/js/core/data_comparison_utils.js defined in bundle 'web.assets_backend' */
odoo.define('web.dataComparisonUtils',function(require){"use strict";var fieldUtils=require('web.field_utils');var Class=require('web.Class');var DateClasses=Class.extend({init:function(dateSets){this.dateSets=dateSets;this.referenceIndex=null;for(var i=0;i<dateSets.length;i++){var dateSet=dateSets[i];if(dateSet.length&&this.referenceIndex===null){this.referenceIndex=i;}}},dateClass:function(datesetIndex,date){return this.dateSets[datesetIndex].indexOf(date);},dateClassMembers:function(dateClass){return _.uniq(_.compact(this.dateSets.map(function(dateSet){return dateSet[dateClass];})));},representative:function(dateClass,index){index=index===undefined?this.referenceIndex:index;return this.dateSets[index][dateClass];},});function computeVariation(value,comparisonValue){if(isNaN(value)||isNaN(comparisonValue)){return NaN;}
if(comparisonValue===0){if(value===0){return 0;}else if(value>0){return 1;}else{return-1;}}
return(value-comparisonValue)/Math.abs(comparisonValue);}
function renderVariation(variation,field,options){var className='o_variation';var value;if(!isNaN(variation)){if(variation>0){className+=' o_positive';}else if(variation<0){className+=' o_negative';}else{className+=' o_null';}
value=fieldUtils.format.percentage(variation,field,options);}else{value='-';}
return $('<div>',{class:className,html:value});}
function renderComparison($node,value,comparisonValue,variation,formatter,field,options){var $variation=renderVariation(variation,field,options);$node.append($variation);if(!isNaN(variation)){$node.append($('<div>',{class:'o_comparison'}).html(formatter(value,field,options)+' <span>vs</span> '+formatter(comparisonValue,field,options)));}}
return{computeVariation:computeVariation,DateClasses:DateClasses,renderComparison:renderComparison,renderVariation:renderVariation,};});;

/* /web/static/src/js/core/math_utils.js defined in bundle 'web.assets_backend' */
odoo.define('web.mathUtils',function(){"use strict";function _cartesian(){var args=Array.prototype.slice.call(arguments);if(args.length===0){return[undefined];}
var firstArray=args[0].map(function(elem){return[elem];});if(args.length===1){return firstArray;}
var productOfOtherArrays=_cartesian.apply(null,args.slice(1));var result=firstArray.reduce(function(acc,elem){return acc.concat(productOfOtherArrays.map(function(tuple){return elem.concat(tuple);}));},[]);return result;}
function cartesian(){var args=Array.prototype.slice.call(arguments);if(args.length===0){return[undefined];}else if(args.length===1){return args[0];}else{return _cartesian.apply(null,args);}}
function sections(array){var sections=[];for(var i=0;i<array.length+1;i++){sections.push(array.slice(0,i));}
return sections;}
return{cartesian:cartesian,sections:sections,};});;

/* /web/static/src/js/core/misc.js defined in bundle 'web.assets_backend' */
odoo.define('web.framework',function(require){"use strict";var core=require('web.core');var ajax=require('web.ajax');var Widget=require('web.Widget');var disableCrashManager=require('web.CrashManager').disable;var _t=core._t;var messages_by_seconds=function(){return[[0,_t("Loading...")],[20,_t("Still loading...")],[60,_t("Still loading...<br />Please be patient.")],[120,_t("Don't leave yet,<br />it's still loading...")],[300,_t("You may not believe it,<br />but the application is actually loading...")],[420,_t("Take a minute to get a coffee,<br />because it's loading...")],[3600,_t("Maybe you should consider reloading the application by pressing F5...")]];};var Throbber=Widget.extend({template:"Throbber",start:function(){this.start_time=new Date().getTime();this.act_message();},act_message:function(){var self=this;setTimeout(function(){if(self.isDestroyed())
return;var seconds=(new Date().getTime()-self.start_time)/1000;var mes;_.each(messages_by_seconds(),function(el){if(seconds>=el[0])
mes=el[1];});self.$(".oe_throbber_message").html(mes);self.act_message();},1000);},});if($.blockUI){$.blockUI.defaults.baseZ=1100;$.blockUI.defaults.message='<div class="openerp oe_blockui_spin_container" style="background-color: transparent;">';$.blockUI.defaults.css.border='0';$.blockUI.defaults.css["background-color"]='';}
function blockAccessKeys(){var elementWithAccessKey=[];elementWithAccessKey=document.querySelectorAll('[accesskey]');_.each(elementWithAccessKey,function(elem){elem.setAttribute("data-accesskey",elem.getAttribute('accesskey'));elem.removeAttribute('accesskey');});}
function unblockAccessKeys(){var elementWithDataAccessKey=[];elementWithDataAccessKey=document.querySelectorAll('[data-accesskey]');_.each(elementWithDataAccessKey,function(elem){elem.setAttribute('accesskey',elem.getAttribute('data-accesskey'));elem.removeAttribute('data-accesskey');});}
var throbbers=[];function blockUI(){var tmp=$.blockUI.apply($,arguments);var throbber=new Throbber();throbbers.push(throbber);throbber.appendTo($(".oe_blockui_spin_container"));$(document.body).addClass('o_ui_blocked');blockAccessKeys();return tmp;}
function unblockUI(){_.invoke(throbbers,'destroy');throbbers=[];$(document.body).removeClass('o_ui_blocked');unblockAccessKeys();return $.unblockUI.apply($,arguments);}
function redirect(url,wait){disableCrashManager();var load=function(){var old=""+window.location;var old_no_hash=old.split("#")[0];var url_no_hash=url.split("#")[0];location.assign(url);if(old_no_hash===url_no_hash){location.reload(true);}};var wait_server=function(){ajax.rpc("/web/webclient/version_info",{}).then(load).guardedCatch(function(){setTimeout(wait_server,250);});};if(wait){setTimeout(wait_server,1000);}else{load();}}
function Reload(parent,action){var params=action.params||{};var menu_id=params.menu_id||false;var l=window.location;var sobj=$.deparam(l.search.substr(1));if(params.url_search){sobj=_.extend(sobj,params.url_search);}
var search='?'+$.param(sobj);var hash=l.hash;if(menu_id){hash="#menu_id="+menu_id;}
var url=l.protocol+"//"+l.host+l.pathname+search+hash;core.bus.trigger('clear_cache');redirect(url,params.wait);}
core.action_registry.add("reload",Reload);function Home(parent,action){var url='/'+(window.location.search||'');redirect(url,action&&action.params&&action.params.wait);}
core.action_registry.add("home",Home);function login(){redirect('/web/login');}
core.action_registry.add("login",login);function logout(){redirect('/web/session/logout');return new Promise();}
core.action_registry.add("logout",logout);function ReloadContext(parent,action){ajax.rpc("/web/session/get_session_info",{}).then(function(){Reload(parent,action);});}
core.action_registry.add("reload_context",ReloadContext);if(!document.contains){document.contains=function contains(node){if(!(0 in arguments)){throw new TypeError('1 argument is required');}
do{if(this===node){return true;}}while(node=node&&node.parentNode);return false;};}
return{blockUI:blockUI,unblockUI:unblockUI,redirect:redirect,};});;

/* /web/static/src/js/services/crash_manager_service.js defined in bundle 'web.assets_backend' */
odoo.define('crash_manager.service',function(require){'use strict';const core=require('web.core');const CrashManager=require('web.CrashManager').CrashManager;core.serviceRegistry.add('crash_manager',CrashManager);});;

/* /web/static/src/js/services/data_manager.js defined in bundle 'web.assets_backend' */
odoo.define('web.DataManager',function(require){"use strict";var config=require('web.config');var core=require('web.core');var rpc=require('web.rpc');var session=require('web.session');var utils=require('web.utils');return core.Class.extend({init:function(){this._init_cache();core.bus.on('clear_cache',this,this.invalidate.bind(this));},_init_cache:function(){this._cache={actions:{},fields_views:{},filters:{},views:{},};},invalidate:function(){session.invalidateCacheKey('load_menus');this._init_cache();},load_action:function(action_id,additional_context){var self=this;var key=this._gen_key(action_id,additional_context||{});if(config.isDebug('assets')||!this._cache.actions[key]){this._cache.actions[key]=rpc.query({route:"/web/action/load",params:{action_id:action_id,additional_context:additional_context,},}).then(function(action){self._cache.actions[key]=action.no_cache?null:self._cache.actions[key];return action;},this._invalidate.bind(this,this._cache.actions,key));}
return this._cache.actions[key].then(function(action){return $.extend(true,{},action);});},load_views:function(params,options){var self=this;var model=params.model;var context=params.context;var views_descr=params.views_descr;var key=this._gen_key(model,views_descr,options||{},context);if(config.isDebug('assets')||!this._cache.views[key]){var filters_key;if(options.load_filters){filters_key=this._gen_key(model,options.action_id);options.load_filters=!this._cache.filters[filters_key];}
this._cache.views[key]=rpc.query({args:[],kwargs:{views:views_descr,options:options,context:context,},model:model,method:'load_views',}).then(function(result){utils.deepFreeze(result.fields);_.each(views_descr,function(view_descr){var toolbar=options.toolbar&&view_descr[1]!=='search';var fv_key=self._gen_key(model,view_descr[0],view_descr[1],toolbar,context);var fvg=result.fields_views[view_descr[1]];fvg.viewFields=fvg.fields;fvg.fields=result.fields;self._cache.fields_views[fv_key]=Promise.resolve(fvg);});if(result.filters){self._cache.filters[filters_key]=Promise.resolve(result.filters);}
return result.fields_views;},this._invalidate.bind(this,this._cache.views,key));}
return this._cache.views[key];},load_filters:function(params){var key=this._gen_key(params.modelName,params.actionId);if(config.isDebug('assets')||!this._cache.filters[key]){this._cache.filters[key]=rpc.query({args:[params.modelName,params.actionId],kwargs:{context:params.context||{},},model:'ir.filters',method:'get_filters',}).guardedCatch(this._invalidate.bind(this,this._cache.filters,key));}
return this._cache.filters[key];},create_filter:function(filter){var self=this;return rpc.query({args:[filter],model:'ir.filters',method:'create_or_replace',}).then(function(filterId){var key=[filter.model_id,filter.action_id||false,].join(',');self._invalidate(self._cache.filters,key);return filterId;});},delete_filter:function(filterId){var self=this;return rpc.query({args:[filterId],model:'ir.filters',method:'unlink',}).then(function(){self._cache.filters={};});},_gen_key:function(){return _.map(Array.prototype.slice.call(arguments),function(arg){if(!arg){return false;}
return _.isObject(arg)?JSON.stringify(arg):arg;}).join(',');},_invalidate:function(cache,key){delete cache[key];},});});odoo.define('web.data_manager',function(require){"use strict";var DataManager=require('web.DataManager');var data_manager=new DataManager();return data_manager;});;

/* /web/static/src/js/services/report_service.js defined in bundle 'web.assets_backend' */
odoo.define('web.ReportService',function(require){"use strict";var AbstractService=require('web.AbstractService');var core=require('web.core');var ReportService=AbstractService.extend({dependencies:['ajax'],checkWkhtmltopdf:function(){if(!this.wkhtmltopdfState){this.wkhtmltopdfState=this._rpc({route:'/report/check_wkhtmltopdf'});}
return this.wkhtmltopdfState;},});core.serviceRegistry.add('report',ReportService);return ReportService;});;

/* /web/static/src/js/services/session.js defined in bundle 'web.assets_backend' */
odoo.define('web.session',function(require){"use strict";var Session=require('web.Session');var modules=odoo._modules;var session=new Session(undefined,undefined,{modules:modules,use_cors:false});session.is_bound=session.session_bind();return session;});;

/* /web/static/src/js/widgets/auto_complete.js defined in bundle 'web.assets_backend' */
odoo.define('web.AutoComplete',function(require){"use strict";var Widget=require('web.Widget');return Widget.extend({template:"SearchView.autocomplete",init:function(parent,options){this._super(parent);this.$input=options.$input;this.source=options.source;this.select=options.select;this.get_search_string=options.get_search_string;this.current_result=null;this.searching=true;this.search_string='';this.current_search=null;this._isInputComposing=false;},start:function(){var self=this;this.$input.on('compositionend',function(ev){self._isInputComposing=false;});this.$input.on('compositionstart',function(ev){self._isInputComposing=true;});this.$input.on('keyup',function(ev){if(ev.which===$.ui.keyCode.RIGHT&&!self._isInputComposing){self.searching=true;ev.preventDefault();return;}
if(ev.which===$.ui.keyCode.ENTER&&!self._isInputComposing){if(self.search_string.length){self.select_item(ev);}
return;}
var search_string=self.get_search_string();if(self.search_string!==search_string){if(search_string.length){self.search_string=search_string;self.initiate_search(search_string);}else{self.close();}}});this.$input.on('keypress',function(ev){if(ev.which>31&&ev.which!==127){self.search_string=self.search_string+String.fromCharCode(ev.which);}
if(self.search_string.length){self.searching=true;var search_string=self.search_string;self.initiate_search(search_string);}else{self.close();}});this.$input.on('keydown',function(ev){if(self._isInputComposing){return;}
switch(ev.which){case $.ui.keyCode.ENTER:case $.ui.keyCode.TAB:if(self.search_string.length){self.select_item(ev);}
break;case $.ui.keyCode.DOWN:self.move('down');self.searching=false;ev.preventDefault();break;case $.ui.keyCode.UP:self.move('up');self.searching=false;ev.preventDefault();break;case $.ui.keyCode.RIGHT:if(self.$input[0].selectionStart<self.search_string.length){ev.stopPropagation();return;}
self.searching=false;var current=self.current_result;if(current&&current.expand&&!current.expanded){self.expand();self.searching=true;ev.stopPropagation();}
ev.preventDefault();break;case $.ui.keyCode.LEFT:if(self.$input[0].selectionStart>0){ev.stopPropagation();}
break;case $.ui.keyCode.ESCAPE:self.close();self.searching=false;break;}});},initiate_search:function(query){if(query===this.search_string&&query!==this.current_search){this.search(query);}},search:function(query){var self=this;this.current_search=query;this.source({term:query},function(results){if(results.length){self.render_search_results(results);self.focus_element(self.$('li:first-child'));}else{self.close();}});},render_search_results:function(results){var self=this;var $list=this.$el;$list.empty();results.forEach(function(result){var $item=self.make_list_item(result).appendTo($list);result.$el=$item;});this.el.onmousemove=function(ev){self.$('li').each(function(index,li){li.onmouseenter=self.focus_element.bind(self,$(li));});var targetFocus=ev.target.tagName==='LI'?ev.target:ev.target.closest('li');self.focus_element($(targetFocus));self.el.onmousemove=null;};this.show();},make_list_item:function(result){var self=this;var $li=$('<li>').mousedown(function(ev){if(ev.button===0){self.select(ev,{item:{facet:result.facet}});self.close();}}).data('result',result);if(result.expand){var $expand=$('<a class="o-expand" href="#">').appendTo($li);$expand.mousedown(function(ev){ev.stopPropagation();ev.preventDefault();if(result.expanded){self.fold();}else{self.expand();}});$expand.click(function(ev){ev.preventDefault();});result.expanded=false;}
if(result.indent)$li.addClass('o-indent');$li.append($('<a href="#">').html(result.label));return $li;},expand:function(){var self=this;var current_result=this.current_result;current_result.expand(this.get_search_string()).then(function(results){(results||[{label:'(no result)'}]).reverse().forEach(function(result){result.indent=true;var $li=self.make_list_item(result);current_result.$el.after($li);});self.current_result.expanded=true;self.current_result.$el.find('a.o-expand').removeClass('o-expand').addClass('o-expanded');});},fold:function(){var $next=this.current_result.$el.next();while($next.hasClass('o-indent')){$next.remove();$next=this.current_result.$el.next();}
this.current_result.expanded=false;this.current_result.$el.find('a.o-expanded').removeClass('o-expanded').addClass('o-expand');},focus_element:function($li){this.$('li').removeClass('o-selection-focus');$li.addClass('o-selection-focus');this.current_result=$li.data('result');},select_item:function(ev){this.select(ev,{item:{facet:this.current_result.facet}});this.close();},show:function(){this.$el.show();},close:function(){this.current_search=null;this.search_string='';this.searching=true;this.$el.hide();},move:function(direction){var $next;if(direction==='down'){$next=this.$('li.o-selection-focus').next();if(!$next.length)$next=this.$('li').first();}else{$next=this.$('li.o-selection-focus').prev();if(!$next.length)$next=this.$('li').last();}
this.focus_element($next);},is_expandable:function(){return!!this.$('.o-selection-focus .o-expand').length;},is_expanded:function(){return this.$el[0].style.display==="block";}});});;

/* /web/static/src/js/widgets/change_password.js defined in bundle 'web.assets_backend' */
odoo.define('web.ChangePassword',function(require){"use strict";var AbstractAction=require('web.AbstractAction');var core=require('web.core');var Dialog=require('web.Dialog');var web_client=require('web.web_client');var _t=core._t;var ChangePassword=AbstractAction.extend({template:"ChangePassword",start:function(){var self=this;web_client.set_title(_t("Change Password"));var $button=self.$('.oe_form_button');$button.appendTo(this.getParent().$footer);$button.eq(1).click(function(){self.$el.parents('.modal').modal('hide');});$button.eq(0).click(function(){self._rpc({route:'/web/session/change_password',params:{fields:$('form[name=change_password_form]').serializeArray()}}).then(function(result){if(result.error){self._display_error(result);}else{self.do_action('logout');}});});},_display_error:function(error){return new Dialog(this,{size:'medium',title:error.title,$content:$('<div>').html(error.error)}).open();},});core.action_registry.add("change_password",ChangePassword);return ChangePassword;});;

/* /web/static/src/js/tools/test_menus_loader.js defined in bundle 'web.assets_backend' */
odoo.define('web.clickEverywhere',function(require){"use strict";var ajax=require('web.ajax');function startClickEverywhere(){ajax.loadJS('web/static/src/js/tools/test_menus.js').then(function(){clickEverywhere();});}
return startClickEverywhere;});;

/* /web/static/src/js/tools/debug_manager_backend.js defined in bundle 'web.assets_backend' */
odoo.define('web.DebugManager.Backend',function(require){"use strict";var ActionManager=require('web.ActionManager');var DebugManager=require('web.DebugManager');var dialogs=require('web.view_dialogs');var startClickEverywhere=require('web.clickEverywhere');var config=require('web.config');var core=require('web.core');var Dialog=require('web.Dialog');var field_utils=require('web.field_utils');var SystrayMenu=require('web.SystrayMenu');var utils=require('web.utils');var WebClient=require('web.WebClient');var Widget=require('web.Widget');var QWeb=core.qweb;var _t=core._t;DebugManager.include({requests_clear:function(){if(!this._events){return;}
this._events=[];this.trigger('update-stats',this._events);},show_timelines:function(){if(this._overlay){this._overlay.destroy();this._overlay=null;return;}
this._overlay=new RequestsOverlay(this);this._overlay.appendTo(document.body);},update:function(tag,descriptor){return this._super().then(function(){this.$dropdown.find(".o_debug_split_assets").before(QWeb.render('WebClient.DebugManager.Backend',{manager:this,}));}.bind(this));},select_view:function(){var self=this;new dialogs.SelectCreateDialog(this,{res_model:'ir.ui.view',title:_t('Select a view'),disable_multiple_selection:true,domain:[['type','!=','qweb'],['type','!=','search']],on_selected:function(records){self._rpc({model:'ir.ui.view',method:'search_read',domain:[['id','=',records[0].id]],fields:['name','model','type'],limit:1,}).then(function(views){var view=views[0];view.type=view.type==='tree'?'list':view.type;self.do_action({type:'ir.actions.act_window',name:view.name,res_model:view.model,views:[[view.id,view.type]]});});}}).open();},perform_js_tests:function(){this.do_action({name:_t("JS Tests"),target:'new',type:'ir.actions.act_url',url:'/web/tests?mod=*'});},perform_js_mobile_tests:function(){this.do_action({name:_t("JS Mobile Tests"),target:'new',type:'ir.actions.act_url',url:'/web/tests/mobile?mod=*'});},perform_click_everywhere_test:function(){var $homeMenu=$("nav.o_main_navbar > a.o_menu_toggle.fa-th");$homeMenu.click();startClickEverywhere();},});DebugManager.include({update:function(tag,descriptor){if(tag==='action'){this._action=descriptor;}
return this._super().then(function(){this.$dropdown.find(".o_debug_leave_section").before(QWeb.render('WebClient.DebugManager.Action',{manager:this,action:this._action}));}.bind(this));},edit:function(params,evt){this.do_action({res_model:params.model,res_id:params.id,name:evt.target.text,type:'ir.actions.act_window',views:[[false,'form']],view_mode:'form',target:'new',flags:{action_buttons:true,headless:true}});},get_view_fields:function(){var model=this._action.res_model,self=this;this._rpc({model:'ir.model',method:'search',args:[[['model','=',model]]]}).then(function(ids){self.do_action({res_model:'ir.model.fields',name:_t('View Fields'),views:[[false,'list'],[false,'form']],domain:[['model_id','=',model]],type:'ir.actions.act_window',context:{'default_model_id':ids[0]}});});},manage_filters:function(){this.do_action({res_model:'ir.filters',name:_t('Manage Filters'),views:[[false,'list'],[false,'form']],type:'ir.actions.act_window',context:{search_default_my_filters:true,search_default_model_id:this._action.res_model}});},translate:function(){this._rpc({model:'ir.translation',method:'get_technical_translations',args:[this._action.res_model],}).then(this.do_action);}});DebugManager.include({start:function(){this._can_edit_views=false;return Promise.all([this._super(),this._rpc({model:'ir.ui.view',method:'check_access_rights',kwargs:{operation:'write',raise_exception:false},}).then(function(ar){this._can_edit_views=ar;}.bind(this))]);},update:function(tag,descriptor,widget){if(tag==='action'||tag==='view'){this._controller=widget;}
return this._super(tag,descriptor).then(function(){this.$dropdown.find(".o_debug_leave_section").before(QWeb.render('WebClient.DebugManager.View',{action:this._action,can_edit:this._can_edit_views,controller:this._controller,controlPanelView:this._controller&&this._controller._controlPanel,manager:this,view:this._controller&&_.findWhere(this._action.views,{type:this._controller.viewType,}),}));}.bind(this));},get_attachments:function(){var selectedIDs=this._controller.getSelectedIds();if(!selectedIDs.length){console.warn(_t("No attachment available"));return;}
this.do_action({res_model:'ir.attachment',name:_t('Manage Attachments'),views:[[false,'list'],[false,'form']],type:'ir.actions.act_window',domain:[['res_model','=',this._action.res_model],['res_id','=',selectedIDs[0]]],context:{default_res_model:this._action.res_model,default_res_id:selectedIDs[0],},});},get_metadata:function(){var self=this;var selectedIDs=this._controller.getSelectedIds();if(!selectedIDs.length){console.warn(_t("No metadata available"));return;}
this._rpc({model:this._action.res_model,method:'get_metadata',args:[selectedIDs],}).then(function(result){var metadata=result[0];metadata.creator=field_utils.format.many2one(metadata.create_uid);metadata.lastModifiedBy=field_utils.format.many2one(metadata.write_uid);var createDate=field_utils.parse.datetime(metadata.create_date);metadata.create_date=field_utils.format.datetime(createDate);var modificationDate=field_utils.parse.datetime(metadata.write_date);metadata.write_date=field_utils.format.datetime(modificationDate);var dialog=new Dialog(this,{title:_.str.sprintf(_t("Metadata (%s)"),self._action.res_model),size:'medium',$content:QWeb.render('WebClient.DebugViewLog',{perm:metadata,})});dialog.open().opened(function(){dialog.$el.on('click','a[data-action="toggle_noupdate"]',function(ev){ev.preventDefault();self._rpc({model:'ir.model.data',method:'toggle_noupdate',args:[self._action.res_model,metadata.id]}).then(function(res){dialog.close();self.get_metadata();})});})});},set_defaults:function(){var self=this;var display=function(fieldInfo,value){var displayed=value;if(value&&fieldInfo.type==='many2one'){displayed=value.data.display_name;value=value.data.id;}else if(value&&fieldInfo.type==='selection'){displayed=_.find(fieldInfo.selection,function(option){return option[0]===value;})[1];}
return[value,displayed];};var renderer=this._controller.renderer;var state=renderer.state;var fields=state.fields;var fieldsInfo=state.fieldsInfo.form;var fieldNamesInView=state.getFieldNames();var fieldNamesOnlyOnView=['message_attachment_count'];var fieldsValues=state.data;var modifierDatas={};_.each(fieldNamesInView,function(fieldName){modifierDatas[fieldName]=_.find(renderer.allModifiersData,function(modifierdata){return modifierdata.node.attrs.name===fieldName;});});this.fields=_.chain(fieldNamesInView).difference(fieldNamesOnlyOnView).map(function(fieldName){var modifierData=modifierDatas[fieldName];var invisibleOrReadOnly;if(modifierData){var evaluatedModifiers=modifierData.evaluatedModifiers[state.id];invisibleOrReadOnly=evaluatedModifiers.invisible||evaluatedModifiers.readonly;}
var fieldInfo=fields[fieldName];var valueDisplayed=display(fieldInfo,fieldsValues[fieldName]);var value=valueDisplayed[0];var displayed=valueDisplayed[1];if(!value||invisibleOrReadOnly||fieldInfo.type==='one2many'||fieldInfo.type==='many2many'||fieldInfo.type==='binary'||fieldsInfo[fieldName].options.isPassword||!_.isEmpty(fieldInfo.depends)){return false;}
return{name:fieldName,string:fieldInfo.string,value:value,displayed:displayed,};}).compact().sortBy(function(field){return field.string;}).value();var conditions=_.chain(fieldNamesInView).filter(function(fieldName){var fieldInfo=fields[fieldName];return fieldInfo.change_default;}).map(function(fieldName){var fieldInfo=fields[fieldName];var valueDisplayed=display(fieldInfo,fieldsValues[fieldName]);var value=valueDisplayed[0];var displayed=valueDisplayed[1];return{name:fieldName,string:fieldInfo.string,value:value,displayed:displayed,};}).value();var d=new Dialog(this,{title:_t("Set Default"),buttons:[{text:_t("Close"),close:true},{text:_t("Save default"),click:function(){var $defaults=d.$el.find('#formview_default_fields');var fieldToSet=$defaults.val();if(!fieldToSet){$defaults.parent().addClass('o_form_invalid');return;}
var selfUser=d.$el.find('#formview_default_self').is(':checked');var condition=d.$el.find('#formview_default_conditions').val();var value=_.find(self.fields,function(field){return field.name===fieldToSet;}).value;self._rpc({model:'ir.default',method:'set',args:[self._action.res_model,fieldToSet,value,selfUser,true,condition||false,],}).then(function(){d.close();});}}]});d.args={fields:this.fields,conditions:conditions,};d.template='FormView.set_default';d.open();},fvg:function(){var self=this;var dialog=new Dialog(this,{title:_t("Fields View Get")});dialog.opened().then(function(){$('<pre>').text(utils.json_node_to_xml(self._controller.renderer.arch,true)).appendTo(dialog.$el);});dialog.open();},});function make_context(width,height,fn){var canvas=document.createElement('canvas');canvas.width=width;canvas.height=height;canvas.style.position='relative';var ctx=canvas.getContext('2d');ctx.imageSmoothingEnabled=false;ctx.mozImageSmoothingEnabled=false;ctx.oImageSmoothingEnabled=false;ctx.webkitImageSmoothingEnabled=false;fn&&fn(ctx);return ctx;}
var RequestsOverlay=Widget.extend({template:'WebClient.DebugManager.RequestsOverlay',TRACKS:8,TRACK_WIDTH:9,events:{mousemove:function(e){this.$tooltip.hide();}},init:function(){this._super.apply(this,arguments);this._render=_.throttle(this._render.bind(this),1000/15,{leading:false});},start:function(){var _super=this._super();this.$tooltip=this.$('div.o_debug_tooltip');this.getParent().on('update-stats',this,this._render);this._render();return _super;},tooltip:function(text,start,end,x,y){var top=y-this.el.offsetTop+this.el.scrollTop+1;var left=x-this.el.offsetLeft+this.el.scrollLeft+1;this.$tooltip.css({top:top,left:left}).show()[0].innerHTML=['<p>',text,' (',(end-start),'ms)','</p>'].join('');},_render:function(){var $summary=this.$('header'),w=$summary[0].clientWidth,$requests=this.$('.o_debug_requests');$summary.find('canvas').attr('width',w);var tracks=document.getElementById('o_debug_requests_summary');_.invoke(this.getChildren(),'destroy');var requests=this.getParent()._events;var bounds=this._get_bounds(requests);var scale=w/(bounds.high-bounds.low);var track_ends=_(this.TRACKS).times(_.constant(-Infinity));var ctx=tracks.getContext('2d');ctx.lineWidth=this.TRACK_WIDTH;for(var i=0;i<requests.length;i++){var request=requests[i];var rstart=Math.floor(request[0][3]*1e3);var rend=Math.ceil(request[request.length-1][3]*1e3);for(var track=0;track<track_ends.length;++track){if(track_ends[track]<rstart){break;}}
if(track>=track_ends.length){console.warn("could not find an empty summary track");continue;}
track_ends[track]=rend;ctx.save();ctx.translate(Math.floor((rstart-bounds.low)*scale),track*(this.TRACK_WIDTH+1));this._draw_request(request,ctx,0,scale);ctx.restore();new RequestDetails(this,request,scale).appendTo($requests);}},_draw_request:function(request,to_context,step,hscale,handle_event){var surfaces={request:make_context(to_context.canvas.width,to_context.canvas.height,function(ctx){ctx.strokeStyle='blue';ctx.fillStyle='#88f';ctx.lineJoin='round';ctx.lineWidth=1;}),sql:make_context(to_context.canvas.width,to_context.canvas.height,function(ctx){ctx.strokeStyle='red';ctx.fillStyle='#f88';ctx.lineJoin='round';ctx.lineWidth=1;}),template:make_context(to_context.canvas.width,to_context.canvas.height,function(ctx){ctx.strokeStyle='green';ctx.fillStyle='#8f8';ctx.lineJoin='round';ctx.lineWidth=1;})};var stacks={},start=Math.floor(request[0][3]*1e3*hscale);var event_idx=0;var rect_width=to_context.lineWidth;for(var i=0;i<request.length;i++){var type,m,event=request[i];var tag=event[0],timestamp=Math.floor(event[3]*1e3*hscale)-start;if(m=/(\w+)-start/.exec(tag)){type=m[1];if(!(type in stacks)){stacks[type]=[];}
handle_event&&handle_event(event_idx,timestamp,event);stacks[type].push({timestamp:timestamp,idx:event_idx++});}else if(m=/(\w+)-end/.exec(tag)){type=m[1];var stack=stacks[type];var estart=stack.pop(),duration=Math.ceil(timestamp-estart.timestamp);handle_event&&handle_event(estart.idx,timestamp,event);var surface=surfaces[type];if(!surface){continue;}
var y=step*estart.idx;surface.rect(estart.timestamp+0.5,y+0.5,duration||1,rect_width);}}
var keys=['request','template','sql'];for(var j=0;j<keys.length;++j){var ctx=surfaces[keys[j]];ctx.fill();ctx.stroke();to_context.drawImage(ctx.canvas,0,0);}},_get_bounds:function(requests){var low=+Infinity;var high=-+Infinity;for(var i=0;i<requests.length;i++){var request=requests[i];for(var j=0;j<request.length;j++){var event=request[j];var timestamp=event[3];low=Math.min(low,timestamp);high=Math.max(high,timestamp);}}
return{low:Math.floor(low*1e3),high:Math.ceil(high*1e3)};}});var RequestDetails=Widget.extend({events:{click:function(){this._open=!this._open;this.render();},'mousemove canvas':function(e){e.stopPropagation();var y=e.y||e.offsetY||e.layerY;if(!y){return;}
var event=this._payloads[Math.floor(y/this._REQ_HEIGHT)];if(!event){return;}
this.getParent().tooltip(event.payload,event.start,event.stop,e.clientX,e.clientY);}},init:function(parent,request,scale){this._super.apply(this,arguments);this._request=request;this._open=false;this._scale=scale;this._REQ_HEIGHT=20;},start:function(){this.el.style.borderBottom='1px solid black';this.render();return this._super();},render:function(){var request_cell_height=this._REQ_HEIGHT,TITLE_WIDTH=200;var request=this._request;var req_start=request[0][3]*1e3;var req_duration=request[request.length-1][3]*1e3-req_start;var height=request_cell_height*(this._open?request.length/2:1);var cell_center=request_cell_height/2;var ctx=make_context(210+Math.ceil(req_duration*this._scale),height,function(ctx){ctx.lineWidth=cell_center;});this.$el.empty().append(ctx.canvas);var payloads=this._payloads=[];var text_ctx=make_context(TITLE_WIDTH,height,function(ctx){ctx.font='12px sans-serif';ctx.textAlign='right';ctx.textBaseline='middle';ctx.translate(0,cell_center);});ctx.save();ctx.translate(TITLE_WIDTH+10,((request_cell_height/4)|0));this.getParent()._draw_request(request,ctx,this._open?request_cell_height:0,this._scale,function(idx,timestamp,event){if(/-start$/g.test(event[0])){payloads.push({payload:event[2],start:timestamp,stop:null});var title=event[2];title=title.replace(/\s+$/,'');title=title.length<=50?title:('…'+title.slice(-49));while(text_ctx.measureText(title).width>200){title='…'+title.slice(2);}
text_ctx.fillText(title,TITLE_WIDTH,request_cell_height*idx);}else if(/-end$/g.test(event[0])){payloads[idx].stop=timestamp;}});ctx.restore();ctx.drawImage(text_ctx.canvas,0,0);}});if(config.isDebug()){SystrayMenu.Items.push(DebugManager);WebClient.include({current_action_updated:function(action,controller){this._super.apply(this,arguments);var debugManager=_.find(this.menu.systray_menu.widgets,function(item){return item instanceof DebugManager;});debugManager.update('action',action,controller&&controller.widget);},});ActionManager.include({getCurrentActionInDialog:function(){if(this.currentDialogController){return this.actions[this.currentDialogController.actionID];}
return null;},getCurrentControllerInDialog:function(){return this.currentDialogController;},});Dialog.include({open:function(){var self=this;this.opened(function(){setTimeout(function(){var parent=self.getParent();if(parent instanceof ActionManager){var action=parent.getCurrentActionInDialog();if(action){var controller=parent.getCurrentControllerInDialog();self.debugManager=new DebugManager(self);var $header=self.$modal.find('.modal-header:first');return self.debugManager.prependTo($header).then(function(){self.debugManager.update('action',action,controller.widget);});}}},0);});return this._super.apply(this,arguments);},});}
return DebugManager;});;

/* /web/static/src/js/tools/tools.js defined in bundle 'web.assets_backend' */
odoo.define('web.tools',function(require){"use strict";function deprecated(fn,message){return function(){console.warn(message||(fn.name+' is deprecated.'));fn.apply(this,arguments);};}
return{deprecated:deprecated,};});;

/* /web/static/src/js/widgets/data_export.js defined in bundle 'web.assets_backend' */
odoo.define('web.DataExport',function(require){"use strict";var config=require('web.config');var core=require('web.core');var Dialog=require('web.Dialog');var data=require('web.data');var framework=require('web.framework');var pyUtils=require('web.py_utils');var QWeb=core.qweb;var _t=core._t;var DataExport=Dialog.extend({template:'ExportDialog',events:{'change .o_exported_lists_select':'_onChangeExportList','change .o_import_compat input':'_onChangeCompatibleInput','click .o_add_field':'_onClickAddField','click .o_delete_exported_list':'_onClickDeleteExportListBtn','click .o_expand':'_onClickExpand','click .o_remove_field':'_onClickRemoveField','click .o_save_list .o_save_list_btn':'_onClickSaveListBtn','click .o_save_list .o_cancel_list_btn':'_resetTemplateField','click .o_export_tree_item':'_onClickTreeItem','dblclick .o_export_tree_item:not(.haschild)':'_onDblclickTreeItem','keydown .o_export_tree_item':'_onKeydownTreeItem','keydown .o_save_list_name':'_onKeydownSaveList','input .o_export_search_input':'_onSearchInput',},init:function(parent,record,defaultExportFields,groupedBy,activeDomain,idsToExport){var options={title:_t("Export Data"),buttons:[{text:_t("Export"),click:this._onExportData,classes:'btn-primary'},{text:_t("Close"),close:true},],};this._super(parent,options);this.records={};this.record=record;this.defaultExportFields=defaultExportFields;this.groupby=groupedBy;this.exports=new data.DataSetSearch(this,'ir.exports',this.record.getContext());this.rowIndex=0;this.rowIndexLevel=0;this.isCompatibleMode=false;this.domain=activeDomain||this.record.domain;this.idsToExport=activeDomain?false:idsToExport;},start:function(){var self=this;var proms=[this._super.apply(this,arguments)];this.$modal.find('.modal-content').css('height','100%');this.$fieldsList=this.$('.o_fields_list');proms.push(this._rpc({route:'/web/export/formats'}).then(doSetupExportFormats));proms.push(this._onChangeCompatibleInput().then(function(){_.each(self.defaultExportFields,function(field){var record=self.records[field];self._addField(record.id,record.string);});}));proms.push(this._showExportsList());this.opened().then(function(){self.$('.o_fields_list').sortable({axis:'y',handle:'.o_short_field',forcePlaceholderSize:true,placeholder:'o-field-placeholder',update:self.proxy('_resetTemplateField'),});});return Promise.all(proms);function doSetupExportFormats(formats){var $fmts=self.$('.o_export_format');_.each(formats,function(format){var $radio=$('<input/>',{type:'radio',value:format.tag,name:'o_export_format_name',class:'form-check-input',id:'o_radio'+format.label});var $label=$('<label/>',{html:format.label,class:'form-check-label',for:'o_radio'+format.label});if(format.error){$radio.prop('disabled',true);$label.html(_.str.sprintf("%s — %s",format.label,format.error));}
$fmts.append($("<div class='radio form-check form-check-inline pl-4'></div>").append($radio,$label));});self.$exportFormatInputs=$fmts.find('input');self.$exportFormatInputs.filter(':enabled').first().prop('checked',true);}},export(){let exportedFields=this.defaultExportFields.map(field=>({name:field,label:this.record.fields[field].string,}));this._exportData(exportedFields,'xlsx',false);},_addField:function(fieldID,label){var $fieldList=this.$('.o_fields_list');if(!$fieldList.find(".o_export_field[data-field_id='"+fieldID+"']").length){$fieldList.append($('<li>',{'class':'o_export_field','data-field_id':fieldID}).append($('<span>',{'class':"fa fa-arrows o_short_field mx-1"}),label,$('<span>',{'class':'fa fa-trash m-1 pull-right o_remove_field','title':_t("Remove field")})));}},_exportData(exportedFields,exportFormat,idsToExport){if(_.isEmpty(exportedFields)){Dialog.alert(this,_t("Please select fields to export..."));return;}
if(this.isCompatibleMode){exportedFields.unshift({name:'id',label:_t('External ID')});}
framework.blockUI();this.getSession().get_file({url:'/web/export/'+exportFormat,data:{data:JSON.stringify({model:this.record.model,fields:exportedFields,ids:idsToExport,domain:this.domain,groupby:this.groupby,context:pyUtils.eval('contexts',[this.record.getContext()]),import_compat:this.isCompatibleMode,})},complete:framework.unblockUI,error:(error)=>this.call('crash_manager','rpc_error',error),});},_getFields:function(){var exportFields=this.$('.o_export_field').map(function(){return $(this).data('field_id');}).get();if(exportFields.length===0){Dialog.alert(this,_t("Please select fields to save export list..."));}
return exportFields;},_onExpandAction:function(record){var self=this;if(!record.children){return;}
var model=record.params.model;var prefix=record.params.prefix;var name=record.params.name;var excludeFields=[];if(record.relation_field){excludeFields.push(record.relation_field);}
if(!record.loaded){this._rpc({route:'/web/export/get_fields',params:{model:model,prefix:prefix,parent_name:name,import_compat:this.isCompatibleMode,parent_field_type:record.field_type,parent_field:record.params.parent_field,exclude:excludeFields,},}).then(function(results){record.loaded=true;self._onShowData(results,record.id);});}else{this._showContent(record.id);}},_onShowData:function(records,expansion){var self=this;if(expansion){this.$('.o_export_tree_item[data-id="'+expansion+'"]').addClass('show').find('.o_expand_parent').toggleClass('fa-chevron-right fa-chevron-down').next().after(QWeb.render('Export.TreeItems',{fields:records,debug:config.isDebug()}));}else{this.$('.o_left_field_panel').empty().append($('<div/>').addClass('o_field_tree_structure').append(QWeb.render('Export.TreeItems',{fields:records,debug:config.isDebug()})));}
_.extend(this.records,_.object(_.pluck(records,'id'),records));this.$records=this.$('.o_export_tree_item');this.$records.each(function(i,el){var $el=$(el);$el.find('.o_tree_column').first().toggleClass('o_required',!!self.records[$el.data('id')].required);});this.$('#o-export-search-filter').val('');},_addNewTemplate:function(){this.$('.o_exported_lists').addClass('d-none');this.$(".o_save_list").show().find(".o_save_list_name").val("").focus();},_resetTemplateField:function(){this.$('.o_exported_lists_select').val("");this.$('.o_delete_exported_list').addClass('d-none');this.$('.o_exported_lists').removeClass('d-none');this.$(".o_save_list").hide().find(".o_save_list_name").val("");},_showContent:function(fieldID){var $item=this.$('.o_export_tree_item[data-id="'+fieldID+'"]');$item.toggleClass('show');var isOpen=$item.hasClass('show');$item.children('.o_expand_parent').toggleClass('fa-chevron-down',!!isOpen).toggleClass('fa-chevron-right',!isOpen);var $childField=$item.find('.o_export_tree_item');var childLength=(fieldID.split('/')).length+1;for(var i=0;i<$childField.length;i++){var $child=$childField.eq(i);if(!isOpen){$child.hide();}else if(childLength===$childField.eq(i).data('id').split('/').length){if($child.hasClass('show')){$child.removeClass('show');$child.children('.o_expand_parent').removeClass('fa-chevron-down').addClass('fa-chevron-right');}
$child.show();}}
this.$('#o-export-search-filter').val('');},_showExportsList:function(){var self=this;if(this.$('.o_exported_lists_select').is(':hidden')){this.$('.o_exported_lists').show();return Promise.resolve();}
return this._rpc({model:'ir.exports',method:'search_read',fields:['name'],domain:[['resource','=',this.record.model]]}).then(function(exportList){self.$('.o_exported_lists').append(QWeb.render('Export.SavedList',{existing_exports:exportList,}));});},_onChangeExportList:function(){var self=this;var exportID=this.$('.o_exported_lists_select option:selected').val();this.$('.o_delete_exported_list').toggleClass('d-none',!exportID);if(exportID&&exportID!=='new_template'){this.$('.o_fields_list').empty();this._rpc({route:'/web/export/namelist',params:{model:this.record.model,export_id:parseInt(exportID,10),},}).then(function(fieldList){_.each(fieldList,function(field){self._addField(field.name,field.label);});});}else if(exportID==='new_template'){self._addNewTemplate();}},_onChangeCompatibleInput:function(){var self=this;this.isCompatibleMode=this.$('.o_import_compat input').is(':checked');this.$('.o_field_tree_structure').remove();this._resetTemplateField();return this._rpc({route:'/web/export/get_fields',params:{model:this.record.model,import_compat:this.isCompatibleMode,},}).then(function(records){var compatibleFields=_.map(records,function(record){return record.id;});self._onShowData(records);self.$('.o_fields_list').empty();_.chain(self.$fieldsList.find('.o_export_field')).map(function(field){return $(field).data('field_id');}).union(self.defaultExportFields).intersection(compatibleFields).each(function(field){var record=_.find(records,function(rec){return rec.id===field;});self._addField(record.id,record.string);});self.$('#o-export-search-filter').val('');});},_onClickAddField:function(ev){ev.stopPropagation();var $field=$(ev.currentTarget);this._resetTemplateField();this._addField($field.closest('.o_export_tree_item').data('id'),$field.closest('.o_tree_column').text());},_onClickDeleteExportListBtn:function(){var self=this;var selectExp=this.$('.o_exported_lists_select option:selected');var options={confirm_callback:function(){if(selectExp.val()){self.exports.unlink([parseInt(selectExp.val(),10)]);selectExp.remove();if(self.$('.o_exported_lists_select option').length<=1){self.$('.o_exported_lists').hide();}}}};Dialog.confirm(this,_t("Do you really want to delete this export template?"),options);},_onClickExpand:function(ev){this._onExpandAction(this.records[$(ev.target).closest('.o_export_tree_item').data('id')]);},_onClickRemoveField:function(ev){$(ev.currentTarget).closest('.o_export_field').remove();this._resetTemplateField();},_onClickSaveListBtn:function(){var self=this;var $saveList=this.$('.o_save_list');var value=$saveList.find('input').val();if(!value){Dialog.alert(this,_t("Please enter save field list name"));return;}
var fields=this._getFields();if(fields.length===0){return;}
$saveList.hide();this.exports.create({name:value,resource:this.record.model,export_fields:_.map(fields,function(field){return[0,0,{name:field}];}),}).then(function(exportListID){if(!exportListID){return;}
var $select=self.$('.o_exported_lists_select');if($select.length===0||$select.is(':hidden')){self._showExportsList();}
$select.append(new Option(value,exportListID));self.$('.o_exported_lists').removeClass('d-none');$select.val(exportListID);});},_onClickTreeItem:function(ev){ev.stopPropagation();var $elem=$(ev.currentTarget);var rowIndex=$elem.prevAll('.o_export_tree_item').length;var rowIndexLevel=$elem.parents('.o_export_tree_item').length;if(ev.shiftKey&&rowIndexLevel===this.rowIndexLevel){var minIndex=Math.min(rowIndex,this.rowIndex);var maxIndex=Math.max(rowIndex,this.rowIndex);this.$records.filter(function(){return($elem.parent()[0]===$(this).parent()[0]);}).slice(minIndex,maxIndex+1).addClass('o_selected').filter(':not(:last)').each(processChildren);}
this.rowIndex=rowIndex;this.rowIndexLevel=rowIndexLevel;if(ev.ctrlKey){$elem.toggleClass('o_selected').focus();}else if(ev.shiftKey){$elem.addClass('o_selected').focus();}else{this.$('.o_selected').removeClass('o_selected');$elem.addClass('o_selected').focus();}
function processChildren(){var $child=$(this);if($child.hasClass('show')){$child.children('.o_export_tree_item').addClass('o_selected').each(processChildren);}}},_onExportData(){let exportedFields=this.$('.o_export_field').map((i,field)=>({name:$(field).data('field_id'),label:field.textContent,})).get();let exportFormat=this.$exportFormatInputs.filter(':checked').val();this._exportData(exportedFields,exportFormat,this.idsToExport);},_onDblclickTreeItem:function(ev){var self=this;this._resetTemplateField();function addElement(el){self._addField(el.getAttribute('data-id'),el.querySelector('.o_tree_column').textContent);}
var target=ev.currentTarget;target.classList.remove('o_selected');[].reverse.call($(target).parents('.o_export_tree_item')).each(function(){addElement(this);});addElement(target);},_onKeydownSaveList:function(ev){if(ev.keyCode===$.ui.keyCode.ENTER){this._onClickSaveListBtn();}},_onKeydownTreeItem:function(ev){ev.stopPropagation();var $el=$(ev.currentTarget);var record=this.records[$el.data('id')];switch(ev.keyCode||ev.which){case $.ui.keyCode.LEFT:if($el.hasClass('show')){this._onExpandAction(record);}
break;case $.ui.keyCode.RIGHT:if(!$el.hasClass('show')){this._onExpandAction(record);}
break;case $.ui.keyCode.UP:var $prev=$el.prev('.o_export_tree_item');if($prev.length===1){while($prev.hasClass('show')){$prev=$prev.children('.o_export_tree_item').last();}}else{$prev=$el.parent('.o_export_tree_item');if($prev.length===0){break;}}
$el.removeClass('o_selected').blur();$prev.addClass("o_selected").focus();break;case $.ui.keyCode.DOWN:var $next;if($el.hasClass('show')){$next=$el.children('.o_export_tree_item').first();}else{$next=$el.next('.o_export_tree_item');if($next.length===0){$next=$el.parent('.o_export_tree_item').next('.o_export_tree_item');if($next.length===0){break;}}}
$el.removeClass('o_selected').blur();$next.addClass('o_selected').focus();break;}},_onSearchInput:function(ev){var searchText=$(ev.currentTarget).val().trim().toUpperCase();if(!searchText){this.$('.o_no_match').remove();this.$(".o_export_tree_item").show();this.$(".o_export_tree_item.haschild:not(.show) .o_export_tree_item").hide();return;}
var matchItems=this.$(".o_tree_column").filter(function(){var title=this.getAttribute('title');return this.innerText.toUpperCase().indexOf(searchText)>=0||title&&title.toUpperCase().indexOf(searchText)>=0;}).parent();this.$(".o_export_tree_item").hide();if(matchItems.length){this.$('.o_no_match').remove();_.each(matchItems,function(col){var $col=$(col);$col.show();$col.parents('.haschild.show').show();if(!$col.parent().hasClass('show')&&!$col.parent().hasClass('o_field_tree_structure')){$col.hide();}});}else if(!this.$('.o_no_match').length){this.$(".o_field_tree_structure").append($("<h3/>",{class:'text-center text-muted mt-5 o_no_match',text:_t("No match found.")}));}},});return DataExport;});;

/* /web/static/src/js/widgets/date_picker.js defined in bundle 'web.assets_backend' */
odoo.define('web.datepicker',function(require){"use strict";var core=require('web.core');var field_utils=require('web.field_utils');var time=require('web.time');var Widget=require('web.Widget');var _t=core._t;var DateWidget=Widget.extend({template:"web.datepicker",type_of_date:"date",events:{'error.datetimepicker':'errorDatetime','change .o_datepicker_input':'changeDatetime','click input':'_onInputClicked','input input':'_onInput','keydown':'_onKeydown','show.datetimepicker':'_onDateTimePickerShow','hide.datetimepicker':'_onDateTimePickerHide',},init:function(parent,options){this._super.apply(this,arguments);this.name=parent.name;this.options=_.extend({locale:moment.locale(),format:this.type_of_date==='datetime'?time.getLangDatetimeFormat():time.getLangDateFormat(),minDate:moment({y:1900}),maxDate:moment().add(200,"y"),useCurrent:false,icons:{time:'fa fa-clock-o',date:'fa fa-calendar',up:'fa fa-chevron-up',down:'fa fa-chevron-down',previous:'fa fa-chevron-left',next:'fa fa-chevron-right',today:'fa fa-calendar-check-o',clear:'fa fa-delete',close:'fa fa-check primary',},calendarWeeks:true,buttons:{showToday:false,showClear:false,showClose:false,},widgetParent:'body',keyBinds:null,},options||{});this.__libInput=0;this.__isOpen=false;},start:function(){this.$input=this.$('input.o_datepicker_input');this.__libInput++;this.$el.datetimepicker(this.options);this.__libInput--;this._setReadonly(false);},destroy:function(){if(this._onScroll){window.removeEventListener('scroll',this._onScroll,true);}
this.__libInput++;this.$el.datetimepicker('destroy');this.__libInput--;this._super.apply(this,arguments);},changeDatetime:function(){if(this.__libInput>0){if(this.options.warn_future){this._warnFuture(this.getValue());}
this.trigger("datetime_changed");return;}
var oldValue=this.getValue();if(this.isValid()){this._setValueFromUi();var newValue=this.getValue();var hasChanged=!oldValue!==!newValue;if(oldValue&&newValue){var formattedOldValue=oldValue.format(time.getLangDatetimeFormat());var formattedNewValue=newValue.format(time.getLangDatetimeFormat());if(formattedNewValue!==formattedOldValue){hasChanged=true;}}
if(hasChanged){if(this.options.warn_future){this._warnFuture(newValue);}
this.trigger("datetime_changed");}}else{var formattedValue=oldValue?this._formatClient(oldValue):null;this.$input.val(formattedValue);}},errorDatetime:function(e){return false;},focus:function(){this.__libInput++;this.$input.focus();this.__libInput--;},getValue:function(){var value=this.get('value');return value&&value.clone();},isValid:function(){var value=this.$input.val();if(value===""){return true;}else{try{this._parseClient(value);return true;}catch(e){return false;}}},maxDate:function(date){this.__libInput++;this.$el.datetimepicker('maxDate',date||null);this.__libInput--;},minDate:function(date){this.__libInput++;this.$el.datetimepicker('minDate',date||null);this.__libInput--;},setValue:function(value){this.set({'value':value});var formatted_value=value?this._formatClient(value):null;this.$input.val(formatted_value);this.__libInput++;this.$el.datetimepicker('date',value||null);this.__libInput--;},_warnFuture:function(currentDate){if(!this.$warning){this.$warning=$('<span>',{class:'fa fa-exclamation-triangle o_tz_warning o_datepicker_warning',});var title=_t("This date is on the future. Make sure it is what you expected.");this.$warning.attr('title',title);this.$input.after(this.$warning);}
if(currentDate&&currentDate.isAfter(moment())){this.$warning.show();}else{this.$warning.hide();}},_formatClient:function(v){return field_utils.format[this.type_of_date](v,null,{timezone:false});},_parseClient:function(v){return field_utils.parse[this.type_of_date](v,null,{timezone:false});},_setReadonly:function(readonly){this.readonly=readonly;this.$input.prop('readonly',this.readonly);},_setValueFromUi:function(){var value=this.$input.val()||false;this.setValue(this._parseClient(value));},_onDateTimePickerHide:function(){this.__isOpen=false;this.changeDatetime();if(this._onScroll){window.removeEventListener('scroll',this._onScroll,true);}
this.changeDatetime();},_onDateTimePickerShow:function(){this.__isOpen=true;if(this.$input.val().length!==0&&this.isValid()){this.$input.select();}
var self=this;this._onScroll=function(ev){if(ev.target!==self.$input.get(0)){self.__libInput++;self.$el.datetimepicker('hide');self.__libInput--;}};window.addEventListener('scroll',this._onScroll,true);},_onKeydown:function(ev){if(ev.which===$.ui.keyCode.ESCAPE){if(this.__isOpen){ev.stopImmediatePropagation();this.__libInput++;this.$el.datetimepicker('hide');this.__libInput--;this.focus();}}},_onInput:function(ev){if(this.__libInput>0){ev.stopImmediatePropagation();}},_onInputClicked:function(){this.__libInput++;this.$el.datetimepicker('toggle');this.__libInput--;this.focus();},});var DateTimeWidget=DateWidget.extend({type_of_date:"datetime",init:function(parent,options){this._super(parent,_.extend({buttons:{showToday:false,showClear:false,showClose:true,},},options||{}));},});return{DateWidget:DateWidget,DateTimeWidget:DateTimeWidget,};});;

/* /web/static/src/js/widgets/domain_selector_dialog.js defined in bundle 'web.assets_backend' */
odoo.define("web.DomainSelectorDialog",function(require){"use strict";var core=require("web.core");var Dialog=require("web.Dialog");var DomainSelector=require("web.DomainSelector");var _t=core._t;return Dialog.extend({init:function(parent,model,domain,options){this.model=model;this.options=_.extend({readonly:true,debugMode:false,},options||{});var buttons;if(this.options.readonly){buttons=[{text:_t("Close"),close:true},];}else{buttons=[{text:_t("Save"),classes:"btn-primary",close:true,click:function(){this.trigger_up("domain_selected",{domain:this.domainSelector.getDomain()});}},{text:_t("Discard"),close:true},];}
this._super(parent,_.extend({},{title:_t("Domain"),buttons:buttons,},options||{}));this.domainSelector=new DomainSelector(this,model,domain,options);},start:function(){var self=this;this.opened().then(function(){self.$el.css('overflow','visible').closest('.modal-dialog').css('height','auto');});return Promise.all([this._super.apply(this,arguments),this.domainSelector.appendTo(this.$el)]);},});});;

/* /web/static/src/js/widgets/domain_selector.js defined in bundle 'web.assets_backend' */
odoo.define("web.DomainSelector",function(require){"use strict";var core=require("web.core");var datepicker=require("web.datepicker");var Domain=require("web.Domain");var field_utils=require("web.field_utils");var ModelFieldSelector=require("web.ModelFieldSelector");var Widget=require("web.Widget");var _t=core._t;var _lt=core._lt;var operator_mapping={"=":"=","!=":_lt("is not ="),">":">","<":"<",">=":">=","<=":"<=","ilike":_lt("contains"),"not ilike":_lt("does not contain"),"in":_lt("in"),"not in":_lt("not in"),"child_of":_lt("child of"),"parent_of":_lt("parent of"),"like":"like","not like":"not like","=like":"=like","=ilike":"=ilike","set":_lt("is set"),"not set":_lt("is not set"),};var DomainNode=Widget.extend({events:{"click .o_domain_add_node_button":"_onAddButtonClick","click .o_domain_delete_node_button":"_onDeleteButtonClick","mouseenter button":"_onButtonEntered","mouseleave button":"_onButtonLeft",},init:function(parent,model,domain,options){this._super.apply(this,arguments);this.model=model;this.options=_.extend({readonly:true,operators:null,debugMode:false,},options||{});this.readonly=this.options.readonly;this.debug=this.options.debugMode;},isValid:function(){},getDomain:function(){},_onAddButtonClick:function(e){e.preventDefault();e.stopPropagation();this.trigger_up("add_node_clicked",{newBranch:!!$(e.currentTarget).data("branch"),child:this});},_onDeleteButtonClick:function(e){e.preventDefault();e.stopPropagation();this.trigger_up("delete_node_clicked",{child:this});},_onButtonEntered:function(e){e.preventDefault();e.stopPropagation();var $target=$(e.currentTarget);this.$el.toggleClass("o_hover_btns",$target.hasClass("o_domain_delete_node_button"));this.$el.toggleClass("o_hover_add_node",$target.hasClass("o_domain_add_node_button"));this.$el.toggleClass("o_hover_add_inset_node",!!$target.data("branch"));},_onButtonLeft:function(e){e.preventDefault();e.stopPropagation();this.$el.removeClass("o_hover_btns o_hover_add_node o_hover_add_inset_node");},});var DomainTree=DomainNode.extend({template:"DomainTree",events:_.extend({},DomainNode.prototype.events,{"click .o_domain_tree_operator_selector .dropdown-item":"_onOperatorChange",}),custom_events:{"add_node_clicked":"_onNodeAdditionAsk","delete_node_clicked":"_onNodeDeletionAsk",},init:function(parent,model,domain){this._super.apply(this,arguments);var parsedDomain=this._parseDomain(domain);if(parsedDomain){this._initialize(parsedDomain);}},start:function(){this._postRender();return Promise.all([this._super.apply(this,arguments),this._renderChildrenTo(this.$childrenContainer)]);},isValid:function(){for(var i=0;i<this.children.length;i++){var cValid=this.children[i].isValid();if(!cValid){return cValid;}}
return this._isValid;},getDomain:function(){var childDomains=[];var nbChildren=0;_.each(this.children,function(child){var childDomain=child.getDomain();if(childDomain.length){nbChildren++;childDomains=childDomains.concat(child.getDomain());}});var nbChildRequired=this.operator==="!"?1:2;var operators=_.times(nbChildren-nbChildRequired+1,_.constant(this.operator));return operators.concat(childDomains);},_addChild:function(domain,afterNode){var i=afterNode?_.indexOf(this.children,afterNode):this.children.length;if(i<0)return false;this.children.splice(i+1,0,instantiateNode(this,this.model,domain,this.options));this.trigger_up("domain_changed",{child:this});return true;},_addFlattenedChildren:function(domain){var node=instantiateNode(this,this.model,domain,this.options);if(node===null){return;}
if(!node.children||node.operator!==this.operator){this.children.push(node);return;}
_.each(node.children,(function(child){child.setParent(this);this.children.push(child);}).bind(this));node.destroy();},_changeOperator:function(operator,silent){this.operator=operator;if(!silent)this.trigger_up("domain_changed",{child:this});},_initialize:function(domain){this._isValid=true;this.operator=domain[0];this.children=[];if(domain.length<=1){return;}
var nbLeafsToFind=1;for(var i=1;i<domain.length;i++){if(domain[i]==="&"||domain[i]==="|"){nbLeafsToFind++;}else if(domain[i]!=="!"){nbLeafsToFind--;}
if(!nbLeafsToFind){var partLeft=domain.slice(1,i+1);var partRight=domain.slice(i+1);if(partLeft.length){this._addFlattenedChildren(partLeft);}
if(partRight.length){this._addFlattenedChildren(partRight);}
break;}}
this._isValid=(nbLeafsToFind===0);if(this.operator==="!"){this.children[0].noControlPanel=true;}},_postRender:function(){this.$childrenContainer=this.$("> .o_domain_node_children_container");},_removeChild:function(oldChild){var i=_.indexOf(this.children,oldChild);if(i<0)return false;this.children[i].destroy();this.children.splice(i,1);this.trigger_up("domain_changed",{child:this});return true;},_renderChildrenTo:function($to){var $div=$("<div/>");return Promise.all(_.map(this.children,(function(child){return child.appendTo($div);}).bind(this))).then((function(){_.each(this.children,function(child){child.$el.appendTo($to);});}).bind(this));},_parseDomain:function(domain){var parsedDomain=false;try{parsedDomain=Domain.prototype.stringToArray(domain);this.invalidDomain=false;}catch(err){this.invalidDomain=true;this.children=[];}
return parsedDomain;},_onOperatorChange:function(e){e.preventDefault();e.stopPropagation();this._changeOperator($(e.target).data("operator"));},_onNodeAdditionAsk:function(e){var domain=this.options.default||[["id","=",1]];if(e.data.newBranch){domain=[this.operator==="&"?"|":"&"].concat(domain).concat(domain);}
if(this._addChild(domain,e.data.child)){e.stopPropagation();}},_onNodeDeletionAsk:function(e){if(this._removeChild(e.data.child)){e.stopPropagation();}},});var DomainSelector=DomainTree.extend({template:"DomainSelector",events:_.extend({},DomainTree.prototype.events,{"click .o_domain_add_first_node_button":"_onAddFirstButtonClick","change .o_domain_debug_input":"_onDebugInputChange",}),custom_events:_.extend({},DomainTree.prototype.custom_events,{domain_changed:"_onDomainChange",}),start:function(){var self=this;return this._super.apply(this,arguments).then(function(){if(self.invalidDomain){var msg=_t("This domain is not supported.");self.$el.html(msg);}});},setDomain:function(domain){if(domain===Domain.prototype.arrayToString(this.getDomain())){return Promise.resolve();}
var parsedDomain=this._parseDomain(domain);if(parsedDomain){return this._redraw(parsedDomain);}},_initialize:function(domain){if(domain.length>1){Domain.prototype.normalizeArray(domain);}else{domain=["&"].concat(domain);}
return this._super(domain);},_postRender:function(){this._super.apply(this,arguments);this.$debugInput=this.$(".o_domain_debug_input");if(this.$debugInput.length){this.$debugInput.val(Domain.prototype.arrayToString(this.getDomain()));}
if(!this._isValid){this.do_warn(_t("Domain error"),_t("The domain you entered is not properly formed"));}},_redraw:function(domain){var oldChildren=this.children.slice();this._initialize(domain||this.getDomain());return this._renderChildrenTo($("<div/>")).then((function(){_.each(oldChildren,function(child){child.destroy();});this.renderElement();this._postRender();_.each(this.children,(function(child){child.$el.appendTo(this.$childrenContainer);}).bind(this));}).bind(this));},_onAddFirstButtonClick:function(){this._addChild(this.options.default||[["id","=",1]]);},_onDebugInputChange:function(e){var domain;try{domain=Domain.prototype.stringToArray($(e.currentTarget).val());}catch(err){this.do_warn(_t("Syntax error"),_t("The domain you entered is not properly formed"));return;}
this._redraw(domain).then((function(){this.trigger_up("domain_changed",{child:this,alreadyRedrawn:true});}).bind(this));},_onDomainChange:function(e){if(!e.data.alreadyRedrawn){this._redraw();}},});var DomainLeaf=DomainNode.extend({template:"DomainLeaf",events:_.extend({},DomainNode.prototype.events,{"change .o_domain_leaf_operator_select":"_onOperatorSelectChange","change .o_domain_leaf_value_input":"_onValueInputChange","click .o_domain_leaf_value_add_tag_button":"on_add_tag","keyup .o_domain_leaf_value_tags input":"on_add_tag","click .o_domain_leaf_value_remove_tag_button":"on_remove_tag",}),custom_events:{"field_chain_changed":"_onFieldChainChange",},init:function(parent,model,domain,options){this._super.apply(this,arguments);var currentDomain=Domain.prototype.stringToArray(domain);this.chain=currentDomain[0][0];this.operator=currentDomain[0][1];this.value=currentDomain[0][2];this.operator_mapping=operator_mapping;},willStart:function(){var defs=[this._super.apply(this,arguments)];this.fieldSelector=new ModelFieldSelector(this,this.model,this.chain!==undefined?this.chain.toString().split("."):[],this.options);defs.push(this.fieldSelector.appendTo($("<div/>")).then((function(){var wDefs=[];if(!this.readonly){var selectedField=this.fieldSelector.getSelectedField()||{};this.operators=this._getOperatorsFromType(selectedField.type);if(_.contains(["child_of","parent_of","like","not like","=like","=ilike"],this.operator)){this.operators[this.operator]=operator_mapping[this.operator];}else if(!this.operators[this.operator]){this.operators[this.operator]="?";}
this.selectionChoices=null;if(selectedField.type==="boolean"){this.selectionChoices=[["1",_t("set (true)")],["0",_t("not set (false)")]];}else if(selectedField.type==="selection"){this.selectionChoices=selectedField.selection;}
this.displayValue=this.value;try{if(selectedField&&!selectedField.relation&&!_.isArray(this.value)){this.displayValue=field_utils.format[selectedField.type](this.value,selectedField);}}catch(err){}
this.displayOperator=this.operator;if(selectedField.type==="boolean"){this.displayValue=this.value?"1":"0";}else if((this.operator==="!="||this.operator==="=")&&this.value===false){this.displayOperator=this.operator==="!="?"set":"not set";}
if(_.contains(["date","datetime"],selectedField.type)){this.valueWidget=new(selectedField.type==="datetime"?datepicker.DateTimeWidget:datepicker.DateWidget)(this);wDefs.push(this.valueWidget.appendTo("<div/>").then((function(){this.valueWidget.$el.addClass("o_domain_leaf_value_input");this.valueWidget.setValue(moment(this.value));this.valueWidget.on("datetime_changed",this,function(){this._changeValue(this.valueWidget.getValue());});}).bind(this)));}
return Promise.all(wDefs);}}).bind(this)));return Promise.all(defs);},start:function(){this.fieldSelector.$el.prependTo(this.$("> .o_domain_leaf_info, > .o_domain_leaf_edition"));if(!this.readonly&&this.valueWidget){this.$(".o_domain_leaf_value_input").replaceWith(this.valueWidget.$el);}
return this._super.apply(this,arguments);},isValid:function(){return this.fieldSelector&&this.fieldSelector.isValid();},getDomain:function(){return[[this.chain,this.operator,this.value]];},_changeFieldChain:function(chain,silent){this.chain=chain.join(".");this.fieldSelector.setChain(chain).then((function(){if(!this.fieldSelector.isValid())return;var selectedField=this.fieldSelector.getSelectedField()||{};var operators=this._getOperatorsFromType(selectedField.type);if(operators[this.operator]===undefined){this._changeOperator("=",true);}
this._changeValue(this.value,true);if(!silent)this.trigger_up("domain_changed",{child:this});}).bind(this));},_changeOperator:function(operator,silent){this.operator=operator;if(_.contains(["set","not set"],this.operator)){this.operator=this.operator==="not set"?"=":"!=";this.value=false;}else if(_.contains(["in","not in"],this.operator)){this.value=_.isArray(this.value)?this.value:this.value?(""+this.value).split(","):[];}else{if(_.isArray(this.value)){this.value=this.value.join(",");}
this._changeValue(this.value,true);}
if(!silent)this.trigger_up("domain_changed",{child:this});},_changeValue:function(value,silent){var couldNotParse=false;var selectedField=this.fieldSelector.getSelectedField()||{};try{this.value=field_utils.parse[selectedField.type](value,selectedField);}catch(err){this.value=value;couldNotParse=true;}
if(selectedField.type==="boolean"){if(!_.isBoolean(this.value)){this.value=!!parseFloat(this.value);}}else if(selectedField.type==="selection"){if(!_.some(selectedField.selection,(function(option){return option[0]===this.value;}).bind(this))){this.value=selectedField.selection[0][0];}}else if(_.contains(["date","datetime"],selectedField.type)){if(couldNotParse||_.isBoolean(this.value)){this.value=field_utils.parse[selectedField.type](field_utils.format[selectedField.type](moment())).toJSON();}else{this.value=this.value.toJSON();}}else{if(_.isBoolean(this.value)){this.value="";}else if(_.isObject(this.value)&&!_.isArray(this.value)){this.value=this.value.id||value||"";}}
if(!silent)this.trigger_up("domain_changed",{child:this});},_getOperatorsFromType:function(type){var operators={};switch(type){case"boolean":operators={"=":_t("is"),"!=":_t("is not"),};break;case"char":case"text":case"html":operators=_.pick(operator_mapping,"=","!=","ilike","not ilike","set","not set","in","not in");break;case"many2many":case"one2many":case"many2one":operators=_.pick(operator_mapping,"=","!=","ilike","not ilike","set","not set");break;case"integer":case"float":case"monetary":operators=_.pick(operator_mapping,"=","!=",">","<",">=","<=","ilike","not ilike","set","not set");break;case"selection":operators=_.pick(operator_mapping,"=","!=","set","not set");break;case"date":case"datetime":operators=_.pick(operator_mapping,"=","!=",">","<",">=","<=","set","not set");break;default:operators=_.extend({},operator_mapping);break;}
if(this.options.operators){operators=_.pick.apply(_,[operators].concat(this.options.operators));}
return operators;},_onOperatorSelectChange:function(e){this._changeOperator($(e.currentTarget).val());},_onValueInputChange:function(e){if(e.currentTarget!==e.target)return;this._changeValue($(e.currentTarget).val());},_onFieldChainChange:function(e){this._changeFieldChain(e.data.chain);},on_add_tag:function(e){if(e.type==="keyup"&&e.which!==$.ui.keyCode.ENTER)return;if(!_.contains(["not in","in"],this.operator))return;var values=_.isArray(this.value)?this.value.slice():[];var $input=this.$(".o_domain_leaf_value_tags input");var val=$input.val().trim();if(val&&values.indexOf(val)<0){values.push(val);_.defer(this._changeValue.bind(this,values));$input.focus();}},on_remove_tag:function(e){var values=_.isArray(this.value)?this.value.slice():[];var val=this.$(e.currentTarget).data("value");var index=values.indexOf(val);if(index>=0){values.splice(index,1);_.defer(this._changeValue.bind(this,values));}},});function instantiateNode(parent,model,domain,options){if(domain.length>1){return new DomainTree(parent,model,domain,options);}else if(domain.length===1){return new DomainLeaf(parent,model,domain,options);}
return null;}
return DomainSelector;});;

/* /web/static/src/js/widgets/iframe_widget.js defined in bundle 'web.assets_backend' */
odoo.define('web.IFrameWidget',function(require){"use strict";var Widget=require('web.Widget');var IFrameWidget=Widget.extend({tagName:'iframe',init:function(parent,url){this._super(parent);this.url=url;},start:function(){this.$el.css({height:'100%',width:'100%',border:0});this.$el.attr({src:this.url});this.$el.on("load",this._bindEvents.bind(this));return this._super();},_bindEvents:function(){this.$el.contents().click(this._onIFrameClicked.bind(this));},_onIFrameClicked:function(event){}});return IFrameWidget;});;

/* /web/static/src/js/chrome/loading.js defined in bundle 'web.assets_backend' */
odoo.define('web.Loading',function(require){"use strict";var config=require('web.config');var core=require('web.core');var framework=require('web.framework');var Widget=require('web.Widget');var _t=core._t;var Loading=Widget.extend({template:"Loading",init:function(parent){this._super(parent);this.count=0;this.blocked_ui=false;},start:function(){core.bus.on('rpc_request',this,this.request_call);core.bus.on("rpc_response",this,this.response_call);core.bus.on("rpc_response_failed",this,this.response_call);},destroy:function(){this.on_rpc_event(-this.count);this._super();},request_call:function(){this.on_rpc_event(1);},response_call:function(){this.on_rpc_event(-1);},on_rpc_event:function(increment){var self=this;if(!this.count&&increment===1){this.long_running_timer=setTimeout(function(){self.blocked_ui=true;framework.blockUI();},3000);}
this.count+=increment;if(this.count>0){if(config.isDebug()){this.$el.text(_.str.sprintf(_t("Loading (%d)"),this.count));}else{this.$el.text(_t("Loading"));}
this.$el.show();this.getParent().$el.addClass('oe_wait');}else{this.count=0;clearTimeout(this.long_running_timer);if(self.blocked_ui){this.blocked_ui=false;framework.unblockUI();}
this.$el.fadeOut();this.getParent().$el.removeClass('oe_wait');}}});return Loading;});;

/* /web/static/src/js/widgets/model_field_selector.js defined in bundle 'web.assets_backend' */
odoo.define("web.ModelFieldSelector",function(require){"use strict";var core=require("web.core");var Widget=require("web.Widget");var _t=core._t;var modelFieldsCache={cache:{},cacheDefs:{},};core.bus.on('clear_cache',null,function(){modelFieldsCache.cache={};modelFieldsCache.cacheDefs={};});var ModelFieldSelector=Widget.extend({template:"ModelFieldSelector",events:{},editionEvents:{"focusin":"_onFocusIn","focusout":"_onFocusOut","click .o_field_selector_close":"_onCloseClick","click .o_field_selector_prev_page":"_onPrevPageClick","click .o_field_selector_next_page":"_onNextPageClick","click li.o_field_selector_select_button":"_onLastFieldClick","change input.o_field_selector_debug":"_onDebugInputChange","keyup .o_field_selector_search > input":"_onSearchInputChange","mouseover li.o_field_selector_item":"_onItemHover","keydown":"_onKeydown",},init:function(parent,model,chain,options){this._super.apply(this,arguments);this.model=model;this.chain=chain;this.options=_.extend({order:'string',readonly:true,filters:{},fields:null,filter:function(){return true;},followRelations:true,debugMode:false,showSearchInput:true,},options||{});this.options.filters=_.extend({searchable:true,},this.options.filters);if(typeof this.options.followRelations!=='function'){this.options.followRelations=this.options.followRelations?function(){return true;}:function(){return false;};}
this.pages=[];this.dirty=false;if(!this.options.readonly){_.extend(this.events,this.editionEvents);}
this.searchValue='';},willStart:function(){return Promise.all([this._super.apply(this,arguments),this._prefill()]);},start:function(){this.$value=this.$(".o_field_selector_value");this.$popover=this.$(".o_field_selector_popover");this.$input=this.$popover.find(".o_field_selector_popover_footer > input");this.$searchInput=this.$popover.find(".o_field_selector_search > input");this.$valid=this.$(".o_field_selector_warning");this._render();return this._super.apply(this,arguments);},getSelectedField:function(){return _.findWhere(this.pages[this.chain.length-1],{name:_.last(this.chain)});},isValid:function(){return this.valid;},setChain:function(chain){if(_.isEqual(chain,this.chain)){return Promise.resolve();}
this.chain=chain;return this._prefill().then(this._render.bind(this));},_addChainNode:function(fieldName){this.dirty=true;this.chain=this.chain.slice(0,this.pages.length-1);this.chain.push(fieldName);this.searchValue='';this.$searchInput.val('');},_getLastPageField:function(name){return _.findWhere(_.last(this.pages),{name:name,});},_getModelFieldsFromCache:function(model,filters){var self=this;var def=modelFieldsCache.cacheDefs[model];if(!def){def=modelFieldsCache.cacheDefs[model]=this._rpc({model:model,method:'fields_get',args:[false,["store","searchable","type","string","relation","selection","related"]],context:this.getSession().user_context,}).then((function(fields){modelFieldsCache.cache[model]=sortFields(fields,model,self.options.order);}).bind(this));}
return def.then((function(){return _.filter(modelFieldsCache.cache[model],function(f){return(!filters.searchable||f.searchable)&&self.options.filter(f);});}).bind(this));},_goToNextPage:function(field){if(!_.isEqual(this._getLastPageField(field.name),field))return;this._validate(true);this._addChainNode(field.name);this._pushPageData(field.relation).then(this._render.bind(this));},_goToPrevPage:function(){if(this.pages.length<=0)return;this._validate(true);this._removeChainNode();if(this.pages.length>1){this.pages.pop();}
this._render();},_hidePopover:function(){if(!this._isOpen)return;this._isOpen=false;this.$popover.addClass('d-none');if(this.dirty){this.dirty=false;this.trigger_up("field_chain_changed",{chain:this.chain});}},_prefill:function(){this.pages=[];return this._pushPageData(this.model).then((function(){this._validate(true);return(this.chain.length?processChain.call(this,this.chain.slice().reverse()):Promise.resolve());}).bind(this));function processChain(chain){var fieldName=chain.pop();var field=this._getLastPageField(fieldName);if(field&&field.relation&&chain.length>0){return this._pushPageData(field.relation).then(processChain.bind(this,chain));}else if(field&&chain.length===0){return Promise.resolve();}else if(!field&&fieldName==="1"){this._validate(true);}else if(!field&&fieldName==="0"){this._validate(true);}else{this._validate(false);}
return Promise.resolve();}},_pushPageData:function(model){var def;if(this.model===model&&this.options.fields){def=Promise.resolve(sortFields(this.options.fields,model,this.options.order));}else{def=this._getModelFieldsFromCache(model,this.options.filters);}
return def.then((function(fields){this.pages.push(fields);}).bind(this));},_removeChainNode:function(){this.dirty=true;this.chain=this.chain.slice(0,this.pages.length-1);this.chain.pop();},_render:function(){this.$value.html(core.qweb.render(this.template+".value",{chain:this.chain,pages:this.pages,}));this.$valid.toggleClass('d-none',!!this.isValid());var page=_.last(this.pages);var title="";if(this.pages.length>1){var prevField=_.findWhere(this.pages[this.pages.length-2],{name:(this.chain.length===this.pages.length)?this.chain[this.chain.length-2]:_.last(this.chain),});if(prevField)title=prevField.string;}
this.$(".o_field_selector_popover_header .o_field_selector_title").text(title);var lines=_.filter(page,this.options.filter);if(this.searchValue){var matches=fuzzy.filter(this.searchValue,_.pluck(lines,'string'));lines=_.map(_.pluck(matches,'index'),function(i){return lines[i];});}
this.$(".o_field_selector_page").replaceWith(core.qweb.render(this.template+".page",{lines:lines,followRelations:this.options.followRelations,debug:this.options.debugMode,}));this.$input.val(this.chain.join("."));},_selectField:function(field){if(!_.isEqual(this._getLastPageField(field.name),field))return;this._validate(true);this._addChainNode(field.name);this._render();this._hidePopover();},_showPopover:function(){if(this._isOpen)return;this._isOpen=true;this.$popover.removeClass('d-none');},_validate:function(valid){this.valid=!!valid;if(!this.valid){this.do_warn(_t("Invalid field chain"),_t("The field chain is not valid. Did you maybe use a non-existing field name or followed a non-relational field?"));}},_onFocusIn:function(){clearTimeout(this._hidePopoverTimeout);this._showPopover();},_onFocusOut:function(){this._hidePopoverTimeout=_.defer(this._hidePopover.bind(this));},_onCloseClick:function(){this._hidePopover();},_onPrevPageClick:function(){this._goToPrevPage();},_onNextPageClick:function(e){e.stopPropagation();this._goToNextPage(this._getLastPageField($(e.currentTarget).data("name")));},_onLastFieldClick:function(e){this._selectField(this._getLastPageField($(e.currentTarget).data("name")));},_onDebugInputChange:function(){var userChainStr=this.$input.val();var userChain=userChainStr.split(".");if(!this.options.followRelations&&userChain.length>1){this.do_warn(_t("Relation not allowed"),_t("You cannot follow relations for this field chain construction"));userChain=[userChain[0]];}
this.setChain(userChain).then((function(){this.trigger_up("field_chain_changed",{chain:this.chain});}).bind(this));},_onSearchInputChange:function(){this.searchValue=this.$searchInput.val();this._render();},_onItemHover:function(e){this.$("li.o_field_selector_item").removeClass("active");$(e.currentTarget).addClass("active");},_onKeydown:function(e){if(!this.$popover.is(":visible"))return;var inputHasFocus=this.$input.is(":focus");var searchInputHasFocus=this.$searchInput.is(":focus");switch(e.which){case $.ui.keyCode.UP:case $.ui.keyCode.DOWN:e.preventDefault();var $active=this.$("li.o_field_selector_item.active");var $to=$active[e.which===$.ui.keyCode.DOWN?"next":"prev"](".o_field_selector_item");if($to.length){$active.removeClass("active");$to.addClass("active");this.$popover.focus();var $page=$to.closest(".o_field_selector_page");var full_height=$page.height();var el_position=$to.position().top;var el_height=$to.outerHeight();var current_scroll=$page.scrollTop();if(el_position<0){$page.scrollTop(current_scroll-el_height);}else if(full_height<el_position+el_height){$page.scrollTop(current_scroll+el_height);}}
break;case $.ui.keyCode.RIGHT:if(inputHasFocus)break;e.preventDefault();var name=this.$("li.o_field_selector_item.active").data("name");if(name){var field=this._getLastPageField(name);if(field.relation){this._goToNextPage(field);}}
break;case $.ui.keyCode.LEFT:if(inputHasFocus)break;e.preventDefault();this._goToPrevPage();break;case $.ui.keyCode.ESCAPE:e.stopPropagation();this._hidePopover();break;case $.ui.keyCode.ENTER:if(inputHasFocus||searchInputHasFocus)break;e.preventDefault();this._selectField(this._getLastPageField(this.$("li.o_field_selector_item.active").data("name")));break;}}});return ModelFieldSelector;function sortFields(fields,model,order){var array=_.chain(fields).pairs().sortBy(function(p){return p[1].string;});if(order!=='string'){array=array.sortBy(function(p){return p[1][order];});}
return array.map(function(p){return _.extend({name:p[0],model:model,},p[1]);}).value();}});;

/* /web/static/src/js/chrome/sidebar.js defined in bundle 'web.assets_backend' */
odoo.define('web.Sidebar',function(require){"use strict";var Context=require('web.Context');var core=require('web.core');var pyUtils=require('web.py_utils');var Widget=require('web.Widget');var QWeb=core.qweb;var _t=core._t;var Sidebar=Widget.extend({events:{"click a.dropdown-item":"_onDropdownClicked"},init:function(parent,options){this._super.apply(this,arguments);this.options=_.defaults(options||{},{'editable':true});this.env=options.env;this.sections=options.sections||[{name:'print',label:_t('Print')},{name:'other',label:_t('Action')},];this.items=options.items||{print:[],other:[],};if(options.actions){this._addToolbarActions(options.actions);}},start:function(){this._super.apply(this,arguments);this.$el.addClass('btn-group');this._redraw();},updateEnv:function(env){this.env=env;this._redraw();},_addItems:function(sectionCode,items){if(items){this.items[sectionCode].unshift.apply(this.items[sectionCode],items);}},_addToolbarActions:function(toolbarActions){var self=this;_.each(['print','action','relate'],function(type){if(type in toolbarActions){var actions=toolbarActions[type];if(actions&&actions.length){var items=_.map(actions,function(action){return{label:action.name,action:action,};});self._addItems(type==='print'?'print':'other',items);}}});if('other'in toolbarActions){this._addItems('other',toolbarActions.other);}},_onItemActionClicked:function(item){var self=this;this.trigger_up('sidebar_data_asked',{callback:function(env){self.env=env;var activeIdsContext={active_id:env.activeIds[0],active_ids:env.activeIds,active_model:env.model,};if(env.domain){activeIdsContext.active_domain=env.domain;}
var context=pyUtils.eval('context',new Context(env.context,activeIdsContext));self._rpc({route:'/web/action/load',params:{action_id:item.action.id,context:context,},}).then(function(result){result.context=new Context(result.context||{},activeIdsContext).set_eval_context(context);result.flags=result.flags||{};result.flags.new_window=true;self.do_action(result,{on_close:function(){self.trigger_up('reload');},});});}});},_redraw:function(){this.$el.html(QWeb.render('Sidebar',{widget:this}));_.each(this.$('.o_dropdown'),function(el){var $dropdown=$(el);if(!$dropdown.find('.dropdown-item').length){$dropdown.hide();}});this.$("[title]").tooltip({delay:{show:500,hide:0}});},_onDropdownClicked:function(event){var section=$(event.currentTarget).data('section');var index=$(event.currentTarget).data('index');var item=this.items[section][index];if(item.callback){item.callback.apply(this,[item]);}else if(item.action){this._onItemActionClicked(item);}else if(item.url){return true;}
event.preventDefault();},});return Sidebar;});;

/* /web/static/src/js/chrome/pager.js defined in bundle 'web.assets_backend' */
odoo.define('web.Pager',function(require){"use strict";var utils=require('web.utils');var Widget=require('web.Widget');var direction={previous:-1,next:1,};var Pager=Widget.extend({template:"Pager",events:{'click .o_pager_next':'_onNext','click .o_pager_previous':'_onPrevious','click .o_pager_value':'_onEdit',},init:function(parent,size,current_min,limit,options){this.state={size:size,current_min:current_min,limit:limit,};Object.defineProperty(this.state,'current_max',{get:function(){return Math.min(this.current_min+this.limit-1,this.size);}});this.options=_.defaults({},options,{can_edit:true,single_page_hidden:false,validate:function(){return Promise.resolve();},withAccessKey:true,});this._super(parent);},start:function(){this.$value=this.$('.o_pager_value');this.$limit=this.$('.o_pager_limit');this._render();return this._super();},disable:function(){this.disabled=true;this._updateArrows();},enable:function(){this.disabled=false;this._updateArrows();},next:function(){this._changeSelection(direction.next);},previous:function(){this._changeSelection(direction.previous);},updateState:function(state,options){_.extend(this.state,state);this._render();if(options&&options.notifyChange){this.trigger('pager_changed',_.clone(this.state));}},_changeSelection:function(direction){var self=this;this.options.validate().then(function(){var size=self.state.size;var current_min=self.state.current_min;var limit=self.state.limit;current_min=(current_min+limit*direction);if(current_min>size){current_min=1;}else if((current_min<1)&&(limit===1)){current_min=size;}else if((current_min<1)&&(limit>1)){current_min=size-((size%limit)||limit)+1;}
self.state.current_min=current_min;self._render();self.trigger('pager_changed',_.clone(self.state));});},_edit:function(){if(this.options.can_edit){var self=this;var $input=$('<input>',{class:'o_input',type:'text',value:this.$value.html()});this.$value.html($input);$input.focus();$input.click(function(ev){ev.stopPropagation();});$input.blur(function(ev){self._save($(ev.target));});$input.on('keydown',function(ev){ev.stopPropagation();if(ev.which===$.ui.keyCode.ENTER){self._save($(ev.target));}else if(ev.which===$.ui.keyCode.ESCAPE){self._render();}});}},_render:function(){var size=this.state.size;var current_min=this.state.current_min;var current_max=this.state.current_max;if(size===0||(this.options.single_page_hidden&&this._singlePage())){this.do_hide();}else{this.do_show();this._updateArrows();var value=""+current_min;if(this.state.limit>1){value+="-"+current_max;}
this.$value.html(value);this.$limit.html(size);}},_save:function($input){var self=this;this.options.validate().then(function(){var value=$input.val().split("-");var min=utils.confine(parseInt(value[0],10),1,self.state.size);var max=utils.confine(parseInt(value[1],10),1,self.state.size);if(!isNaN(min)){self.state.current_min=min;if(!isNaN(max)){self.state.limit=utils.confine(max-min+1,1,self.state.size);}else{self.state.limit=1;}
self.trigger('pager_changed',_.clone(self.state));}
self._render();});},_singlePage:function(){var state=this.state;return(1===state.current_min)&&(state.current_max===state.size);},_updateArrows:function(){var disabled=this.disabled||this._singlePage();this.$('button').prop('disabled',disabled);},_onEdit:function(event){event.stopPropagation();if(!this.disabled){this._edit();}},_onNext:function(event){event.stopPropagation();this.next();},_onPrevious:function(event){event.stopPropagation();this.previous();},});return Pager;});;

/* /web/static/src/js/chrome/systray_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.SystrayMenu',function(require){"use strict";var dom=require('web.dom');var Widget=require('web.Widget');var SystrayMenu=Widget.extend({init:function(parent){this._super(parent);this.items=[];this.widgets=[];},willStart:function(){var self=this;var proms=[];SystrayMenu.Items=_.sortBy(SystrayMenu.Items,function(item){return!_.isUndefined(item.prototype.sequence)?item.prototype.sequence:50;});SystrayMenu.Items.forEach(function(WidgetClass){var cur_systray_item=new WidgetClass(self);self.widgets.push(cur_systray_item);proms.push(cur_systray_item.appendTo($('<div>')));});return this._super.apply(this,arguments).then(function(){return Promise.all(proms);});},start:function(){var self=this;return this._super.apply(this,arguments).then(function(){self.widgets.forEach(function(widget){dom.prepend(self.$el,widget.$el);});});},});SystrayMenu.Items=[];return SystrayMenu;});;

/* /web/static/src/js/widgets/switch_company_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.SwitchCompanyMenu',function(require){"use strict";var config=require('web.config');var core=require('web.core');var session=require('web.session');var SystrayMenu=require('web.SystrayMenu');var Widget=require('web.Widget');var _t=core._t;var SwitchCompanyMenu=Widget.extend({template:'SwitchCompanyMenu',events:{'click .dropdown-item[data-menu] div.log_into':'_onSwitchCompanyClick','click .dropdown-item[data-menu] div.toggle_company':'_onToggleCompanyClick',},init:function(){this._super.apply(this,arguments);this.isMobile=config.device.isMobile;this._onSwitchCompanyClick=_.debounce(this._onSwitchCompanyClick,1500,true);},willStart:function(){var self=this;this.allowed_company_ids=String(session.user_context.allowed_company_ids).split(',').map(function(id){return parseInt(id);});this.user_companies=session.user_companies.allowed_companies;this.current_company=this.allowed_company_ids[0];this.current_company_name=_.find(session.user_companies.allowed_companies,function(company){return company[0]===self.current_company;})[1];return this._super.apply(this,arguments);},_onSwitchCompanyClick:function(ev){ev.stopPropagation();var dropdownItem=$(ev.currentTarget).parent();var dropdownMenu=dropdownItem.parent();var companyID=dropdownItem.data('company-id');var allowed_company_ids=this.allowed_company_ids;if(dropdownItem.find('.fa-square-o').length){if(this.allowed_company_ids.length===1){dropdownMenu.find('.fa-check-square').removeClass('fa-check-square').addClass('fa-square-o');dropdownItem.find('.fa-square-o').removeClass('fa-square-o').addClass('fa-check-square');allowed_company_ids=[companyID]}else{allowed_company_ids.push(companyID);dropdownItem.find('.fa-square-o').removeClass('fa-square-o').addClass('fa-check-square');}}
session.setCompanies(companyID,allowed_company_ids);},_onToggleCompanyClick:function(ev){ev.stopPropagation();var dropdownItem=$(ev.currentTarget).parent();var companyID=dropdownItem.data('company-id');var allowed_company_ids=this.allowed_company_ids;var current_company_id=allowed_company_ids[0];if(dropdownItem.find('.fa-square-o').length){allowed_company_ids.push(companyID);dropdownItem.find('.fa-square-o').removeClass('fa-square-o').addClass('fa-check-square');}else{allowed_company_ids.splice(allowed_company_ids.indexOf(companyID),1);dropdownItem.find('.fa-check-square').addClass('fa-square-o').removeClass('fa-check-square');}
session.setCompanies(current_company_id,allowed_company_ids);},});if(session.display_switch_company_menu){SystrayMenu.Items.push(SwitchCompanyMenu);}
return SwitchCompanyMenu;});;

/* /web/static/src/js/chrome/user_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.UserMenu',function(require){"use strict";var config=require('web.config');var core=require('web.core');var framework=require('web.framework');var Dialog=require('web.Dialog');var Widget=require('web.Widget');var _t=core._t;var QWeb=core.qweb;var UserMenu=Widget.extend({template:'UserMenu',start:function(){var self=this;var session=this.getSession();this.$el.on('click','[data-menu]',function(ev){ev.preventDefault();var menu=$(this).data('menu');self['_onMenu'+menu.charAt(0).toUpperCase()+menu.slice(1)]();});return this._super.apply(this,arguments).then(function(){var $avatar=self.$('.oe_topbar_avatar');if(!session.uid){$avatar.attr('src',$avatar.data('default-src'));return Promise.resolve();}
var topbar_name=session.name;if(config.isDebug()){topbar_name=_.str.sprintf("%s (%s)",topbar_name,session.db);}
self.$('.oe_topbar_name').text(topbar_name);var avatar_src=session.url('/web/image',{model:'res.users',field:'image_128',id:session.uid,});$avatar.attr('src',avatar_src);});},_onMenuAccount:function(){var self=this;this.trigger_up('clear_uncommitted_changes',{callback:function(){self._rpc({route:'/web/session/account'}).then(function(url){framework.redirect(url);}).guardedCatch(function(result,ev){ev.preventDefault();framework.redirect('https://accounts.odoo.com/account');});},});},_onMenuDocumentation:function(){window.open('https://www.odoo.com/documentation/user','_blank');},_onMenuLogout:function(){this.trigger_up('clear_uncommitted_changes',{callback:this.do_action.bind(this,'logout'),});},_onMenuSettings:function(){var self=this;var session=this.getSession();this.trigger_up('clear_uncommitted_changes',{callback:function(){self._rpc({model:"res.users",method:"action_get"}).then(function(result){result.res_id=session.uid;self.do_action(result);});},});},_onMenuSupport:function(){window.open('https://www.odoo.com/buy','_blank');},_onMenuShortcuts:function(){new Dialog(this,{size:'large',dialogClass:'o_act_window',title:_t("Keyboard Shortcuts"),$content:$(QWeb.render("UserMenu.shortcuts"))}).open();},});return UserMenu;});;

/* /web/static/src/js/chrome/menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.Menu',function(require){"use strict";var AppsMenu=require('web.AppsMenu');var config=require('web.config');var core=require('web.core');var dom=require('web.dom');var SystrayMenu=require('web.SystrayMenu');var UserMenu=require('web.UserMenu');var Widget=require('web.Widget');UserMenu.prototype.sequence=0;SystrayMenu.Items.push(UserMenu);var QWeb=core.qweb;var Menu=Widget.extend({template:'Menu',menusTemplate:'Menu.sections',events:{'mouseover .o_menu_sections > li:not(.show)':'_onMouseOverMenu','click .o_menu_brand':'_onAppNameClicked',},init:function(parent,menu_data){var self=this;this._super.apply(this,arguments);this.$menu_sections={};this.menu_data=menu_data;var $menu_sections=$(QWeb.render(this.menusTemplate,{menu_data:this.menu_data,}));$menu_sections.filter('section').each(function(){self.$menu_sections[parseInt(this.className,10)]=$(this).children('li');});core.bus.on('change_menu_section',this,this.change_menu_section);},start:function(){var self=this;this.$menu_apps=this.$('.o_menu_apps');this.$menu_brand_placeholder=this.$('.o_menu_brand');this.$section_placeholder=this.$('.o_menu_sections');var on_secondary_menu_click=function(ev){ev.preventDefault();var menu_id=$(ev.currentTarget).data('menu');var action_id=$(ev.currentTarget).data('action-id');self._on_secondary_menu_click(menu_id,action_id);};var menu_ids=_.keys(this.$menu_sections);var primary_menu_id,$section;for(var i=0;i<menu_ids.length;i++){primary_menu_id=menu_ids[i];$section=this.$menu_sections[primary_menu_id];$section.on('click','a[data-menu]',self,on_secondary_menu_click.bind(this));}
this._appsMenu=new AppsMenu(self,this.menu_data);var appsMenuProm=this._appsMenu.appendTo(this.$menu_apps);this.systray_menu=new SystrayMenu(this);var systrayMenuProm=this.systray_menu.attachTo(this.$('.o_menu_systray')).then(function(){dom.initAutoMoreMenu(self.$section_placeholder,{maxWidth:function(){return self.$el.width()-(self.$menu_apps.outerWidth(true)+self.$menu_brand_placeholder.outerWidth(true)+self.systray_menu.$el.outerWidth(true));},sizeClass:'SM',});});return Promise.all([this._super.apply(this,arguments),appsMenuProm,systrayMenuProm]);},change_menu_section:function(primary_menu_id){if(!this.$menu_sections[primary_menu_id]){this._updateMenuBrand();return;}
if(this.current_primary_menu===primary_menu_id){return;}
if(this.current_primary_menu){this.$menu_sections[this.current_primary_menu].detach();}
for(var i=0;i<this.menu_data.children.length;i++){if(this.menu_data.children[i].id===primary_menu_id){this._updateMenuBrand(this.menu_data.children[i].name);break;}}
this.$menu_sections[primary_menu_id].appendTo(this.$section_placeholder);this.current_primary_menu=primary_menu_id;core.bus.trigger('resize');},_trigger_menu_clicked:function(menu_id,action_id){this.trigger_up('menu_clicked',{id:menu_id,action_id:action_id,previous_menu_id:this.current_secondary_menu||this.current_primary_menu,});},_updateMenuBrand:function(brandName){if(brandName){this.$menu_brand_placeholder.text(brandName).show();this.$section_placeholder.show();}else{this.$menu_brand_placeholder.hide()
this.$section_placeholder.hide();}},_on_secondary_menu_click:function(menu_id,action_id){var self=this;if(action_id){self._trigger_menu_clicked(menu_id,action_id);this.current_secondary_menu=menu_id;}},action_id_to_primary_menu_id:function(action_id){var primary_menu_id,found;for(var i=0;i<this.menu_data.children.length&&!primary_menu_id;i++){found=this._action_id_in_subtree(this.menu_data.children[i],action_id);if(found){primary_menu_id=this.menu_data.children[i].id;}}
return primary_menu_id;},_action_id_in_subtree:function(root,action_id){if(root.action&&root.action.split(',')[1]===String(action_id)){return true;}
var found;for(var i=0;i<root.children.length&&!found;i++){found=this._action_id_in_subtree(root.children[i],action_id);}
return found;},menu_id_to_action_id:function(menu_id,root){if(!root){root=$.extend(true,{},this.menu_data);}
if(root.id===menu_id){return root.action.split(',')[1];}
for(var i=0;i<root.children.length;i++){var action_id=this.menu_id_to_action_id(menu_id,root.children[i]);if(action_id!==undefined){return action_id;}}
return undefined;},getCurrentPrimaryMenu:function(){return this.current_primary_menu;},openFirstApp:function(){this._appsMenu.openFirstApp();},_onAppNameClicked:function(ev){var actionID=parseInt(this.menu_id_to_action_id(this.current_primary_menu));this._trigger_menu_clicked(this.current_primary_menu,actionID);},_onMouseOverMenu:function(ev){if(config.device.isMobile){return;}
var $target=$(ev.currentTarget);var $opened=$target.siblings('.show');if($opened.length){$opened.find('[data-toggle="dropdown"]').dropdown('toggle');$opened.removeClass('show');$target.find('[data-toggle="dropdown"]').dropdown('toggle');$target.addClass('show');}},});return Menu;});;

/* /web/static/src/js/chrome/apps_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.AppsMenu',function(require){"use strict";var Widget=require('web.Widget');var AppsMenu=Widget.extend({template:'AppsMenu',events:{'click .o_app':'_onAppsMenuItemClicked',},init:function(parent,menuData){this._super.apply(this,arguments);this._activeApp=undefined;this._apps=_.map(menuData.children,function(appMenuData){return{actionID:parseInt(appMenuData.action.split(',')[1]),menuID:appMenuData.id,name:appMenuData.name,xmlID:appMenuData.xmlid,};});},getApps:function(){return this._apps;},openFirstApp:function(){if(!this._apps.length){return}
var firstApp=this._apps[0];this._openApp(firstApp);},_openApp:function(app){this._setActiveApp(app);this.trigger_up('app_clicked',{action_id:app.actionID,menu_id:app.menuID,});},_setActiveApp:function(app){var $oldActiveApp=this.$('.o_app.active');$oldActiveApp.removeClass('active');var $newActiveApp=this.$('.o_app[data-action-id="'+app.actionID+'"]');$newActiveApp.addClass('active');},_onAppsMenuItemClicked:function(ev){var $target=$(ev.currentTarget);var actionID=$target.data('action-id');var menuID=$target.data('menu-id');var app=_.findWhere(this._apps,{actionID:actionID,menuID:menuID});this._openApp(app);},});return AppsMenu;});;

/* /web/static/src/js/widgets/dropdown_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.DropdownMenu',function(require){"use strict";var core=require('web.core');var Widget=require('web.Widget');var QWeb=core.qweb;var DropdownMenu=Widget.extend({template:'web.DropdownMenu',events:{'click .o_menu_item':'_onItemClick','click .o_item_option':'_onOptionClick','click span.o_trash_button':'_onTrashButtonClick','hidden.bs.dropdown':'_onBootstrapClose','click .dropdown-item-text':'_onDropDownItemTextClick',},init:function(parent,items){this._super(parent);this.dropdownCategory=null;this.dropdownTitle=null;this.dropdownIcon=null;this.dropdownSymbol=false;this.dropdownStyle={el:{class:'btn-group o_dropdown',attrs:{}},mainButton:{class:'o_dropdown_toggler_btn btn btn-secondary '+'dropdown-toggle '+
(this.dropdownSymbol?'o-no-caret':'')},};this.items=items;this.openItems={};},update:function(items){this.items=items;this._renderMenuItems();},_renderMenuItems:function(){var newMenuItems=QWeb.render('DropdownMenu.MenuItems',{widget:this});this.$el.find('.o_menu_item, .dropdown-divider[data-removable="1"]').remove();this.$('.o_dropdown_menu').prepend(newMenuItems);},_onBootstrapClose:function(){this.openItems={};this._renderMenuItems();},_onDropDownItemTextClick:function(ev){ev.stopPropagation();},_onItemClick:function(event){event.preventDefault();event.stopPropagation();var id=$(event.currentTarget).data('id');var item=this.items.find(function(item){return item.id===id;});if(item.hasOptions){this.openItems[id]=!this.openItems[id];this._renderMenuItems();}else{this.trigger_up('menu_item_clicked',{id:id});}},_onOptionClick:function(event){event.preventDefault();event.stopPropagation();var optionId=$(event.currentTarget).data('option_id');var id=$(event.currentTarget).data('item_id');this.trigger_up('item_option_clicked',{id:id,optionId:optionId});},_onTrashButtonClick:function(event){},});return DropdownMenu;});;

/* /web/static/src/js/widgets/pie_chart.js defined in bundle 'web.assets_backend' */
odoo.define('web.PieChart',function(require){"use strict";var core=require('web.core');var Domain=require('web.Domain');var viewRegistry=require('web.view_registry');var Widget=require('web.Widget');var widgetRegistry=require('web.widget_registry');var qweb=core.qweb;var PieChart=Widget.extend({className:'o_pie_chart',xmlDependencies:['/web/static/src/xml/chart.xml'],init:function(parent,record,node){this._super.apply(this,arguments);var modifiers=node.attrs.modifiers;var domain=record.domain.concat(Domain.prototype.stringToArray(modifiers.domain||'[]'));var arch=qweb.render('web.PieChart',{modifiers:modifiers,title:node.attrs.title||modifiers.title||modifiers.measure,});var pieChartContext=JSON.parse(JSON.stringify(record.context));delete pieChartContext.graph_mode;delete pieChartContext.graph_measure;delete pieChartContext.graph_groupbys;this.subViewParams={modelName:record.model,withControlPanel:false,isEmbedded:true,mode:'pie',};this.subViewParams.searchQuery={context:pieChartContext,domain:domain,groupBy:[],};this.viewInfo={arch:arch,fields:record.fields,viewFields:record.fieldsInfo.dashboard,};},willStart:function(){var self=this;var def1=this._super.apply(this,arguments);var SubView=viewRegistry.get('graph');var subView=new SubView(this.viewInfo,this.subViewParams);var def2=subView.getController(this).then(function(controller){self.controller=controller;return self.controller.appendTo(document.createDocumentFragment());});return Promise.all([def1,def2]);},start:function(){this.$el.append(this.controller.$el);return this._super.apply(this,arguments);},on_attach_callback:function(){this.controller.on_attach_callback();},});widgetRegistry.add('pie_chart',PieChart);return PieChart;});;

/* /web/static/src/js/widgets/ribbon.js defined in bundle 'web.assets_backend' */
odoo.define('web.ribbon',function(require){'use strict';var widgetRegistry=require('web.widget_registry');var Widget=require('web.Widget');var RibbonWidget=Widget.extend({template:'web.ribbon',xmlDependencies:['/web/static/src/xml/ribbon.xml'],init:function(parent,data,options){this._super.apply(this,arguments);this.text=options.attrs.text;this.bgColor=options.attrs.bg_color;}});widgetRegistry.add('web_ribbon',RibbonWidget);return RibbonWidget;});;

/* /web/static/src/js/apps.js defined in bundle 'web.assets_backend' */
odoo.define('web.Apps',function(require){"use strict";var AbstractAction=require('web.AbstractAction');var config=require('web.config');var core=require('web.core');var framework=require('web.framework');var session=require('web.session');var _t=core._t;var apps_client=null;var Apps=AbstractAction.extend({contentTemplate:'EmptyComponent',remote_action_tag:'loempia.embed',failback_action_id:'base.open_module_tree',init:function(parent,action){this._super(parent,action);var options=action.params||{};this.params=options;},get_client:function(){var check_client_available=function(client){var i=new Image();var def=new Promise(function(resolve,reject){i.onerror=function(){reject(client);};i.onload=function(){resolve(client);};});var ts=new Date().getTime();i.src=_.str.sprintf('%s/web/static/src/img/sep-a.gif?%s',client.origin,ts);return def;};if(apps_client){return check_client_available(apps_client);}else{return this._rpc({model:'ir.module.module',method:'get_apps_server'}).then(function(u){var link=$(_.str.sprintf('<a href="%s"></a>',u))[0];var host=_.str.sprintf('%s//%s',link.protocol,link.host);var dbname=link.pathname;if(dbname[0]==='/'){dbname=dbname.substr(1);}
var client={origin:host,dbname:dbname};apps_client=client;return check_client_available(client);});}},destroy:function(){$(window).off("message."+this.uniq);if(this.$ifr){this.$ifr.remove();this.$ifr=null;}
return this._super();},_on_message:function($e){var self=this,client=this.client,e=$e.originalEvent;if(e.origin!==client.origin){return;}
var dispatcher={'event':function(m){self.trigger('message:'+m.event,m);},'action':function(m){self.do_action(m.action).then(function(r){var w=self.$ifr[0].contentWindow;w.postMessage({id:m.id,result:r},client.origin);});},'rpc':function(m){return self._rpc({route:m.args[0],params:m.args[1]}).then(function(r){var w=self.$ifr[0].contentWindow;w.postMessage({id:m.id,result:r},client.origin);});},'Model':function(m){return self._rpc({model:m.model,method:m.args[0],args:m.args[1]}).then(function(r){var w=self.$ifr[0].contentWindow;w.postMessage({id:m.id,result:r},client.origin);});},};if(!_.isObject(e.data)){return;}
if(dispatcher[e.data.type]){dispatcher[e.data.type](e.data);}},start:function(){var self=this;return new Promise(function(resolve,reject){self.get_client().then(function(client){self.client=client;var qs={db:client.dbname};if(config.isDebug()){qs.debug=odoo.debug;}
var u=$.param.querystring(client.origin+"/apps/embed/client",qs);var css={width:'100%',height:'750px'};self.$ifr=$('<iframe>').attr('src',u);self.uniq=_.uniqueId('apps');$(window).on("message."+self.uniq,self.proxy('_on_message'));self.on('message:ready',self,function(m){var w=this.$ifr[0].contentWindow;var act={type:'ir.actions.client',tag:this.remote_action_tag,params:_.extend({},this.params,{db:session.db,origin:session.origin,})};w.postMessage({type:'action',action:act},client.origin);});self.on('message:set_height',self,function(m){this.$ifr.height(m.height);});self.on('message:blockUI',self,function(){framework.blockUI();});self.on('message:unblockUI',self,function(){framework.unblockUI();});self.on('message:warn',self,function(m){self.do_warn(m.title,m.message,m.sticky);});self.$ifr.appendTo(self.$('.o_content')).css(css).addClass('apps-client');resolve();},function(){self.do_warn(_t('Odoo Apps will be available soon'),_t('Showing locally available modules'),true);return self._rpc({route:'/web/action/load',params:{action_id:self.failback_action_id},}).then(function(action){return self.do_action(action);}).then(reject,reject);});});}});var AppsUpdates=Apps.extend({remote_action_tag:'loempia.embed.updates',});core.action_registry.add("apps",Apps);core.action_registry.add("apps.updates",AppsUpdates);return Apps;});;

/* /web/static/src/js/fields/abstract_field.js defined in bundle 'web.assets_backend' */
odoo.define('web.AbstractField',function(require){"use strict";var field_utils=require('web.field_utils');var Widget=require('web.Widget');var AbstractField=Widget.extend({events:{'keydown':'_onKeydown',},custom_events:{navigation_move:'_onNavigationMove',},fieldDependencies:{},resetOnAnyFieldChange:false,specialData:false,supportedFieldTypes:[],description:"",noLabel:false,init:function(parent,name,record,options){this._super(parent);options=options||{};this.name=name;this.record=record;this.field=record.fields[name];this.viewType=options.viewType||'default';var fieldsInfo=record.fieldsInfo[this.viewType];this.attrs=options.attrs||(fieldsInfo&&fieldsInfo[name])||{};this.additionalContext=options.additionalContext||{};this.value=record.data[name];this.recordData=record.data;this.string=this.attrs.string||this.field.string||this.name;this.nodeOptions=this.attrs.options||{};this.dataPointID=record.id;this.res_id=record.res_id;this.model=record.model;this.mode=options.mode||"readonly";this._isValid=true;this.lastSetValue=undefined;this.formatType=this.attrs.widget in field_utils.format?this.attrs.widget:this.field.type;this.formatOptions={};this.parseOptions={};if(this.attrs.decorations){this.resetOnAnyFieldChange=true;}},start:function(){var self=this;return this._super.apply(this,arguments).then(function(){self.$el.attr('name',self.name);self.$el.addClass('o_field_widget');return self._render();});},activate:function(options){if(this.isFocusable()){var $focusable=this.getFocusableElement();$focusable.focus();if($focusable.is('input[type="text"], textarea')){$focusable[0].selectionStart=$focusable[0].selectionEnd=$focusable[0].value.length;if(options&&!options.noselect){$focusable.select();}}
return true;}
return false;},commitChanges:function(){},getFocusableElement:function(){return $();},isFocusable:function(){var $focusable=this.getFocusableElement();return $focusable.length&&$focusable.is(':visible');},isSet:function(){return!!this.value;},isValid:function(){return this._isValid;},reset:function(record,event){this._reset(record,event);return this._render()||Promise.resolve();},removeInvalidClass:function(){this.$el.removeClass('o_field_invalid');this.$el.removeAttr('aria-invalid');},setIDForLabel:function(id){this.getFocusableElement().attr('id',id);},setInvalidClass:function(){this.$el.addClass('o_field_invalid');this.$el.attr('aria-invalid','true');},updateModifiersValue:function(modifiers){this.attrs.modifiersValue=modifiers||{};},_applyDecorations:function(){var self=this;this.attrs.decorations.forEach(function(dec){var isToggled=py.PY_isTrue(py.evaluate(dec.expression,self.record.evalContext));self.$el.toggleClass(dec.className,isToggled);});},_formatValue:function(value){var options=_.extend({},this.nodeOptions,{data:this.recordData},this.formatOptions);return field_utils.format[this.formatType](value,this.field,options);},_isSameValue:function(value){return this.value===value;},_parseValue:function(value){return field_utils.parse[this.formatType](value,this.field,this.parseOptions);},_render:function(){if(this.attrs.decorations){this._applyDecorations();}
if(this.mode==='edit'){return this._renderEdit();}else if(this.mode==='readonly'){return this._renderReadonly();}},_renderEdit:function(){},_renderReadonly:function(){},_reset:function(record,event){this.lastSetValue=undefined;this.record=record;this.value=record.data[this.name];this.recordData=record.data;},_setValue:function(value,options){if(this.lastSetValue===value||(this.value===false&&value==='')){return Promise.resolve();}
this.lastSetValue=value;try{value=this._parseValue(value);this._isValid=true;}catch(e){this._isValid=false;this.trigger_up('set_dirty',{dataPointID:this.dataPointID});return Promise.reject({message:"Value set is not valid"});}
if(!(options&&options.forceChange)&&this._isSameValue(value)){return Promise.resolve();}
var self=this;return new Promise(function(resolve,reject){var changes={};changes[self.name]=value;self.trigger_up('field_changed',{dataPointID:self.dataPointID,changes:changes,viewType:self.viewType,doNotSetDirty:options&&options.doNotSetDirty,notifyChange:!options||options.notifyChange!==false,allowWarning:options&&options.allowWarning,onSuccess:resolve,onFailure:reject,});});},_onKeydown:function(ev){switch(ev.which){case $.ui.keyCode.TAB:var event=this.trigger_up('navigation_move',{direction:ev.shiftKey?'previous':'next',});if(event.is_stopped()){ev.preventDefault();ev.stopPropagation();}
break;case $.ui.keyCode.ENTER:ev.preventDefault();ev.stopPropagation();this.trigger_up('navigation_move',{direction:'next_line'});break;case $.ui.keyCode.ESCAPE:this.trigger_up('navigation_move',{direction:'cancel',originalEvent:ev});break;case $.ui.keyCode.UP:ev.stopPropagation();this.trigger_up('navigation_move',{direction:'up'});break;case $.ui.keyCode.RIGHT:ev.stopPropagation();this.trigger_up('navigation_move',{direction:'right'});break;case $.ui.keyCode.DOWN:ev.stopPropagation();this.trigger_up('navigation_move',{direction:'down'});break;case $.ui.keyCode.LEFT:ev.stopPropagation();this.trigger_up('navigation_move',{direction:'left'});break;}},_onNavigationMove:function(ev){ev.data.target=this;},});return AbstractField;});;

/* /web/static/src/js/fields/basic_fields.js defined in bundle 'web.assets_backend' */
odoo.define('web.basic_fields',function(require){"use strict";var AbstractField=require('web.AbstractField');var config=require('web.config');var core=require('web.core');var datepicker=require('web.datepicker');var dom=require('web.dom');var Domain=require('web.Domain');var DomainSelector=require('web.DomainSelector');var DomainSelectorDialog=require('web.DomainSelectorDialog');var framework=require('web.framework');var py_utils=require('web.py_utils');var session=require('web.session');var utils=require('web.utils');var view_dialogs=require('web.view_dialogs');var field_utils=require('web.field_utils');var time=require('web.time');var ColorpickerDialog=require('web.ColorpickerDialog');require("web.zoomodoo");var qweb=core.qweb;var _t=core._t;var _lt=core._lt;var TranslatableFieldMixin={_renderTranslateButton:function(){if(_t.database.multi_lang&&this.field.translate){var lang=_t.database.parameters.code.split('_')[0].toUpperCase();return $(`<span class="o_field_translate btn btn-link">${lang}</span>`).on('click',this._onTranslate.bind(this));}
return $();},_onTranslate:function(ev){ev.preventDefault();this.trigger_up('translate',{fieldName:this.name,id:this.dataPointID,isComingFromTranslationAlert:false,});},};var DebouncedField=AbstractField.extend({DEBOUNCE:1000000000,init:function(){this._super.apply(this,arguments);this._isDirty=false;if(this.mode==='edit'){if(this.DEBOUNCE){this._doDebouncedAction=_.debounce(this._doAction,this.DEBOUNCE);}else{this._doDebouncedAction=this._doAction;}
var self=this;var debouncedFunction=this._doDebouncedAction;this._doDebouncedAction=function(){self._isDirty=true;debouncedFunction.apply(self,arguments);};}},commitChanges:function(){if(this._isDirty&&this.mode==='edit'){return this._doAction();}},_doAction:function(){if(!this.isDestroyed()){return this._setValue(this._getValue());}},_getValue:function(){},});var InputField=DebouncedField.extend({custom_events:_.extend({},DebouncedField.prototype.custom_events,{field_changed:'_onFieldChanged',}),events:_.extend({},DebouncedField.prototype.events,{'input':'_onInput','change':'_onChange',}),init:function(){this._super.apply(this,arguments);this.nodeOptions.isPassword='password'in this.attrs;if(this.mode==='edit'){this.tagName='input';}
this.isDirty=false;this.lastChangeEvent=undefined;},getFocusableElement:function(){return this.$input||$();},reset:function(record,event){this._reset(record,event);if(!event||event===this.lastChangeEvent){this.isDirty=false;}
if(this.isDirty||(event&&event.target===this&&event.data.changes&&event.data.changes[this.name]===this.value)){if(this.attrs.decorations){this._applyDecorations();}
return Promise.resolve();}else{return this._render();}},_getValue:function(){return this.$input.val();},_prepareInput:function($input){this.$input=$input||$("<input/>");this.$input.addClass('o_input');var inputAttrs={placeholder:this.attrs.placeholder||""};var inputVal;if(this.nodeOptions.isPassword){inputAttrs=_.extend(inputAttrs,{type:'password',autocomplete:'new-password'});inputVal=this.value||'';}else{inputAttrs=_.extend(inputAttrs,{type:'text',autocomplete:this.attrs.autocomplete});inputVal=this._formatValue(this.value);}
this.$input.attr(inputAttrs);this.$input.val(inputVal);return this.$input;},_renderEdit:function(){this._prepareInput(this.$el);},_renderReadonly:function(){this.$el.text(this._formatValue(this.value));},_onChange:function(){this._doAction();},_onFieldChanged:function(event){this.lastChangeEvent=event;},_onInput:function(){this.isDirty=true;this._doDebouncedAction();},_onNavigationMove:function(ev){this._super.apply(this,arguments);if(this.mode==='edit'&&ev.data.direction!=='cancel'){var input=this.$input[0];var selecting=(input.selectionEnd!==input.selectionStart);if((ev.data.direction==="left"&&(selecting||input.selectionStart!==0))||(ev.data.direction==="right"&&(selecting||input.selectionStart!==input.value.length))){ev.stopPropagation();}
if(ev.data.direction==='next'&&this.attrs.modifiersValue&&this.attrs.modifiersValue.required&&this.viewType!=='list'){if(!this.$input.val()){this.setInvalidClass();ev.stopPropagation();}else{this.removeInvalidClass();}}}},});var NumericField=InputField.extend({tagName:'span',isSet:function(){return this.value===0||this._super.apply(this,arguments);},_evalFormula:function(expr,context){var val=expr.replace(new RegExp(/( )/g),'');var safeEvalString='';for(let v of val.split(new RegExp(/([-+*/()^])/g))){if(!['+','-','*','/','(',')','^'].includes(v)&&v.length){v=field_utils.parse.float(v);}
if(v==='^'){v='**';}
safeEvalString+=v;};return py_utils.py_eval(safeEvalString,context);},_formatValue:function(value){if(this.mode==='edit'&&this.nodeOptions.type==='number'){return value;}
return this._super.apply(this,arguments);},_prepareInput:function($input){var result=this._super.apply(this,arguments);if(this.nodeOptions.type==='number'){this.$input.attr({type:'number'});}
if(this.nodeOptions.step){this.$input.attr({step:this.nodeOptions.step});}
return result;},_setValue:function(value,options){var originalValue=value;value=value.trim();if(value.startsWith('=')){try{value=this._evalFormula(value.substr(1));value=this._formatValue(value);this.$input.val(value);}catch(err){value=originalValue;}}
return this._super(value,options);},});var FieldChar=InputField.extend(TranslatableFieldMixin,{description:_lt("Text"),className:'o_field_char',tagName:'span',supportedFieldTypes:['char'],_renderEdit:function(){var def=this._super.apply(this,arguments);if(this.field.size&&this.field.size>0){this.$el.attr('maxlength',this.field.size);}
if(this.field.translate){this.$el=this.$el.add(this._renderTranslateButton());this.$el.addClass('o_field_translate');}
return def;},_setValue:function(value,options){if(this.field.trim){value=value.trim();}
return this._super(value,options);},});var LinkButton=AbstractField.extend({events:_.extend({},AbstractField.prototype.events,{'click':'_onClick'}),_render:function(){if(this.value){var className=this.attrs.icon||'fa-globe';this.$el.html("<span role='img'/>");this.$el.addClass("fa "+className);this.$el.attr('title',this.value);this.$el.attr('aria-label',this.value);}},_onClick:function(event){event.stopPropagation();window.open(this.value,'_blank');},});var FieldDateRange=InputField.extend({className:'o_field_date_range',tagName:'span',jsLibs:['/web/static/lib/daterangepicker/daterangepicker.js','/web/static/src/js/libs/daterangepicker.js',],cssLibs:['/web/static/lib/daterangepicker/daterangepicker.css',],supportedFieldTypes:['date','datetime'],init:function(){this._super.apply(this,arguments);this.isDateField=this.formatType==='date';this.dateRangePickerOptions=_.defaults({},this.nodeOptions.picker_options||{},{timePicker:!this.isDateField,timePicker24Hour:_t.database.parameters.time_format.search('%H')!==-1,autoUpdateInput:false,timePickerIncrement:5,locale:{format:this.isDateField?time.getLangDateFormat():time.getLangDatetimeFormat(),},});this.relatedEndDate=this.nodeOptions.related_end_date;this.relatedStartDate=this.nodeOptions.related_start_date;},destroy:function(){if(this.$pickerContainer){this.$pickerContainer.remove();}
this._super.apply(this,arguments);},_applyChanges:function(ev,picker){var changes={};var displayStartDate=field_utils.format[this.formatType](picker.startDate,{},{timezone:false});var displayEndDate=field_utils.format[this.formatType](picker.endDate,{},{timezone:false});var changedStartDate=picker.startDate;var changedEndDate=picker.endDate;if(this.isDateField){changedStartDate=picker.startDate.add(session.getTZOffset(picker.startDate),'minutes');changedEndDate=picker.endDate.startOf('day').add(session.getTZOffset(picker.endDate),'minutes');}
if(this.relatedEndDate){this.$el.val(displayStartDate);changes[this.name]=this._parseValue(changedStartDate);changes[this.relatedEndDate]=this._parseValue(changedEndDate);}
if(this.relatedStartDate){this.$el.val(displayEndDate);changes[this.name]=this._parseValue(changedEndDate);changes[this.relatedStartDate]=this._parseValue(changedStartDate);}
this.trigger_up('field_changed',{dataPointID:this.dataPointID,viewType:this.viewType,changes:changes,});},_renderEdit:function(){this._super.apply(this,arguments);var self=this;var startDate;var endDate;if(this.relatedEndDate){startDate=this._formatValue(this.value);endDate=this._formatValue(this.recordData[this.relatedEndDate]);}
if(this.relatedStartDate){startDate=this._formatValue(this.recordData[this.relatedStartDate]);endDate=this._formatValue(this.value);}
this.dateRangePickerOptions.startDate=startDate||moment();this.dateRangePickerOptions.endDate=endDate||moment();this.$el.daterangepicker(this.dateRangePickerOptions);this.$el.on('apply.daterangepicker',this._applyChanges.bind(this));this.$el.off('keyup.daterangepicker');this.$pickerContainer=this.$el.data('daterangepicker').container;this.$pickerContainer.on('click',function(ev){ev.stopPropagation();if($(ev.target).hasClass('applyBtn')){self.$el.data('daterangepicker').hide();}});},});var FieldDate=InputField.extend({description:_lt("Date"),className:"o_field_date",tagName:"span",supportedFieldTypes:['date','datetime'],events:AbstractField.prototype.events,init:function(){this._super.apply(this,arguments);this.formatOptions.timezone=true;this.datepickerOptions=_.defaults({},this.nodeOptions.datepicker||{},{defaultDate:this.value});},start:function(){var self=this;var prom;if(this.mode==='edit'){this.datewidget=this._makeDatePicker();this.datewidget.on('datetime_changed',this,function(){var value=this._getValue();if((!value&&this.value)||(value&&!this._isSameValue(value))){this._setValue(value);}});prom=this.datewidget.appendTo('<div>').then(function(){self.datewidget.$el.addClass(self.$el.attr('class'));self._prepareInput(self.datewidget.$input);self._replaceElement(self.datewidget.$el);});}
return Promise.resolve(prom).then(this._super.bind(this));},activate:function(){if(this.isFocusable()&&this.datewidget){this.datewidget.focus();return true;}
return false;},_doDebouncedAction:function(){this.datewidget.changeDatetime();},_getValue:function(){return this.datewidget.getValue();},_isSameValue:function(value){if(value===false){return this.value===false;}
return value.isSame(this.value,'day');},_makeDatePicker:function(){return new datepicker.DateWidget(this,this.datepickerOptions);},_renderEdit:function(){this.datewidget.setValue(this.value);this.$input=this.datewidget.$input;},});var FieldDateTime=FieldDate.extend({description:_lt("Date & Time"),supportedFieldTypes:['datetime'],init:function(){this._super.apply(this,arguments);if(this.value){var offset=this.getSession().getTZOffset(this.value);var displayedValue=this.value.clone().add(offset,'minutes');this.datepickerOptions.defaultDate=displayedValue;}},_getValue:function(){var value=this.datewidget.getValue();return value&&value.add(-this.getSession().getTZOffset(value),'minutes');},_isSameValue:function(value){if(value===false){return this.value===false;}
return value.isSame(this.value);},_makeDatePicker:function(){return new datepicker.DateTimeWidget(this,this.datepickerOptions);},_renderEdit:function(){var value=this.value&&this.value.clone().add(this.getSession().getTZOffset(this.value),'minutes');this.datewidget.setValue(value);this.$input=this.datewidget.$input;},});var FieldMonetary=NumericField.extend({description:_lt("Monetary"),className:'o_field_monetary o_field_number',tagName:'span',supportedFieldTypes:['float','monetary'],resetOnAnyFieldChange:true,init:function(){this._super.apply(this,arguments);this._setCurrency();if(this.mode==='edit'){this.tagName='div';this.className+=' o_input';this.formatOptions.noSymbol=true;}
this.formatOptions.currency=this.currency;this.formatOptions.digits=[16,2];this.formatOptions.field_digits=this.nodeOptions.field_digits;},isSet:function(){return this.value===0||this._super.apply(this,arguments);},_renderEdit:function(){this.$el.empty();var def=this._prepareInput(this.$input).appendTo(this.$el);if(this.currency){var $currencySymbol=$('<span>',{text:this.currency.symbol});if(this.currency.position==="after"){this.$el.append($currencySymbol);}else{this.$el.prepend($currencySymbol);}}
return def;},_renderReadonly:function(){this.$el.html(this._formatValue(this.value));},_reset:function(){this._super.apply(this,arguments);this._setCurrency();},_setCurrency:function(){var currencyField=this.nodeOptions.currency_field||this.field.currency_field||'currency_id';var currencyID=this.record.data[currencyField]&&this.record.data[currencyField].res_id;this.currency=session.get_currency(currencyID);this.formatOptions.currency=this.currency;},});var FieldBoolean=AbstractField.extend({className:'o_field_boolean',description:_lt("Checkbox"),events:_.extend({},AbstractField.prototype.events,{change:'_onChange',}),supportedFieldTypes:['boolean'],activate:function(options){var activated=this._super.apply(this,arguments);if(activated&&options&&options.event&&$(options.event.target).closest('.custom-control.custom-checkbox').length){this._setValue(!this.value);}
return activated;},getFocusableElement:function(){return this.mode==='readonly'?$():this.$input;},isSet:function(){return true;},reset:function(record,event){var rendered=this._super.apply(this,arguments);if(event&&event.target.name===this.name){this.activate();}
return rendered;},setIDForLabel:function(id){this._super.apply(this,arguments);this.$('.custom-control-label').attr('for',id);},_render:function(){var $checkbox=this._formatValue(this.value);this.$input=$checkbox.find('input');this.$input.prop('disabled',this.mode==='readonly');this.$el.addClass($checkbox.attr('class'));this.$el.empty().append($checkbox.contents());},_onChange:function(){this._setValue(this.$input[0].checked);},_onKeydown:function(ev){switch(ev.which){case $.ui.keyCode.ENTER:ev.preventDefault();this.$input.prop('checked',!this.value);this._setValue(!this.value);return;case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:ev.preventDefault();}
this._super.apply(this,arguments);},});var FieldInteger=NumericField.extend({description:_lt("Integer"),className:'o_field_integer o_field_number',supportedFieldTypes:['integer'],_formatValue:function(value){if(typeof value==='string'){if(!/^[0-9]+-/.test(value)){throw new Error('"'+value+'" is not an integer or a virtual id');}
return value;}
return this._super.apply(this,arguments);},});var FieldFloat=NumericField.extend({description:_lt("Decimal"),className:'o_field_float o_field_number',supportedFieldTypes:['float'],init:function(){this._super.apply(this,arguments);if(this.attrs.digits){this.nodeOptions.digits=JSON.parse(this.attrs.digits);}},});var FieldFloatTime=FieldFloat.extend({description:_lt("Time"),formatType:'float_time',init:function(){this._super.apply(this,arguments);this.formatType='float_time';}});var FieldFloatFactor=FieldFloat.extend({supportedFieldTypes:['float'],className:'o_field_float_factor',formatType:'float_factor',init:function(){this._super.apply(this,arguments);if(!this.nodeOptions.factor){this.nodeOptions.factor=1;}
this.parseOptions=this.nodeOptions;}});var FieldFloatToggle=AbstractField.extend({supportedFieldTypes:['float'],formatType:'float_factor',className:'o_field_float_toggle',tagName:'span',events:{click:'_onClick'},init:function(){this._super.apply(this,arguments);this.formatType='float_factor';if(this.mode==='edit'){this.tagName='button';}
if(this.attrs.digits){this.nodeOptions.digits=JSON.parse(this.attrs.digits);}
if(!this.nodeOptions.factor){this.nodeOptions.factor=1;}
if(!this.nodeOptions.range){this.nodeOptions.range=[0.0,0.5,1.0];}
this.parseOptions=this.nodeOptions;},_getDisplayedValue:function(){var usrFormatValue=this._formatValue(this.value);return field_utils.parse['float'](usrFormatValue);},_renderEdit:function(){this.$el.text(this._formatValue(this.value));},_renderReadonly:function(){this.$el.text(this._formatValue(this.value));},_nextValue:function(){var range=this.nodeOptions.range;var val=utils.closestNumber(this._getDisplayedValue(),range);var index=_.indexOf(range,val);if(index!==-1){if(index+1<range.length){return range[index+1];}}
return range[0];},_onClick:function(ev){if(this.mode==='edit'){ev.stopPropagation();var next_val=this._nextValue();next_val=field_utils.format['float'](next_val);this._setValue(next_val);}},});var FieldPercentage=FieldFloat.extend({description:_lt("Percentage"),formatType:'percentage',});var FieldText=InputField.extend(TranslatableFieldMixin,{description:_lt("Multiline Text"),className:'o_field_text',supportedFieldTypes:['text'],tagName:'span',init:function(){this._super.apply(this,arguments);if(this.mode==='edit'){this.tagName='textarea';}
this.autoResizeOptions={parent:this};},start:function(){if(this.mode==='edit'){dom.autoresize(this.$el,this.autoResizeOptions);if(this.field.translate){this.$el=this.$el.add(this._renderTranslateButton());this.$el.addClass('o_field_translate');}}
return this._super();},reset:function(){var self=this;return Promise.resolve(this._super.apply(this,arguments)).then(function(){if(self.mode==='edit'){self.$input.trigger('change');}});},_onKeydown:function(ev){if(ev.which===$.ui.keyCode.ENTER){ev.stopPropagation();return;}
this._super.apply(this,arguments);},});var ListFieldText=FieldText.extend({init:function(){this._super.apply(this,arguments);this.autoResizeOptions.min_height=0;},});var HandleWidget=AbstractField.extend({description:_lt("Handle"),noLabel:true,className:'o_row_handle fa fa-arrows ui-sortable-handle',widthInList:'33px',tagName:'span',supportedFieldTypes:['integer'],isSet:function(){return true;},});var FieldEmail=InputField.extend({description:_lt("Email"),className:'o_field_email',events:_.extend({},InputField.prototype.events,{'click':'_onClick',}),prefix:'mailto',supportedFieldTypes:['char'],init:function(){this._super.apply(this,arguments);this.tagName=this.mode==='readonly'?'a':'input';},getFocusableElement:function(){return this.mode==='readonly'?this.$el:this._super.apply(this,arguments);},_renderReadonly:function(){this.$el.text(this.value).addClass('o_form_uri o_text_overflow').attr('href',this.prefix+':'+this.value);},_onClick:function(ev){ev.stopPropagation();},});var FieldPhone=FieldEmail.extend({description:_lt("Phone"),className:'o_field_phone',prefix:'tel',_renderReadonly:function(){this._super();this.$el.removeClass('o_text_overflow');},});var UrlWidget=InputField.extend({description:_lt("URL"),className:'o_field_url',events:_.extend({},InputField.prototype.events,{'click':'_onClick',}),supportedFieldTypes:['char'],init:function(){this._super.apply(this,arguments);this.tagName=this.mode==='readonly'?'a':'input';},getFocusableElement:function(){return this.mode==='readonly'?this.$el:this._super.apply(this,arguments);},_renderReadonly:function(){this.$el.text(this.attrs.text||this.value).addClass('o_form_uri o_text_overflow').attr('target','_blank').attr('href',this.value);},_onClick:function(ev){ev.stopPropagation();},});var CopyClipboard={destroy:function(){this._super.apply(this,arguments);if(this.clipboard){this.clipboard.destroy();}},_initClipboard:function(){var self=this;var $clipboardBtn=this.$('.o_clipboard_button');$clipboardBtn.tooltip({title:_t('Copied !'),trigger:'manual',placement:'right'});this.clipboard=new ClipboardJS($clipboardBtn[0],{text:function(){return self.value.trim();},container:self.$el[0]});this.clipboard.on('success',function(){_.defer(function(){$clipboardBtn.tooltip('show');_.delay(function(){$clipboardBtn.tooltip('hide');},800);});});},_render:function(){this._super.apply(this,arguments);this.$el.addClass('o_field_copy');},_renderReadonly:function(){this._super.apply(this,arguments);if(this.value){this.$el.append($(qweb.render(this.clipboardTemplate)));this._initClipboard();}}};var TextCopyClipboard=FieldText.extend(CopyClipboard,{description:_lt("Copy to Clipboard"),clipboardTemplate:'CopyClipboardText',});var CharCopyClipboard=FieldChar.extend(CopyClipboard,{description:_lt("Copy to Clipboard"),clipboardTemplate:'CopyClipboardChar',});var AbstractFieldBinary=AbstractField.extend({events:_.extend({},AbstractField.prototype.events,{'change .o_input_file':'on_file_change','click .o_select_file_button':function(){this.$('.o_input_file').click();},'click .o_clear_file_button':'_onClearClick',}),init:function(parent,name,record){this._super.apply(this,arguments);this.fields=record.fields;this.useFileAPI=!!window.FileReader;this.max_upload_size=25*1024*1024;if(!this.useFileAPI){var self=this;this.fileupload_id=_.uniqueId('o_fileupload');$(window).on(this.fileupload_id,function(){var args=[].slice.call(arguments).slice(1);self.on_file_uploaded.apply(self,args);});}},destroy:function(){if(this.fileupload_id){$(window).off(this.fileupload_id);}
this._super.apply(this,arguments);},on_file_change:function(e){var self=this;var file_node=e.target;if((this.useFileAPI&&file_node.files.length)||(!this.useFileAPI&&$(file_node).val()!=='')){if(this.useFileAPI){var file=file_node.files[0];if(file.size>this.max_upload_size){var msg=_t("The selected file exceed the maximum file size of %s.");this.do_warn(_t("File upload"),_.str.sprintf(msg,utils.human_size(this.max_upload_size)));return false;}
utils.getDataURLFromFile(file).then(function(data){data=data.split(',')[1];self.on_file_uploaded(file.size,file.name,file.type,data);});}else{this.$('form.o_form_binary_form').submit();}
this.$('.o_form_binary_progress').show();this.$('button').hide();}},on_file_uploaded:function(size,name){if(size===false){this.do_warn(_t("File Upload"),_t("There was a problem while uploading your file"));console.warn("Error while uploading file : ",name);}else{this.on_file_uploaded_and_valid.apply(this,arguments);}
this.$('.o_form_binary_progress').hide();this.$('button').show();},on_file_uploaded_and_valid:function(size,name,content_type,file_base64){this.set_filename(name);this._setValue(file_base64);this._render();},set_filename:function(value){var filename=this.attrs.filename;if(filename&&filename in this.fields){var changes={};changes[filename]=value;this.trigger_up('field_changed',{dataPointID:this.dataPointID,changes:changes,viewType:this.viewType,});}},_clearFile:function(){var self=this;this.$('.o_input_file').val('');this.set_filename('');if(!this.isDestroyed()){this._setValue(false).then(function(){self._render();});}},_onClearClick:function(ev){this._clearFile();},});var FieldBinaryImage=AbstractFieldBinary.extend({description:_lt("Image"),fieldDependencies:_.extend({},AbstractFieldBinary.prototype.fieldDependencies,{__last_update:{type:'datetime'},}),template:'FieldBinaryImage',placeholder:"/web/static/src/img/placeholder.png",events:_.extend({},AbstractFieldBinary.prototype.events,{'click img':function(){if(this.mode==="readonly"){this.trigger_up('bounce_edit');}},}),supportedFieldTypes:['binary'],file_type_magic_word:{'/':'jpg','R':'gif','i':'png','P':'svg+xml',},_getImageUrl:function(model,res_id,field,unique){return session.url('/web/image',{model:model,id:JSON.stringify(res_id),field:field,unique:field_utils.format.datetime(unique).replace(/[^0-9]/g,''),});},_render:function(){var self=this;var url=this.placeholder;if(this.value){if(!utils.is_bin_size(this.value)){url='data:image/'+(this.file_type_magic_word[this.value[0]]||'png')+';base64,'+this.value;}else{var field=this.nodeOptions.preview_image||this.name;var unique=this.recordData.__last_update;url=this._getImageUrl(this.model,this.res_id,field,unique);}}
var $img=$(qweb.render("FieldBinaryImage-img",{widget:this,url:url}));var width=this.nodeOptions.size?this.nodeOptions.size[0]:this.attrs.width;var height=this.nodeOptions.size?this.nodeOptions.size[1]:this.attrs.height;if(width){$img.attr('width',width);$img.css('max-width',width+'px');}
if(height){$img.attr('height',height);$img.css('max-height',height+'px');}
this.$('> img').remove();this.$el.prepend($img);$img.one('error',function(){$img.attr('src',self.placeholder);self.do_warn(_t("Image"),_t("Could not display the selected image."));});return this._super.apply(this,arguments);},_renderReadonly:function(){this._super.apply(this,arguments);if(this.nodeOptions.zoom){var unique=this.recordData.__last_update;var url=this._getImageUrl(this.model,this.res_id,'image_1920',unique);var $img;var imageField=_.find(Object.keys(this.recordData),function(o){return o.startsWith('image_');});if(this.nodeOptions.background)
{if('tag'in this.nodeOptions){this.tagName=this.nodeOptions.tag;}
if('class'in this.attrs){this.$el.addClass(this.attrs.class);}
var urlThumb=this._getImageUrl(this.model,this.res_id,'image_128',unique);this.$el.empty();$img=this.$el;$img.css('backgroundImage','url('+urlThumb+')');}else{$img=this.$('img');}
if(this.recordData[imageField]){$img.attr('data-zoom',1);$img.attr('data-zoom-image',url);$img.zoomOdoo({event:'mouseenter',attach:'.o_content',attachToTarget:true,onShow:function(){if(this.$zoom.height()<256&&this.$zoom.width()<256){this.hide();}},beforeAttach:function(){this.$flyout.css({width:'512px',height:'512px'});},preventClicks:this.nodeOptions.preventClicks,});}}},});var KanbanFieldBinaryImage=FieldBinaryImage.extend({events:{},});var FieldBinaryFile=AbstractFieldBinary.extend({description:_lt("File"),template:'FieldBinaryFile',events:_.extend({},AbstractFieldBinary.prototype.events,{'click':function(event){if(this.mode==='readonly'&&this.value&&this.recordData.id){this.on_save_as(event);}},'click .o_input':function(){this.$('.o_input_file').click();},}),supportedFieldTypes:['binary'],init:function(){this._super.apply(this,arguments);this.filename_value=this.recordData[this.attrs.filename];},_renderReadonly:function(){this.do_toggle(!!this.value);if(this.value){this.$el.empty().append($("<span/>").addClass('fa fa-download'));if(this.recordData.id){this.$el.css('cursor','pointer');}else{this.$el.css('cursor','not-allowed');}
if(this.filename_value){this.$el.append(" "+this.filename_value);}}
if(!this.res_id){this.$el.css('cursor','not-allowed');}else{this.$el.css('cursor','pointer');}},_renderEdit:function(){if(this.value){this.$el.children().removeClass('o_hidden');this.$('.o_select_file_button').first().addClass('o_hidden');this.$('.o_input').eq(0).val(this.filename_value||this.value);}else{this.$el.children().addClass('o_hidden');this.$('.o_select_file_button').first().removeClass('o_hidden');}},set_filename:function(value){this._super.apply(this,arguments);this.filename_value=value;this.$('.o_save_file_button').prop('disabled',true);},on_save_as:function(ev){if(!this.value){this.do_warn(_t("Save As..."),_t("The field is empty, there's nothing to save !"));ev.stopPropagation();}else if(this.res_id){framework.blockUI();var filename_fieldname=this.attrs.filename;this.getSession().get_file({complete:framework.unblockUI,data:{'model':this.model,'id':this.res_id,'field':this.name,'filename_field':filename_fieldname,'filename':this.recordData[filename_fieldname]||"",'download':true,'data':utils.is_bin_size(this.value)?null:this.value,},error:(error)=>this.call('crash_manager','rpc_error',error),url:'/web/content',});ev.stopPropagation();}},});var FieldPdfViewer=FieldBinaryFile.extend({description:_lt("PDF Viewer"),supportedFieldTypes:['binary'],template:'FieldPdfViewer',init:function(){this._super.apply(this,arguments);this.PDFViewerApplication=false;},_disableButtons:function(iframe){$(iframe).contents().find('button#openFile').hide();},_getURI:function(fileURI){var page=this.recordData[this.name+'_page']||1;if(!fileURI){var queryObj={model:this.model,field:this.name,id:this.res_id,};var queryString=$.param(queryObj);fileURI='/web/content?'+queryString;}
fileURI=encodeURIComponent(fileURI);var viewerURL='/web/static/lib/pdfjs/web/viewer.html?file=';return viewerURL+fileURI+'#page='+page;},_render:function(){var self=this;var $pdfViewer=this.$('.o_form_pdf_controls').children().add(this.$('.o_pdfview_iframe'));var $selectUpload=this.$('.o_select_file_button').first();var $iFrame=this.$('.o_pdfview_iframe');$iFrame.on('load',function(){self.PDFViewerApplication=this.contentWindow.window.PDFViewerApplication;self._disableButtons(this);});if(this.mode==="readonly"&&this.value){$iFrame.attr('src',this._getURI());}else{if(this.value){var binSize=utils.is_bin_size(this.value);$pdfViewer.removeClass('o_hidden');$selectUpload.addClass('o_hidden');if(binSize){$iFrame.attr('src',this._getURI());}}else{$pdfViewer.addClass('o_hidden');$selectUpload.removeClass('o_hidden');}}},on_file_change:function(ev){this._super.apply(this,arguments);var files=ev.target.files;if(!files||files.length===0){return;}
var fileURI=URL.createObjectURL(files[0]);if(this.PDFViewerApplication){this.PDFViewerApplication.open(fileURI,0);}else{this.$('.o_pdfview_iframe').attr('src',this._getURI(fileURI));}},on_save_as:function(ev){ev.stopPropagation();},});var PriorityWidget=AbstractField.extend({description:_lt("Priority"),className:"o_priority",events:{'mouseover > a':'_onMouseOver','mouseout > a':'_onMouseOut','click > a':'_onClick',},supportedFieldTypes:['selection'],isSet:function(){return true;},_render:function(){var self=this;var index_value=this.value?_.findIndex(this.field.selection,function(v){return v[0]===self.value;}):0;this.$el.empty();this.empty_value=this.field.selection[0][0];_.each(this.field.selection.slice(1),function(choice,index){self.$el.append(self._renderStar('<a href="#">',index_value>=index+1,index+1,choice[1]));});},_renderStar:function(tag,isFull,index,tip){return $(tag).attr('title',tip).attr('aria-label',tip).attr('data-index',index).addClass('o_priority_star fa').toggleClass('fa-star',isFull).toggleClass('fa-star-o',!isFull);},_onClick:function(event){event.preventDefault();event.stopPropagation();var index=$(event.currentTarget).data('index');var newValue=this.field.selection[index][0];if(newValue===this.value){newValue=this.empty_value;}
this._setValue(newValue);},_onMouseOut:function(){clearTimeout(this.hoverTimer);var self=this;this.hoverTimer=setTimeout(function(){self._render();},200);},_onMouseOver:function(event){clearTimeout(this.hoverTimer);this.$('.o_priority_star').removeClass('fa-star-o').addClass('fa-star');$(event.currentTarget).nextAll().removeClass('fa-star').addClass('fa-star-o');},});var AttachmentImage=AbstractField.extend({className:'o_attachment_image',_render:function(){if(this.value){this.$el.empty().append($('<img>/',{src:"/web/image/"+this.value.data.id+"?unique=1",title:this.value.data.display_name,alt:_t("Image")}));}}});var StateSelectionWidget=AbstractField.extend({template:'FormSelection',events:{'click .dropdown-item':'_setSelection',},supportedFieldTypes:['selection'],_prepareDropdownValues:function(){var self=this;var _data=[];var current_stage_id=self.recordData.stage_id&&self.recordData.stage_id[0];var stage_data={id:current_stage_id,legend_normal:this.recordData.legend_normal||undefined,legend_blocked:this.recordData.legend_blocked||undefined,legend_done:this.recordData.legend_done||undefined,};_.map(this.field.selection||[],function(selection_item){var value={'name':selection_item[0],'tooltip':selection_item[1],};if(selection_item[0]==='normal'){value.state_name=stage_data.legend_normal?stage_data.legend_normal:selection_item[1];}else if(selection_item[0]==='done'){value.state_class='o_status_green';value.state_name=stage_data.legend_done?stage_data.legend_done:selection_item[1];}else{value.state_class='o_status_red';value.state_name=stage_data.legend_blocked?stage_data.legend_blocked:selection_item[1];}
_data.push(value);});return _data;},_render:function(){var states=this._prepareDropdownValues();var currentState=_.findWhere(states,{name:this.value})||states[0];this.$('.o_status').removeClass('o_status_red o_status_green').addClass(currentState.state_class).prop('special_click',true).parent().attr('title',currentState.state_name).attr('aria-label',currentState.state_name);var $items=$(qweb.render('FormSelection.items',{states:_.without(states,currentState)}));var $dropdown=this.$('.dropdown-menu');$dropdown.children().remove();$items.appendTo($dropdown);var isReadonly=this.record.evalModifiers(this.attrs.modifiers).readonly;this.$('a[data-toggle=dropdown]').toggleClass('disabled',isReadonly||false);},_setSelection:function(ev){ev.preventDefault();var $item=$(ev.currentTarget);var value=String($item.data('value'));this._setValue(value);if(this.mode==='edit'){this._render();}},});var FavoriteWidget=AbstractField.extend({className:'o_favorite',events:{'click':'_setFavorite'},supportedFieldTypes:['boolean'],isSet:function(){return true;},_render:function(){var tip=this.value?_t('Remove from Favorites'):_t('Add to Favorites');var template=this.attrs.nolabel?'<a href="#"><i class="fa %s" title="%s" aria-label="%s" role="img"></i></a>':'<a href="#"><i class="fa %s" role="img" aria-label="%s"></i> %s</a>';this.$el.empty().append(_.str.sprintf(template,this.value?'fa-star':'fa-star-o',tip,tip));},_setFavorite:function(event){event.preventDefault();event.stopPropagation();this._setValue(!this.value);},});var LabelSelection=AbstractField.extend({supportedFieldTypes:['selection'],_render:function(){this.classes=this.nodeOptions&&this.nodeOptions.classes||{};var labelClass=this.classes[this.value]||'primary';this.$el.addClass('badge badge-'+labelClass).text(this._formatValue(this.value));},});var BooleanToggle=FieldBoolean.extend({description:_lt("Toggle"),className:FieldBoolean.prototype.className+' o_boolean_toggle',events:{'click':'_onClick'},_onClick:function(event){event.stopPropagation();this._setValue(!this.value);this.$el.closest(".o_data_row").toggleClass('text-muted',this.value);},});var StatInfo=AbstractField.extend({supportedFieldTypes:['integer','float'],isSet:function(){return true;},_render:function(){var options={value:this._formatValue(this.value||0),};if(!this.attrs.nolabel){if(this.nodeOptions.label_field&&this.recordData[this.nodeOptions.label_field]){options.text=this.recordData[this.nodeOptions.label_field];}else{options.text=this.string;}}
this.$el.html(qweb.render("StatInfo",options));this.$el.addClass('o_stat_info');},});var FieldPercentPie=AbstractField.extend({description:_lt("Percentage Pie"),template:'FieldPercentPie',supportedFieldTypes:['integer','float'],start:function(){this.$leftMask=this.$('.o_mask').first();this.$rightMask=this.$('.o_mask').last();this.$pieValue=this.$('.o_pie_value');return this._super();},isSet:function(){return true;},_render:function(){var value=this.value||0;var degValue=360*value/100;this.$rightMask.toggleClass('o_full',degValue>=180);var leftDeg='rotate('+((degValue<180)?180:degValue)+'deg)';var rightDeg='rotate('+((degValue<180)?degValue:0)+'deg)';this.$leftMask.css({transform:leftDeg,msTransform:leftDeg,mozTransform:leftDeg,webkitTransform:leftDeg});this.$rightMask.css({transform:rightDeg,msTransform:rightDeg,mozTransform:rightDeg,webkitTransform:rightDeg});this.$pieValue.text(Math.round(value)+'%');},});var FieldProgressBar=AbstractField.extend({description:_lt("Progress Bar"),template:"ProgressBar",events:{'change input':'on_change_input','input input':'on_change_input','keyup input':function(e){if(e.which===$.ui.keyCode.ENTER){this.on_change_input(e);}},},supportedFieldTypes:['integer','float'],init:function(){this._super.apply(this,arguments);if(this.recordData[this.nodeOptions.current_value]){this.value=this.recordData[this.nodeOptions.current_value];}
this.editable_readonly=!!this.nodeOptions.editable_readonly;this.readonly=this.nodeOptions.readonly||!this.nodeOptions.editable;this.canWrite=!this.readonly&&(this.mode==='edit'||(this.editable_readonly&&this.mode==='readonly')||(this.viewType==='kanban'));this.edit_max_value=!!this.nodeOptions.edit_max_value;this.max_value=this.recordData[this.nodeOptions.max_value]||100;this.title=_t(this.attrs.title||this.nodeOptions.title)||'';this.enableBarAsInput=false;this.edit_on_click=this.enableBarAsInput&&this.mode==='readonly'&&!this.edit_max_value;this.write_mode=false;},_render:function(){var self=this;this._render_value();if(this.canWrite){if(this.edit_on_click){this.$el.on('click','.o_progress',function(e){var $target=$(e.currentTarget);var numValue=Math.floor((e.pageX-$target.offset().left)/$target.outerWidth()*self.max_value);self.on_update(numValue);self._render_value();});}else{this.$el.on('click',function(){if(!self.write_mode){var $input=$('<input>',{type:'text',class:'o_progressbar_value o_input'});$input.on('blur',self.on_change_input.bind(self));self.$('.o_progressbar_value').replaceWith($input);self.write_mode=true;self._render_value();}});}}
return this._super();},on_update:function(value){if(this.edit_max_value){this.max_value=value;this._isValid=true;var changes={};changes[this.nodeOptions.max_value]=this.max_value;this.trigger_up('field_changed',{dataPointID:this.dataPointID,changes:changes,});}else{var formattedValue=this._formatValue(value);this._setValue(formattedValue);}},on_change_input:function(e){var $input=$(e.target);if(e.type==='change'&&!$input.is(':focus')){return;}
var parsedValue;try{parsedValue=field_utils.parse.float($input.val());}catch(error){this.do_warn(_t("Wrong value entered!"),_t("Only Integer or Float Value should be valid."));}
if(parsedValue!==undefined){if(e.type==='input'){this._render_value(parsedValue);if(parsedValue===0){$input.select();}}else{if(this.edit_max_value){parsedValue=parsedValue||100;}
var $div=$('<div>',{class:'o_progressbar_value'});this.$('.o_progressbar_value').replaceWith($div);this.write_mode=false;this.on_update(parsedValue);this._render_value();}}},_render_value:function(v){var value=this.value;var max_value=this.max_value;if(!isNaN(v)){if(this.edit_max_value){max_value=v;}else{value=v;}}
value=value||0;max_value=max_value||0;var widthComplete;if(value<=max_value){widthComplete=value/max_value*100;}else{widthComplete=100;}
this.$('.o_progress').toggleClass('o_progress_overflow',value>max_value).attr('aria-valuemin','0').attr('aria-valuemax',max_value).attr('aria-valuenow',value);this.$('.o_progressbar_complete').css('width',widthComplete+'%');if(!this.write_mode){if(max_value!==100){this.$('.o_progressbar_value').text(utils.human_number(value)+" / "+utils.human_number(max_value));}else{this.$('.o_progressbar_value').text(utils.human_number(value)+"%");}}else if(isNaN(v)){this.$('.o_progressbar_value').val(this.edit_max_value?max_value:value);this.$('.o_progressbar_value').focus().select();}},_reset:function(){this._super.apply(this,arguments);var new_max_value=this.recordData[this.nodeOptions.max_value];this.max_value=new_max_value!==undefined?new_max_value:this.max_value;},isSet:function(){return true;},});var FieldToggleBoolean=AbstractField.extend({description:_lt("Button"),template:"toggle_button",events:{'click':'_onToggleButton'},supportedFieldTypes:['boolean'],isSet:function(){return true;},_render:function(){this.$('i').toggleClass('o_toggle_button_success',!!this.value).toggleClass('text-muted',!this.value);var title=this.value?this.attrs.options.active:this.attrs.options.inactive;this.$el.attr('title',title);this.$el.attr('aria-pressed',this.value);},_onToggleButton:function(event){event.stopPropagation();this._setValue(!this.value);},});var JournalDashboardGraph=AbstractField.extend({className:"o_dashboard_graph",jsLibs:['/web/static/lib/Chart/Chart.js',],init:function(){this._super.apply(this,arguments);this.graph_type=this.attrs.graph_type;this.data=JSON.parse(this.value);},on_attach_callback:function(){this._isInDOM=true;this._renderInDOM();},on_detach_callback:function(){this._isInDOM=false;},_render:function(){if(this._isInDOM){return this._renderInDOM();}
return Promise.resolve();},_renderInDOM:function(){this.$el.empty();var config,cssClass;if(this.graph_type==='line'){config=this._getLineChartConfig();cssClass='o_graph_linechart';}else if(this.graph_type==='bar'){config=this._getBarChartConfig();cssClass='o_graph_barchart';}
this.$canvas=$('<canvas/>');this.$el.addClass(cssClass);this.$el.empty();this.$el.append(this.$canvas);var context=this.$canvas[0].getContext('2d');this.chart=new Chart(context,config);},_getLineChartConfig:function(){var labels=this.data[0].values.map(function(pt){return pt.x;});var borderColor=this.data[0].is_sample_data?'#dddddd':'#875a7b';var backgroundColor=this.data[0].is_sample_data?'#ebebeb':'#dcd0d9';return{type:'line',data:{labels:labels,datasets:[{data:this.data[0].values,fill:'start',label:this.data[0].key,backgroundColor:backgroundColor,borderColor:borderColor,borderWidth:2,}]},options:{legend:{display:false},scales:{yAxes:[{display:false}],xAxes:[{display:false}]},maintainAspectRatio:false,elements:{line:{tension:0.000001}},tooltips:{intersect:false,position:'nearest',caretSize:0,},},};},_getBarChartConfig:function(){var data=[];var labels=[];var backgroundColor=[];this.data[0].values.forEach(function(pt){data.push(pt.value);labels.push(pt.label);var color=pt.type==='past'?'#ccbdc8':(pt.type==='future'?'#a5d8d7':'#ebebeb');backgroundColor.push(color);});return{type:'bar',data:{labels:labels,datasets:[{data:data,fill:'start',label:this.data[0].key,backgroundColor:backgroundColor,}]},options:{legend:{display:false},scales:{yAxes:[{display:false}],},maintainAspectRatio:false,tooltips:{intersect:false,position:'nearest',caretSize:0,},elements:{line:{tension:0.000001}},},};},});var FieldDomain=AbstractField.extend({specialData:"_fetchSpecialDomain",events:_.extend({},AbstractField.prototype.events,{"click .o_domain_show_selection_button":"_onShowSelectionButtonClick","click .o_field_domain_dialog_button":"_onDialogEditButtonClick",}),custom_events:_.extend({},AbstractField.prototype.custom_events,{domain_changed:"_onDomainSelectorValueChange",domain_selected:"_onDomainSelectorDialogValueChange",open_record:"_onOpenRecord",}),init:function(){this._super.apply(this,arguments);this.inDialog=!!this.nodeOptions.in_dialog;this.fsFilters=this.nodeOptions.fs_filters||{};this.className="o_field_domain";if(this.mode==="edit"){this.className+=" o_edit_mode";}
if(!this.inDialog){this.className+=" o_inline_mode";}
this._setState();},isSet:function(){return true;},isValid:function(){return(this._super.apply(this,arguments)&&(!this.domainSelector||this.domainSelector.isValid())&&this._isValidForModel);},_render:function(){if(!this._domainModel){this._replaceContent();return Promise.resolve();}
var value=this.value||"[]";var def;if(!this.domainSelector){this.domainSelector=new DomainSelector(this,this._domainModel,value,{readonly:this.mode==="readonly"||this.inDialog,filters:this.fsFilters,debugMode:config.isDebug(),});def=this.domainSelector.prependTo(this.$el);}else{def=this.domainSelector.setDomain(value);}
return def.then(this._replaceContent.bind(this));},_replaceContent:function(){if(this._$content){this._$content.remove();}
this._$content=$(qweb.render("FieldDomain.content",{hasModel:!!this._domainModel,isValid:!!this._isValidForModel,nbRecords:this.record.specialData[this.name].nbRecords||0,inDialogEdit:this.inDialog&&this.mode==="edit",}));this._$content.appendTo(this.$el);},_reset:function(){this._super.apply(this,arguments);var oldDomainModel=this._domainModel;this._setState();if(this.domainSelector&&this._domainModel!==oldDomainModel){this.domainSelector.destroy();this.domainSelector=null;}},_setState:function(){var specialData=this.record.specialData[this.name];this._domainModel=specialData.model;this._isValidForModel=(specialData.nbRecords!==false);},_onShowSelectionButtonClick:function(e){e.preventDefault();new view_dialogs.SelectCreateDialog(this,{title:_t("Selected records"),res_model:this._domainModel,context:this.record.getContext({fieldName:this.name,viewType:this.viewType}),domain:this.value||"[]",no_create:true,readonly:true,disable_multiple_selection:true,}).open();},_onDialogEditButtonClick:function(e){e.preventDefault();new DomainSelectorDialog(this,this._domainModel,this.value||"[]",{readonly:this.mode==="readonly",filters:this.fsFilters,debugMode:config.isDebug(),}).open();},_onDomainSelectorValueChange:function(e){if(this.inDialog)return;this._setValue(Domain.prototype.arrayToString(this.domainSelector.getDomain()));},_onDomainSelectorDialogValueChange:function(e){this._setValue(Domain.prototype.arrayToString(e.data.domain));},_onOpenRecord:function(event){event.stopPropagation();},});var AceEditor=DebouncedField.extend({template:"AceEditor",jsLibs:['/web/static/lib/ace/ace.js',['/web/static/lib/ace/mode-python.js','/web/static/lib/ace/mode-xml.js']],events:{},start:function(){this._startAce(this.$('.ace-view-editor')[0]);return this._super.apply(this,arguments);},destroy:function(){if(this.aceEditor){this.aceEditor.destroy();}
this._super.apply(this,arguments);},_formatValue:function(value){return this._super.apply(this,arguments)||'';},_getValue:function(){return this.aceSession.getValue();},_render:function(){var newValue=this._formatValue(this.value);if(this.aceSession.getValue()!==newValue){this.aceSession.setValue(newValue);}},_startAce:function(node){this.aceEditor=ace.edit(node);this.aceEditor.setOptions({maxLines:Infinity,showPrintMargin:false,});if(this.mode==='readonly'){this.aceEditor.renderer.setOptions({displayIndentGuides:false,showGutter:false,});this.aceEditor.setOptions({highlightActiveLine:false,highlightGutterLine:false,readOnly:true,});this.aceEditor.renderer.$cursorLayer.element.style.display="none";}
this.aceEditor.$blockScrolling=true;this.aceSession=this.aceEditor.getSession();this.aceSession.setOptions({useWorker:false,mode:"ace/mode/"+(this.nodeOptions.mode||'xml'),tabSize:2,useSoftTabs:true,});if(this.mode==="edit"){this.aceEditor.on("change",this._doDebouncedAction.bind(this));this.aceEditor.on("blur",this._doAction.bind(this));}},});var FieldColor=AbstractField.extend({template:'FieldColor',events:_.extend({},AbstractField.prototype.events,{'click .o_field_color':'_onColorClick',}),custom_events:_.extend({},AbstractField.prototype.custom_events,{'colorpicker:saved':'_onColorpickerSaved',}),getFocusableElement:function(){return this.$('.o_field_color');},_render:function(){this.$('.o_field_color').data('value',this.value).css('background-color',this.value).attr('title',this.value);return this._super.apply(this,arguments);},_onColorClick:function(){if(this.mode==='edit'){const dialog=new ColorpickerDialog(this,{defaultColor:this.value,noTransparency:true,}).open();dialog.on('closed',this,()=>{Promise.resolve().then(()=>{this.getFocusableElement().focus();});});}},_onColorpickerSaved:function(ev){this._setValue(ev.data.hex);},_onKeydown:function(ev){if(ev.which===$.ui.keyCode.ENTER){ev.preventDefault();ev.stopPropagation();this._onColorClick(ev);}else{this._super.apply(this,arguments);}},});return{TranslatableFieldMixin:TranslatableFieldMixin,DebouncedField:DebouncedField,FieldEmail:FieldEmail,FieldBinaryFile:FieldBinaryFile,FieldPdfViewer:FieldPdfViewer,AbstractFieldBinary:AbstractFieldBinary,FieldBinaryImage:FieldBinaryImage,KanbanFieldBinaryImage:KanbanFieldBinaryImage,FieldBoolean:FieldBoolean,BooleanToggle:BooleanToggle,FieldChar:FieldChar,LinkButton:LinkButton,FieldDate:FieldDate,FieldDateTime:FieldDateTime,FieldDateRange:FieldDateRange,FieldDomain:FieldDomain,FieldFloat:FieldFloat,FieldFloatTime:FieldFloatTime,FieldFloatFactor:FieldFloatFactor,FieldFloatToggle:FieldFloatToggle,FieldPercentage:FieldPercentage,FieldInteger:FieldInteger,FieldMonetary:FieldMonetary,FieldPercentPie:FieldPercentPie,FieldPhone:FieldPhone,FieldProgressBar:FieldProgressBar,FieldText:FieldText,ListFieldText:ListFieldText,FieldToggleBoolean:FieldToggleBoolean,HandleWidget:HandleWidget,InputField:InputField,NumericField:NumericField,AttachmentImage:AttachmentImage,LabelSelection:LabelSelection,StateSelectionWidget:StateSelectionWidget,FavoriteWidget:FavoriteWidget,PriorityWidget:PriorityWidget,StatInfo:StatInfo,UrlWidget:UrlWidget,TextCopyClipboard:TextCopyClipboard,CharCopyClipboard:CharCopyClipboard,JournalDashboardGraph:JournalDashboardGraph,AceEditor:AceEditor,FieldColor:FieldColor,};});;

/* /web/static/src/js/fields/field_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web.field_registry',function(require){"use strict";var Registry=require('web.Registry');return new Registry();});odoo.define('web._field_registry',function(require){"use strict";var AbstractField=require('web.AbstractField');var basic_fields=require('web.basic_fields');var relational_fields=require('web.relational_fields');var registry=require('web.field_registry');var special_fields=require('web.special_fields');registry.add('abstract',AbstractField).add('input',basic_fields.InputField).add('integer',basic_fields.FieldInteger).add('boolean',basic_fields.FieldBoolean).add('date',basic_fields.FieldDate).add('datetime',basic_fields.FieldDateTime).add('daterange',basic_fields.FieldDateRange).add('domain',basic_fields.FieldDomain).add('text',basic_fields.FieldText).add('list.text',basic_fields.ListFieldText).add('html',basic_fields.FieldText).add('float',basic_fields.FieldFloat).add('char',basic_fields.FieldChar).add('link_button',basic_fields.LinkButton).add('handle',basic_fields.HandleWidget).add('email',basic_fields.FieldEmail).add('phone',basic_fields.FieldPhone).add('url',basic_fields.UrlWidget).add('CopyClipboardText',basic_fields.TextCopyClipboard).add('CopyClipboardChar',basic_fields.CharCopyClipboard).add('image',basic_fields.FieldBinaryImage).add('kanban.image',basic_fields.KanbanFieldBinaryImage).add('binary',basic_fields.FieldBinaryFile).add('pdf_viewer',basic_fields.FieldPdfViewer).add('monetary',basic_fields.FieldMonetary).add('percentage',basic_fields.FieldPercentage).add('priority',basic_fields.PriorityWidget).add('attachment_image',basic_fields.AttachmentImage).add('label_selection',basic_fields.LabelSelection).add('kanban_label_selection',basic_fields.LabelSelection).add('state_selection',basic_fields.StateSelectionWidget).add('kanban_state_selection',basic_fields.StateSelectionWidget).add('boolean_favorite',basic_fields.FavoriteWidget).add('boolean_toggle',basic_fields.BooleanToggle).add('statinfo',basic_fields.StatInfo).add('percentpie',basic_fields.FieldPercentPie).add('float_time',basic_fields.FieldFloatTime).add('float_factor',basic_fields.FieldFloatFactor).add('float_toggle',basic_fields.FieldFloatToggle).add('progressbar',basic_fields.FieldProgressBar).add('toggle_button',basic_fields.FieldToggleBoolean).add('dashboard_graph',basic_fields.JournalDashboardGraph).add('ace',basic_fields.AceEditor).add('color',basic_fields.FieldColor);registry.add('selection',relational_fields.FieldSelection).add('radio',relational_fields.FieldRadio).add('selection_badge',relational_fields.FieldSelectionBadge).add('many2one',relational_fields.FieldMany2One).add('many2one_barcode',relational_fields.Many2oneBarcode).add('list.many2one',relational_fields.ListFieldMany2One).add('kanban.many2one',relational_fields.KanbanFieldMany2One).add('many2many',relational_fields.FieldMany2Many).add('many2many_binary',relational_fields.FieldMany2ManyBinaryMultiFiles).add('many2many_tags',relational_fields.FieldMany2ManyTags).add('many2many_tags_avatar',relational_fields.FieldMany2ManyTagsAvatar).add('form.many2many_tags',relational_fields.FormFieldMany2ManyTags).add('kanban.many2many_tags',relational_fields.KanbanFieldMany2ManyTags).add('many2many_checkboxes',relational_fields.FieldMany2ManyCheckBoxes).add('one2many',relational_fields.FieldOne2Many).add('statusbar',relational_fields.FieldStatus).add('reference',relational_fields.FieldReference).add('font',relational_fields.FieldSelectionFont);registry.add('timezone_mismatch',special_fields.FieldTimezoneMismatch).add('report_layout',special_fields.FieldReportLayout);});;

/* /web/static/src/js/views/basic/widget_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web.widget_registry',function(require){"use strict";var Registry=require('web.Registry');return new Registry();});;

/* /web/static/src/js/fields/field_utils.js defined in bundle 'web.assets_backend' */
odoo.define('web.field_utils',function(require){"use strict";var core=require('web.core');var dom=require('web.dom');var session=require('web.session');var time=require('web.time');var utils=require('web.utils');var _t=core._t;function formatBinary(value,field,options){if(!value){return'';}
return utils.binaryToBinsize(value);}
function formatBoolean(value,field,options){if(options&&options.forceString){return value?_t('True'):_t('False');}
return dom.renderCheckbox({prop:{checked:value,disabled:true,},});}
function formatChar(value,field,options){value=typeof value==='string'?value:'';if(options&&options.isPassword){return _.str.repeat('*',value?value.length:0);}
if(options&&options.escape){value=_.escape(value);}
return value;}
function formatDate(value,field,options){if(value===false||isNaN(value)){return"";}
if(field&&field.type==='datetime'){if(!options||!('timezone'in options)||options.timezone){value=value.clone().add(session.getTZOffset(value),'minutes');}}
var date_format=time.getLangDateFormat();return value.format(date_format);}
function formatDateTime(value,field,options){if(value===false){return"";}
if(!options||!('timezone'in options)||options.timezone){value=value.clone().add(session.getTZOffset(value),'minutes');}
return value.format(time.getLangDatetimeFormat());}
function formatFloat(value,field,options){options=options||{};if(value===false){return"";}
if(options.humanReadable&&options.humanReadable(value)){return utils.human_number(value,options.decimals,options.minDigits,options.formatterCallback);}
var l10n=core._t.database.parameters;var precision;if(options.digits){precision=options.digits[1];}else if(field&&field.digits){precision=field.digits[1];}else{precision=2;}
var formatted=_.str.sprintf('%.'+precision+'f',value||0).split('.');formatted[0]=utils.insert_thousand_seps(formatted[0]);return formatted.join(l10n.decimal_point);}
function formatFloatFactor(value,field,options){var factor=options.factor||1;return formatFloat(value*factor,field,options);}
function formatFloatTime(value){var pattern='%02d:%02d';if(value<0){value=Math.abs(value);pattern='-'+pattern;}
var hour=Math.floor(value);var min=Math.round((value%1)*60);if(min===60){min=0;hour=hour+1;}
return _.str.sprintf(pattern,hour,min);}
function formatInteger(value,field,options){options=options||{};if(options.isPassword){return _.str.repeat('*',String(value).length);}
if(!value&&value!==0){return"";}
if(options.humanReadable&&options.humanReadable(value)){return utils.human_number(value,options.decimals,options.minDigits,options.formatterCallback);}
return utils.insert_thousand_seps(_.str.sprintf('%d',value));}
function formatMany2one(value,field,options){value=value&&(_.isArray(value)?value[1]:value.data.display_name)||'';if(options&&options.escape){value=_.escape(value);}
return value;}
function formatX2Many(value){if(value.data.length===0){return _t('No records');}else if(value.data.length===1){return _t('1 record');}else{return value.data.length+_t(' records');}}
function formatMonetary(value,field,options){if(value===false){return"";}
options=options||{};var currency=options.currency;if(!currency){var currency_id=options.currency_id;if(!currency_id&&options.data){var currency_field=options.currency_field||field.currency_field||'currency_id';currency_id=options.data[currency_field]&&options.data[currency_field].res_id;}
currency=session.get_currency(currency_id);}
var digits=(currency&&currency.digits)||options.digits;if(options.field_digits===true){digits=field.digits||digits;}
var formatted_value=formatFloat(value,field,_.extend({},options,{digits:digits}));if(!currency||options.noSymbol){return formatted_value;}
if(currency.position==="after"){return formatted_value+='&nbsp;'+currency.symbol;}else{return currency.symbol+'&nbsp;'+formatted_value;}}
function formatPercentage(value,field,options){options=options||{};var result=formatFloat(value*100,field,options)||'0';if(options.humanReadable&&options.humanReadable(value*100)){return result+"%";}
return(parseFloat(result)+"%").replace('.',_t.database.parameters.decimal_point);}
function formatSelection(value,field,options){var val=_.find(field.selection,function(option){return option[0]===value;});if(!val){return'';}
value=val[1];if(options&&options.escape){value=_.escape(value);}
return value;}
function parseDate(value,field,options){if(!value){return false;}
var datePattern=time.getLangDateFormat();var datePatternWoZero=datePattern.replace('MM','M').replace('DD','D');var date;if(options&&options.isUTC){date=moment.utc(value);}else{date=moment.utc(value,[datePattern,datePatternWoZero,moment.ISO_8601]);}
if(date.isValid()){if(date.year()===0){date.year(moment.utc().year());}
if(date.year()>=1900){date.toJSON=function(){return this.clone().locale('en').format('YYYY-MM-DD');};return date;}}
throw new Error(_.str.sprintf(core._t("'%s' is not a correct date"),value));}
function parseDateTime(value,field,options){if(!value){return false;}
var datePattern=time.getLangDateFormat(),timePattern=time.getLangTimeFormat();var datePatternWoZero=datePattern.replace('MM','M').replace('DD','D'),timePatternWoZero=timePattern.replace('HH','H').replace('mm','m').replace('ss','s');var pattern1=datePattern+' '+timePattern;var pattern2=datePatternWoZero+' '+timePatternWoZero;var datetime;if(options&&options.isUTC){datetime=moment.utc(value.replace(' ','T')+'Z');}else{datetime=moment.utc(value,[pattern1,pattern2,moment.ISO_8601]);if(options&&options.timezone){datetime.add(-session.getTZOffset(datetime),'minutes');}}
if(datetime.isValid()){if(datetime.year()===0){datetime.year(moment.utc().year());}
if(datetime.year()>=1900){datetime.toJSON=function(){return this.clone().locale('en').format('YYYY-MM-DD HH:mm:ss');};return datetime;}}
throw new Error(_.str.sprintf(core._t("'%s' is not a correct datetime"),value));}
function parseNumber(value){if(core._t.database.parameters.thousands_sep){var escapedSep=_.str.escapeRegExp(core._t.database.parameters.thousands_sep);value=value.replace(new RegExp(escapedSep,'g'),'');}
if(core._t.database.parameters.decimal_point){value=value.replace(core._t.database.parameters.decimal_point,'.');}
return Number(value);}
function parseFloat(value){var parsed=parseNumber(value);if(isNaN(parsed)){throw new Error(_.str.sprintf(core._t("'%s' is not a correct float"),value));}
return parsed;}
function parseMonetary(value,field,options){var values=value.split('&nbsp;');if(values.length===1){return parseFloat(value);}
else if(values.length!==2){throw new Error(_.str.sprintf(core._t("'%s' is not a correct monetary field"),value));}
options=options||{};var currency=options.currency;if(!currency){var currency_id=options.currency_id;if(!currency_id&&options.data){var currency_field=options.currency_field||field.currency_field||'currency_id';currency_id=options.data[currency_field]&&options.data[currency_field].res_id;}
currency=session.get_currency(currency_id);}
return parseFloat(values[0]===currency.symbol?values[1]:values[0]);}
function parseFloatFactor(value,field,options){var parsed=parseFloat(value);var factor=options.factor||1.0;return parsed/factor;}
function parseFloatTime(value){var factor=1;if(value[0]==='-'){value=value.slice(1);factor=-1;}
var float_time_pair=value.split(":");if(float_time_pair.length!==2)
return factor*parseFloat(value);var hours=parseInteger(float_time_pair[0]);var minutes=parseInteger(float_time_pair[1]);return factor*(hours+(minutes/60));}
function parsePercentage(value){if(value.slice(-1)==='%'){return parseFloat(value.slice(0,-1))/100;}
return parseFloat(value);}
function parseInteger(value){var parsed=parseNumber(value);if(isNaN(parsed)||parsed%1||parsed<-2147483648||parsed>2147483647){throw new Error(_.str.sprintf(core._t("'%s' is not a correct integer"),value));}
return parsed;}
function parseMany2one(value){if(_.isArray(value)){return{id:value[0],display_name:value[1],};}
if(_.isNumber(value)||_.isString(value)){return{id:parseInt(value,10),};}
return value;}
return{format:{binary:formatBinary,boolean:formatBoolean,char:formatChar,date:formatDate,datetime:formatDateTime,float:formatFloat,float_factor:formatFloatFactor,float_time:formatFloatTime,html:_.identity,integer:formatInteger,many2many:formatX2Many,many2one:formatMany2one,many2one_reference:formatInteger,monetary:formatMonetary,one2many:formatX2Many,percentage:formatPercentage,reference:formatMany2one,selection:formatSelection,text:formatChar,},parse:{binary:_.identity,boolean:_.identity,char:_.identity,date:parseDate,datetime:parseDateTime,float:parseFloat,float_factor:parseFloatFactor,float_time:parseFloatTime,html:_.identity,integer:parseInteger,many2many:_.identity,many2one:parseMany2one,monetary:parseMonetary,one2many:_.identity,percentage:parsePercentage,reference:parseMany2one,selection:_.identity,text:_.identity,},};});;

/* /web/static/src/js/fields/relational_fields.js defined in bundle 'web.assets_backend' */
odoo.define('web.relational_fields',function(require){"use strict";var AbstractField=require('web.AbstractField');var basicFields=require('web.basic_fields');var concurrency=require('web.concurrency');var ControlPanelView=require('web.ControlPanelView');var core=require('web.core');var data=require('web.data');var Dialog=require('web.Dialog');var dialogs=require('web.view_dialogs');var dom=require('web.dom');var KanbanRecord=require('web.KanbanRecord');var KanbanRenderer=require('web.KanbanRenderer');var ListRenderer=require('web.ListRenderer');var Pager=require('web.Pager');var _t=core._t;var _lt=core._lt;var qweb=core.qweb;var M2ODialog=Dialog.extend({template:"M2ODialog",init:function(parent,name,value){this.name=name;this.value=value;this._super(parent,{title:_.str.sprintf(_t("Create a %s"),this.name),size:'medium',buttons:[{text:_t('Create'),classes:'btn-primary',click:function(){if(this.$("input").val()!==''){this.trigger_up('quick_create',{value:this.$('input').val()});this.close(true);}else{this.$("input").focus();}},},{text:_t('Create and edit'),classes:'btn-primary',close:true,click:function(){this.trigger_up('search_create_popup',{view_type:'form',value:this.$('input').val(),});},},{text:_t('Cancel'),close:true,}],});},start:function(){this.$("p").text(_.str.sprintf(_t("You are creating a new %s, are you sure it does not exist yet?"),this.name));this.$("input").val(this.value);},close:function(isSet){this.isSet=isSet;this._super.apply(this,arguments);},destroy:function(){if(!this.isSet){this.trigger_up('closed_unset');}
this._super.apply(this,arguments);},});var FieldMany2One=AbstractField.extend({description:_lt("Many2one"),supportedFieldTypes:['many2one'],template:'FieldMany2One',custom_events:_.extend({},AbstractField.prototype.custom_events,{'closed_unset':'_onDialogClosedUnset','field_changed':'_onFieldChanged','quick_create':'_onQuickCreate','search_create_popup':'_onSearchCreatePopup',}),events:_.extend({},AbstractField.prototype.events,{'click input':'_onInputClick','focusout input':'_onInputFocusout','keyup input':'_onInputKeyup','click .o_external_button':'_onExternalButtonClick','click':'_onClick',}),AUTOCOMPLETE_DELAY:200,SEARCH_MORE_LIMIT:320,init:function(parent,name,record,options){this._super.apply(this,arguments);this.limit=7;this.orderer=new concurrency.DropMisordered();this.can_create=('can_create'in this.attrs?JSON.parse(this.attrs.can_create):true)&&!this.nodeOptions.no_create;this.can_write='can_write'in this.attrs?JSON.parse(this.attrs.can_write):true;this.nodeOptions=_.defaults(this.nodeOptions,{quick_create:true,});this.noOpen='noOpen'in(options||{})?options.noOpen:this.nodeOptions.no_open;this.m2o_value=this._formatValue(this.value);this.recordParams={fieldName:this.name,viewType:this.viewType};this.isDirty=false;this.lastChangeEvent=undefined;this._autocompleteSources=[];this._addAutocompleteSource(this._search,{placeholder:_t('Loading...'),order:1});this.dp=new concurrency.DropPrevious();this.createDef=undefined;},start:function(){this.floating=false;this.$input=this.$('input');this.$external_button=this.$('.o_external_button');return this._super.apply(this,arguments);},destroy:function(){if(this._onScroll){window.removeEventListener('scroll',this._onScroll,true);}
this._super.apply(this,arguments);},commitChanges:function(){return Promise.resolve(this.createDef);},getFocusableElement:function(){return this.mode==='edit'&&this.$input||this.$el;},reinitialize:function(value){this.isDirty=false;this.floating=false;return this._setValue(value);},reset:function(record,event){this._reset(record,event);if(!event||event===this.lastChangeEvent){this.isDirty=false;}
if(this.isDirty){return Promise.resolve();}else{return this._render();}},_addAutocompleteSource:function(method,params){this._autocompleteSources.push({method:method,placeholder:(params.placeholder?_t(params.placeholder):_t('Loading...'))+'<i class="fa fa-spinner fa-spin pull-right"></i>',validation:params.validation,loading:false,order:params.order||999});this._autocompleteSources=_.sortBy(this._autocompleteSources,'order');},_bindAutoComplete:function(){var self=this;if($.browser.chrome&&this.$input.attr('placeholder')){this.$input.attr('placeholder',function(index,val){return val.split('').join('\ufeff');});}
this.$input.autocomplete({source:function(req,resp){_.each(self._autocompleteSources,function(source){source.results=[];if(!source.validation||source.validation.call(self,req.term)){source.loading=true;Promise.resolve(source.method.call(self,req.term)).then(function(results){source.results=results;source.loading=false;resp(self._concatenateAutocompleteResults());});}});},select:function(event,ui){event.stopImmediatePropagation();event.preventDefault();var item=ui.item;self.floating=false;if(item.id){self.reinitialize({id:item.id,display_name:item.name});}else if(item.action){item.action();}
return false;},focus:function(event){event.preventDefault();},open:function(event){self._onScroll=function(ev){if(ev.target!==self.$input.get(0)&&self.$input.hasClass('ui-autocomplete-input')){self.$input.autocomplete('close');}};window.addEventListener('scroll',self._onScroll,true);},close:function(event){if(event.which===$.ui.keyCode.ESCAPE){event.stopPropagation();}
if(self._onScroll){window.removeEventListener('scroll',self._onScroll,true);}},autoFocus:true,html:true,minLength:0,delay:this.AUTOCOMPLETE_DELAY,});this.$input.autocomplete("option","position",{my:"left top",at:"left bottom"});this.autocomplete_bound=true;},_concatenateAutocompleteResults:function(){var results=[];_.each(this._autocompleteSources,function(source){if(source.results&&source.results.length){results=results.concat(source.results);}else if(source.loading){results.push({label:source.placeholder});}});return results;},_createContext:function(name){var tmp={};var field=this.nodeOptions.create_name_field;if(field===undefined){field="name";}
if(field!==false&&name&&this.nodeOptions.quick_create!==false){tmp["default_"+field]=name;}
return tmp;},_getSearchBlacklist:function(){return[];},_getDisplayName:function(value){return value.split('\n')[0];},_getSearchCreatePopupOptions:function(view,ids,context,dynamicFilters){var self=this;return{res_model:this.field.relation,domain:this.record.getDomain({fieldName:this.name}),context:_.extend({},this.record.getContext(this.recordParams),context||{}),dynamicFilters:dynamicFilters||[],title:(view==='search'?_t("Search: "):_t("Create: "))+this.string,initial_ids:ids,initial_view:view,disable_multiple_selection:true,no_create:!self.can_create,kanban_view_ref:this.attrs.kanban_view_ref,on_selected:function(records){self.reinitialize(records[0]);},on_closed:function(){self.activate();},};},_manageSearchMore:function(values,search_val,domain,context){var self=this;values=values.slice(0,this.limit);values.push({label:_t("Search More..."),action:function(){var prom;if(search_val!==''){prom=self._rpc({model:self.field.relation,method:'name_search',kwargs:{name:search_val,args:domain,operator:"ilike",limit:self.SEARCH_MORE_LIMIT,context:context,},});}
Promise.resolve(prom).then(function(results){var dynamicFilters;if(results){var ids=_.map(results,function(x){return x[0];});dynamicFilters=[{description:_.str.sprintf(_t('Quick search: %s'),search_val),domain:[['id','in',ids]],}];}
self._searchCreatePopup("search",false,{},dynamicFilters);});},classname:'o_m2o_dropdown_option',});return values;},_onFieldChanged:function(event){this.lastChangeEvent=event;},_quickCreate:function(name){var self=this;var createDone;var def=new Promise(function(resolve,reject){self.createDef=new Promise(function(innerResolve){createDone=function(){innerResolve();resolve();self.createDef=undefined;};});var slowCreate=function(){var dialog=self._searchCreatePopup("form",false,self._createContext(name));dialog.on('closed',self,createDone);};if(self.nodeOptions.quick_create){var nameCreateDef=self._rpc({model:self.field.relation,method:'name_create',args:[name],context:self.record.getContext(self.recordParams),}).guardedCatch(function(reason){reason.event.preventDefault();slowCreate();});self.dp.add(nameCreateDef).then(function(result){if(self.mode==="edit"){self.reinitialize({id:result[0],display_name:result[1]});}
createDone();}).guardedCatch(reject);}else{slowCreate();}});return def;},_renderEdit:function(){var value=this.m2o_value;if(this.nodeOptions.always_reload){value=this._getDisplayName(value);}
this.$input.val(value);if(!this.autocomplete_bound){this._bindAutoComplete();}
this._updateExternalButton();},_renderReadonly:function(){var escapedValue=_.escape((this.m2o_value||"").trim());var value=escapedValue.split('\n').map(function(line){return'<span>'+line+'</span>';}).join('<br/>');this.$el.html(value);if(!this.noOpen&&this.value){this.$el.attr('href',_.str.sprintf('#id=%s&model=%s',this.value.res_id,this.field.relation));this.$el.addClass('o_form_uri');}},_reset:function(){this._super.apply(this,arguments);this.floating=false;this.m2o_value=this._formatValue(this.value);},_search:function(search_val){var self=this;var def=new Promise(function(resolve,reject){var context=self.record.getContext(self.recordParams);var domain=self.record.getDomain(self.recordParams);_.extend(context,self.additionalContext);var blacklisted_ids=self._getSearchBlacklist();if(blacklisted_ids.length>0){domain.push(['id','not in',blacklisted_ids]);}
self._rpc({model:self.field.relation,method:"name_search",kwargs:{name:search_val,args:domain,operator:"ilike",limit:self.limit+1,context:context,}}).then(function(result){var values=_.map(result,function(x){x[1]=self._getDisplayName(x[1]);return{label:_.str.escapeHTML(x[1].trim())||data.noDisplayContent,value:x[1],name:x[1],id:x[0],};});if(values.length>self.limit){values=self._manageSearchMore(values,search_val,domain,context);}
var create_enabled=self.can_create&&!self.nodeOptions.no_create;var raw_result=_.map(result,function(x){return x[1];});if(create_enabled&&!self.nodeOptions.no_quick_create&&search_val.length>0&&!_.contains(raw_result,search_val)){values.push({label:_.str.sprintf(_t('Create "<strong>%s</strong>"'),$('<span />').text(search_val).html()),action:self._quickCreate.bind(self,search_val),classname:'o_m2o_dropdown_option'});}
if(create_enabled&&!self.nodeOptions.no_create_edit){var createAndEditAction=function(){self.$('input').val('');return self._searchCreatePopup("form",false,self._createContext(search_val));};values.push({label:_t("Create and Edit..."),action:createAndEditAction,classname:'o_m2o_dropdown_option',});}else if(values.length===0){values.push({label:_t("No results to show..."),});}
resolve(values);});});this.orderer.add(def);return def;},_searchCreatePopup:function(view,ids,context,dynamicFilters){var options=this._getSearchCreatePopupOptions(view,ids,context,dynamicFilters);return new dialogs.SelectCreateDialog(this,_.extend({},this.nodeOptions,options)).open();},_updateExternalButton:function(){var has_external_button=!this.noOpen&&!this.floating&&this.isSet();this.$external_button.toggle(has_external_button);this.$el.toggleClass('o_with_button',has_external_button);},_onClick:function(event){var self=this;if(this.mode==='readonly'&&!this.noOpen){event.preventDefault();event.stopPropagation();this._rpc({model:this.field.relation,method:'get_formview_action',args:[[this.value.res_id]],context:this.record.getContext(this.recordParams),}).then(function(action){self.trigger_up('do_action',{action:action});});}},_onDialogClosedUnset:function(){this.isDirty=false;this.floating=false;this._render();},_onExternalButtonClick:function(){if(!this.value){this.activate();return;}
var self=this;var context=this.record.getContext(this.recordParams);this._rpc({model:this.field.relation,method:'get_formview_id',args:[[this.value.res_id]],context:context,}).then(function(view_id){new dialogs.FormViewDialog(self,{res_model:self.field.relation,res_id:self.value.res_id,context:context,title:_t("Open: ")+self.string,view_id:view_id,readonly:!self.can_write,on_saved:function(record,changed){if(changed){const _setValue=self._setValue.bind(self,self.value.data,{forceChange:true,});self.trigger_up('reload',{db_id:self.value.id,onSuccess:_setValue,onFailure:_setValue,});}},}).open();});},_onInputClick:function(){if(this.$input.autocomplete("widget").is(":visible")){this.$input.autocomplete("close");}else if(this.floating){this.$input.autocomplete("search");}else{this.$input.autocomplete("search",'');}},_onInputFocusout:function(){if(this.can_create&&this.floating){new M2ODialog(this,this.string,this.$input.val()).open();}},_onInputKeyup:function(ev){if(ev.which===$.ui.keyCode.ENTER||ev.which===$.ui.keyCode.TAB){return;}
this.isDirty=true;if(this.$input.val()===""){this.reinitialize(false);}else if(this._getDisplayName(this.m2o_value)!==this.$input.val()){this.floating=true;this._updateExternalButton();}},_onKeydown:function(){this.floating=false;this._super.apply(this,arguments);},_onNavigationMove:function(ev){basicFields.InputField.prototype._onNavigationMove.apply(this,arguments);if(this.mode==='edit'&&$(this.$input.autocomplete('widget')).is(':visible')){ev.stopPropagation();}},_onQuickCreate:function(event){this._quickCreate(event.data.value);},_onSearchCreatePopup:function(event){var data=event.data;this._searchCreatePopup(data.view_type,false,this._createContext(data.value));},});var Many2oneBarcode=FieldMany2One.extend({});var ListFieldMany2One=FieldMany2One.extend({events:_.extend({},FieldMany2One.prototype.events,{'focusin input':'_onInputFocusin',}),init:function(){this._super.apply(this,arguments);this.mustSetValue=false;this.m2oDialogFocused=false;},activate:function(){if(this.mode==='readonly'){return false;}
return this._super.apply(this,arguments);},reinitialize:function(){this.mustSetValue=false;return this._super.apply(this,arguments);},_renderReadonly:function(){this.$el.text(this.m2o_value);},_searchCreatePopup:function(){this.m2oDialogFocused=true;return this._super.apply(this,arguments);},_onInputFocusin:function(){this.m2oDialogFocused=false;},_onInputFocusout:function(){if(this.can_create&&this.floating){var attachedEvents=['click','mousedown'];var stopNextClick=(function(ev){ev.stopPropagation();attachedEvents.forEach(function(eventName){window.removeEventListener(eventName,stopNextClick,true);});}).bind(this);attachedEvents.forEach(function(eventName){window.addEventListener(eventName,stopNextClick,true);});}
this._super.apply(this,arguments);if(!this.m2oDialogFocused&&this.$input.val()===""&&this.mustSetValue){this.reinitialize(false);}},_onInputKeyup:function(){if(this.$input.val()!==""){this._super.apply(this,arguments);}else{this.mustSetValue=true;}},});var KanbanFieldMany2One=AbstractField.extend({tagName:'span',init:function(){this._super.apply(this,arguments);this.m2o_value=this._formatValue(this.value);},_render:function(){this.$el.text(this.m2o_value);},});var FieldX2Many=AbstractField.extend({tagName:'div',custom_events:_.extend({},AbstractField.prototype.custom_events,{add_record:'_onAddRecord',discard_changes:'_onDiscardChanges',edit_line:'_onEditLine',field_changed:'_onFieldChanged',open_record:'_onOpenRecord',kanban_record_delete:'_onRemoveRecord',list_record_remove:'_onRemoveRecord',resequence_records:'_onResequenceRecords',save_line:'_onSaveLine',toggle_column_order:'_onToggleColumnOrder',activate_next_widget:'_onActiveNextWidget',navigation_move:'_onNavigationMove',save_optional_fields:'_onSaveOrLoadOptionalFields',load_optional_fields:'_onSaveOrLoadOptionalFields',}),resetOnAnyFieldChange:true,useSubview:true,init:function(parent,name,record,options){this._super.apply(this,arguments);this.nodeOptions=_.defaults(this.nodeOptions,{create_text:_t('Add'),});this.operations=[];this.isReadonly=this.mode==='readonly';this.view=this.attrs.views[this.attrs.mode];this.isMany2Many=this.field.type==='many2many'||this.attrs.widget==='many2many';this.activeActions={};this.recordParams={fieldName:this.name,viewType:this.viewType};var arch=this.view&&this.view.arch;if(arch){this.activeActions.create=arch.attrs.create?!!JSON.parse(arch.attrs.create):true;this.activeActions.delete=arch.attrs.delete?!!JSON.parse(arch.attrs.delete):true;this.editable=arch.attrs.editable;}
if(this.attrs.columnInvisibleFields){this._processColumnInvisibleFields();}},start:function(){return this._renderControlPanel().then(this._super.bind(this));},on_attach_callback:function(){this.isInDOM=true;if(this.renderer){this.renderer.on_attach_callback();}},on_detach_callback:function(){this.isInDOM=false;},commitChanges:function(){var self=this;var inEditionRecordID=this.renderer&&this.renderer.viewType==="list"&&this.renderer.getEditableRecordID();if(inEditionRecordID){return this.renderer.commitChanges(inEditionRecordID).then(function(){return self._saveLine(inEditionRecordID);});}
return this._super.apply(this,arguments);},isSet:function(){return true;},reset:function(record,ev,fieldChanged){if(!fieldChanged){var newEval=this._evalColumnInvisibleFields();if(_.isEqual(this.currentColInvisibleFields,newEval)){return Promise.resolve();}}else if(ev&&ev.target===this&&ev.data.changes&&this.view.arch.tag==='tree'){var command=ev.data.changes[this.name];if(command.operation==='UPDATE'&&command.data){var state=record.data[this.name];var fieldNames=state.getFieldNames();this._reset(record,ev);return this.renderer.confirmUpdate(state,command.id,fieldNames,ev.initialEvent);}}
return this._super.apply(this,arguments);},getFocusableElement:function(){return(this.mode==='edit'&&this.$input)||this.$el;},activate:function(options){if(!this.activeActions.create||this.isReadonly||!this.$el.is(":visible")){return false;}
if(this.view.type==='kanban'){this.$buttons.find(".o-kanban-button-new").focus();}
if(this.view.arch.tag==='tree'){if(options&&options.noAutomaticCreate){this.renderer.$('.o_field_x2many_list_row_add a:first').focus();}else{this.renderer.$('.o_field_x2many_list_row_add a:first').click();}}
return true;},_evalColumnInvisibleFields:function(){var self=this;return _.mapObject(this.columnInvisibleFields,function(domains){return self.record.evalModifiers({column_invisible:domains,}).column_invisible;});},_getRenderer:function(){if(this.view.arch.tag==='tree'){return ListRenderer;}
if(this.view.arch.tag==='kanban'){return KanbanRenderer;}},_render:function(){var self=this;if(!this.view){return this._super();}
if(this.renderer){this.currentColInvisibleFields=this._evalColumnInvisibleFields();return this.renderer.updateState(this.value,{columnInvisibleFields:this.currentColInvisibleFields,keepWidths:true,}).then(function(){self.pager.updateState({size:self.value.count});});}
var arch=this.view.arch;var viewType;var rendererParams={arch:arch,};if(arch.tag==='tree'){viewType='list';this.currentColInvisibleFields=this._evalColumnInvisibleFields();_.extend(rendererParams,{editable:this.mode==='edit'&&arch.attrs.editable,addCreateLine:!this.isReadonly&&this.activeActions.create,addTrashIcon:!this.isReadonly&&this.activeActions.delete,isMany2Many:this.isMany2Many,columnInvisibleFields:this.currentColInvisibleFields,});}
if(arch.tag==='kanban'){viewType='kanban';var record_options={editable:false,deletable:false,read_only_mode:this.isReadonly,};_.extend(rendererParams,{record_options:record_options,readOnlyMode:this.isReadonly,});}
_.extend(rendererParams,{viewType:viewType,});var Renderer=this._getRenderer();this.renderer=new Renderer(this,this.value,rendererParams);this.$el.addClass('o_field_x2many o_field_x2many_'+viewType);if(this.renderer){return this.renderer.appendTo(document.createDocumentFragment()).then(function(){dom.append(self.$el,self.renderer.$el,{in_DOM:self.isInDOM,callbacks:[{widget:self.renderer}],});});}else{return this._super();}},_renderControlPanel:function(){if(!this.view){return Promise.resolve();}
var self=this;var defs=[];var controlPanelView=new ControlPanelView({template:'X2ManyControlPanel',withSearchBar:false,});var cpDef=controlPanelView.getController(this).then(function(controlPanel){self._controlPanel=controlPanel;return self._controlPanel.prependTo(self.$el);});this.pager=new Pager(this,this.value.count,this.value.offset+1,this.value.limit,{single_page_hidden:true,withAccessKey:false,validate:function(){var isList=self.view.arch.tag==='tree';return isList?self.renderer.unselectRow():Promise.resolve();},});this.pager.on('pager_changed',this,function(new_state){self.trigger_up('load',{id:self.value.id,limit:new_state.limit,offset:new_state.current_min-1,on_success:function(value){self.value=value;self._render();},});});this._renderButtons();defs.push(this.pager.appendTo($('<div>')));defs.push(cpDef);return Promise.all(defs).then(function(){self._controlPanel.updateContents({cp_content:{$buttons:self.$buttons,$pager:self.pager.$el,}});});},_renderButtons:function(){if(!this.isReadonly&&this.view.arch.tag==='kanban'){this.$buttons=$(qweb.render('KanbanView.buttons',{btnClass:'btn-secondary',create_text:this.nodeOptions.create_text,}));this.$buttons.on('click','button.o-kanban-button-new',this._onAddRecord.bind(this));}},_saveLine:function(recordID){var self=this;return new Promise(function(resolve,reject){var fieldNames=self.renderer.canBeSaved(recordID);if(fieldNames.length){self.trigger_up('discard_changes',{recordID:recordID,onSuccess:resolve,onFailure:reject,});}else{self.renderer.setRowMode(recordID,'readonly').then(resolve);}}).then(function(){self.pager.updateState({size:self.value.count});var newEval=self._evalColumnInvisibleFields();if(!_.isEqual(self.currentColInvisibleFields,newEval)){self.currentColInvisibleFields=newEval;self.renderer.updateState(self.value,{columnInvisibleFields:self.currentColInvisibleFields,});}});},_processColumnInvisibleFields:function(){var columnInvisibleFields={};_.each(this.attrs.columnInvisibleFields,function(domains,fieldName){if(_.isArray(domains)){columnInvisibleFields[fieldName]=_.map(domains,function(domain){if(_.isArray(domain)){return[domain[0].split('.')[1]].concat(domain.slice(1));}
return domain;});}});this.columnInvisibleFields=columnInvisibleFields;},_onAddRecord:function(){},_onRemoveRecord:function(ev){ev.stopPropagation();var operation=this.isMany2Many?'FORGET':'DELETE';this._setValue({operation:operation,ids:[ev.data.id],});},_onDiscardChanges:function(ev){if(ev.target!==this){ev.stopPropagation();this.trigger_up('discard_changes',_.extend({},ev.data,{fieldName:this.name}));}},_onEditLine:function(ev){ev.stopPropagation();this.trigger_up('edited_list',{id:this.value.id});this.renderer.setRowMode(ev.data.recordId,'edit').then(ev.data.onSuccess);},_onFieldChanged:function(ev){if(ev.target===this){ev.initialEvent=this.lastInitialEvent;return;}
ev.stopPropagation();var changes=ev.data.changes;this.lastInitialEvent=undefined;if(Object.keys(changes).length){this.lastInitialEvent=ev;this._setValue({operation:'UPDATE',id:ev.data.dataPointID,data:changes,}).then(function(){if(ev.data.onSuccess){ev.data.onSuccess();}}).guardedCatch(function(){if(ev.data.onFailure){ev.data.onFailure();}});}},_onNavigationMove:function(ev){if(this.view.arch.tag==='tree'){var $curControl=this.renderer.$('.o_field_x2many_list_row_add a:focus');if($curControl.length){var $nextControl;if(ev.data.direction==='right'){$nextControl=$curControl.next('a');}else if(ev.data.direction==='left'){$nextControl=$curControl.prev('a');}
if($nextControl&&$nextControl.length){ev.stopPropagation();$nextControl.focus();return;}}}
this._super.apply(this,arguments);},_onOpenRecord:function(){},_onSaveLine:function(ev){var self=this;ev.stopPropagation();this.renderer.commitChanges(ev.data.recordID).then(function(){self.trigger_up('mutexify',{action:function(){return self._saveLine(ev.data.recordID).then(ev.data.onSuccess).guardedCatch(ev.data.onFailure);},});});},_onSaveOrLoadOptionalFields:function(ev){ev.data.keyParts.relationalField=this.name;ev.data.keyParts.subViewId=this.view.view_id;ev.data.keyParts.subViewType=this.view.type;},_onResequenceRecords:function(ev){ev.stopPropagation();var self=this;if(this.view.arch.tag==='tree'){this.trigger_up('edited_list',{id:this.value.id});}
var handleField=ev.data.handleField;var offset=ev.data.offset;var recordIds=ev.data.recordIds.slice();var recordId=recordIds.pop();var proms=recordIds.map(function(recordId,index){var data={};data[handleField]=offset+index;return self._setValue({operation:'UPDATE',id:recordId,data:data,},{notifyChange:false,});});Promise.all(proms).then(function(){function always(){if(self.view.arch.tag==='tree'){self.trigger_up('toggle_column_order',{id:self.value.id,name:handleField,});}}
var data={};data[handleField]=offset+recordIds.length;self._setValue({operation:'UPDATE',id:recordId,data:data,}).then(always).guardedCatch(always);});},_onToggleColumnOrder:function(ev){ev.data.field=this.name;},_onActiveNextWidget:function(e){e.stopPropagation();this.renderer.unselectRow();this.trigger_up('navigation_move',{direction:e.data.direction||'next',});},});var One2ManyKanbanRecord=KanbanRecord.extend({_postProcessObjectButtons:function(){var self=this;if(!this.state.res_id){this.$('.oe_kanban_action[data-type=object]').each(function(index,button){var $button=$(button);if($button.attr('warn')){$button.on('click',function(e){e.stopPropagation();self.do_warn(_t('Warning'),_t('Please click on the "save" button first.'));});}else{$button.attr('disabled','disabled');}});}},_render:function(){var self=this;return this._super.apply(this,arguments).then(function(){self._postProcessObjectButtons();});},});var One2ManyKanbanRenderer=KanbanRenderer.extend({config:_.extend({},KanbanRenderer.prototype.config,{KanbanRecord:One2ManyKanbanRecord,}),});var FieldOne2Many=FieldX2Many.extend({description:_lt("One2many"),className:'o_field_one2many',supportedFieldTypes:['one2many'],init:function(){this._super.apply(this,arguments);this.creatingRecord=false;},reset:function(record,ev){var self=this;return this._super.apply(this,arguments).then(function(){if(ev&&ev.target===self&&ev.data.changes&&self.view.arch.tag==='tree'){if(ev.data.changes[self.name].operation==='CREATE'){var index=0;if(self.editable!=='top'){index=self.value.data.length-1;self.pager.updateState({size:self.value.count-1});}
var newID=self.value.data[index].id;self.renderer.editRecord(newID);}}});},_getRenderer:function(){if(this.view.arch.tag==='kanban'){return One2ManyKanbanRenderer;}
return this._super.apply(this,arguments);},_renderButtons:function(){if(this.activeActions.create){this._super.apply(this,arguments);}},_openFormDialog:function(params){var context=this.record.getContext(_.extend({},this.recordParams,{additionalContext:params.context}));this.trigger_up('open_one2many_record',_.extend(params,{domain:this.record.getDomain(this.recordParams),context:context,field:this.field,fields_view:this.attrs.views&&this.attrs.views.form,parentID:this.value.id,viewInfo:this.view,deletable:this.activeActions.delete&&params.deletable,}));},_onAddRecord:function(ev){var self=this;var data=ev.data||{};ev.stopPropagation();if(this.editable||data.forceEditable){if(!this.activeActions.create){if(data.onFail){data.onFail();}}else if(!this.creatingRecord){this.creatingRecord=true;this.trigger_up('edited_list',{id:this.value.id});this._setValue({operation:'CREATE',position:this.editable||data.forceEditable,context:data.context,},{allowWarning:data.allowWarning}).then(function(){self.creatingRecord=false;}).then(function(){if(data.onSuccess){data.onSuccess();}}).guardedCatch(function(){self.creatingRecord=false;});}}else{this._openFormDialog({context:data.context&&data.context[0],on_saved:function(record){self._setValue({operation:'ADD',id:record.id});},});}},_onOpenRecord:function(ev){var self=this;ev.stopPropagation();var id=ev.data.id;var onSaved=function(record){if(_.some(self.value.data,{id:record.id})){self._setValue({operation:'UPDATE',id:record.id});}else{self._setValue({operation:'ADD',id:record.id});}};this._openFormDialog({id:id,on_saved:onSaved,on_remove:function(){self._setValue({operation:'DELETE',ids:[id]});},deletable:this.activeActions.delete&&this.view.arch.tag!=='tree',readonly:this.mode==='readonly',});},});var FieldMany2Many=FieldX2Many.extend({description:_lt("Many2many"),className:'o_field_many2many',supportedFieldTypes:['many2many'],onAddRecordOpenDialog:function(){var self=this;var domain=this.record.getDomain({fieldName:this.name});new dialogs.SelectCreateDialog(this,{res_model:this.field.relation,domain:domain.concat(["!",["id","in",this.value.res_ids]]),context:this.record.getContext(this.recordParams),title:_t("Add: ")+this.string,no_create:this.nodeOptions.no_create||!this.activeActions.create,fields_view:this.attrs.views.form,kanban_view_ref:this.attrs.kanban_view_ref,on_selected:function(records){var resIDs=_.pluck(records,'id');var newIDs=_.difference(resIDs,self.value.res_ids);if(newIDs.length){var values=_.map(newIDs,function(id){return{id:id};});self._setValue({operation:'ADD_M2M',ids:values,});}}}).open();},_onAddRecord:function(ev){ev.stopPropagation();this.onAddRecordOpenDialog();},_onOpenRecord:function(ev){var self=this;_.extend(ev.data,{context:this.record.getContext(this.recordParams),domain:this.record.getDomain(this.recordParams),fields_view:this.attrs.views&&this.attrs.views.form,on_saved:function(){self._setValue({operation:'TRIGGER_ONCHANGE'},{forceChange:true}).then(function(){self.trigger_up('reload',{db_id:ev.data.id});});},on_remove:function(){self._setValue({operation:'FORGET',ids:[ev.data.id]});},readonly:this.mode==='readonly',deletable:this.activeActions.delete&&this.view.arch.tag!=='tree',string:this.string,});},});var FieldMany2ManyBinaryMultiFiles=AbstractField.extend({template:"FieldBinaryFileUploader",template_files:"FieldBinaryFileUploader.files",supportedFieldTypes:['many2many'],fieldsToFetch:{name:{type:'char'},mimetype:{type:'char'},},events:{'click .o_attach':'_onAttach','click .o_attachment_delete':'_onDelete','change .o_input_file':'_onFileChanged',},init:function(){this._super.apply(this,arguments);if(this.field.type!=='many2many'||this.field.relation!=='ir.attachment'){var msg=_t("The type of the field '%s' must be a many2many field with a relation to 'ir.attachment' model.");throw _.str.sprintf(msg,this.field.string);}
this.uploadedFiles={};this.uploadingFiles=[];this.fileupload_id=_.uniqueId('oe_fileupload_temp');$(window).on(this.fileupload_id,this._onFileLoaded.bind(this));this.metadata={};},destroy:function(){this._super();$(window).off(this.fileupload_id);},_getFileUrl:function(attachment){return'/web/content/'+attachment.id+'?download=true';},_generatedMetadata:function(){var self=this;_.each(this.value.data,function(record){self.metadata[record.id]={allowUnlink:self.uploadedFiles[record.data.id]||false,url:self._getFileUrl(record.data),};});},_render:function(){this._generatedMetadata();this.$('.oe_placeholder_files, .o_attachments').replaceWith($(qweb.render(this.template_files,{widget:this,})));this.$('.oe_fileupload').show();this.$('.o_image[data-mimetype^="image"]').each(function(){var $img=$(this);if(/gif|jpe|jpg|png/.test($img.data('mimetype'))&&$img.data('src')){$img.css('background-image',"url('"+$img.data('src')+"')");}});},_onAttach:function(){this.$('.o_input_file').click();},_onDelete:function(ev){ev.preventDefault();ev.stopPropagation();var fileID=$(ev.currentTarget).data('id');var record=_.findWhere(this.value.data,{res_id:fileID});if(record){this._setValue({operation:'FORGET',ids:[record.id],});var metadata=this.metadata[record.id];if(!metadata||metadata.allowUnlink){this._rpc({model:'ir.attachment',method:'unlink',args:[record.res_id],});}}},_onFileChanged:function(ev){var self=this;ev.stopPropagation();var files=ev.target.files;var attachment_ids=this.value.res_ids;if(files.length===0)
return;_.each(files,function(file){var record=_.find(self.value.data,function(attachment){return attachment.data.name===file.name;});if(record){var metadata=self.metadata[record.id];if(!metadata||metadata.allowUnlink){attachment_ids=_.without(attachment_ids,record.res_id);self._rpc({model:'ir.attachment',method:'unlink',args:[record.res_id],});}}
self.uploadingFiles.push(file);});this._setValue({operation:'REPLACE_WITH',ids:attachment_ids,});this.$('form.o_form_binary_form').submit();this.$('.oe_fileupload').hide();ev.target.value="";},_onFileLoaded:function(){var self=this;var files=Array.prototype.slice.call(arguments,1);this.uploadingFiles=[];var attachment_ids=this.value.res_ids;_.each(files,function(file){if(file.error){self.do_warn(_t('Uploading Error'),file.error);}else{attachment_ids.push(file.id);self.uploadedFiles[file.id]=true;}});this._setValue({operation:'REPLACE_WITH',ids:attachment_ids,});},});var FieldMany2ManyTags=AbstractField.extend({description:_lt("Tags"),tag_template:"FieldMany2ManyTag",className:"o_field_many2manytags",supportedFieldTypes:['many2many'],custom_events:_.extend({},AbstractField.prototype.custom_events,{field_changed:'_onFieldChanged',}),events:_.extend({},AbstractField.prototype.events,{'click .o_delete':'_onDeleteTag',}),fieldsToFetch:{display_name:{type:'char'},},init:function(){this._super.apply(this,arguments);if(this.mode==='edit'){this.className+=' o_input';}
this.colorField=this.nodeOptions.color_field;this.hasDropdown=false;},activate:function(){return this.many2one?this.many2one.activate():false;},getFocusableElement:function(){return this.many2one?this.many2one.getFocusableElement():$();},isSet:function(){return!!this.value&&this.value.count;},reset:function(record,event){var self=this;return this._super.apply(this,arguments).then(function(){if(event&&event.target===self){self.activate();}});},_addTag:function(data){if(!_.contains(this.value.res_ids,data.id)){this._setValue({operation:'ADD_M2M',ids:data});}},_getRenderTagsContext:function(){var elements=this.value?_.pluck(this.value.data,'data'):[];return{colorField:this.colorField,elements:elements,hasDropdown:this.hasDropdown,readonly:this.mode==="readonly",};},_removeTag:function(id){var record=_.findWhere(this.value.data,{res_id:id});this._setValue({operation:'FORGET',ids:[record.id],});},_renderEdit:function(){var self=this;this._renderTags();if(this.many2one){this.many2one.destroy();}
this.many2one=new FieldMany2One(this,this.name,this.record,{mode:'edit',noOpen:true,viewType:this.viewType,attrs:this.attrs,});this.many2one.value=false;this.many2one.m2o_value='';this.many2one._getSearchBlacklist=function(){return self.value.res_ids;};var _getSearchCreatePopupOptions=this.many2one._getSearchCreatePopupOptions;this.many2one._getSearchCreatePopupOptions=function(view,ids,context,dynamicFilters){var options=_getSearchCreatePopupOptions.apply(this,arguments);var domain=this.record.getDomain({fieldName:this.name});var m2mRecords=[];return _.extend({},options,{domain:domain.concat(["!",["id","in",self.value.res_ids]]),disable_multiple_selection:false,on_selected:function(records){m2mRecords.push(...records);},on_closed:function(){self.many2one.reinitialize(m2mRecords);},});};return this.many2one.appendTo(this.$el);},_renderReadonly:function(){this._renderTags();},_renderTags:function(){this.$el.html(qweb.render(this.tag_template,this._getRenderTagsContext()));},_onDeleteTag:function(event){event.preventDefault();event.stopPropagation();this._removeTag($(event.target).parent().data('id'));},_onFieldChanged:function(ev){if(ev.target!==this.many2one){return;}
ev.stopPropagation();var newValue=ev.data.changes[this.name];if(newValue){this._addTag(newValue);this.many2one.reinitialize(false);}},_onKeydown:function(ev){if(ev.which===$.ui.keyCode.BACKSPACE&&this.$('input').val()===""){var $badges=this.$('.badge');if($badges.length){this._removeTag($badges.last().data('id'));return;}}
this._super.apply(this,arguments);},_onQuickCreate:function(event){this._quickCreate(event.data.value);},});var FieldMany2ManyTagsAvatar=FieldMany2ManyTags.extend({tag_template:'FieldMany2ManyTagAvatar',className:'o_field_many2manytags avatar',_getRenderTagsContext:function(){var result=this._super.apply(this,arguments);result.avatarModel=this.nodeOptions.avatarModel||this.field.relation;result.avatarField=this.nodeOptions.avatarField||'image_128';return result;},});var FormFieldMany2ManyTags=FieldMany2ManyTags.extend({events:_.extend({},FieldMany2ManyTags.prototype.events,{'click .dropdown-toggle':'_onOpenColorPicker','mousedown .o_colorpicker a':'_onUpdateColor','mousedown .o_colorpicker .o_hide_in_kanban':'_onUpdateColor',}),init:function(){this._super.apply(this,arguments);this.hasDropdown=!!this.colorField;},_onOpenColorPicker:function(ev){ev.preventDefault();var tagID=$(ev.currentTarget).parent().data('id');var tagColor=$(ev.currentTarget).parent().data('color');var tag=_.findWhere(this.value.data,{res_id:tagID});if(tag&&this.colorField in tag.data){this.$color_picker=$(qweb.render('FieldMany2ManyTag.colorpicker',{'widget':this,'tag_id':tagID,}));$(ev.currentTarget).after(this.$color_picker);this.$color_picker.dropdown();this.$color_picker.attr("tabindex",1).focus();if(!tagColor){this.$('.custom-checkbox input').prop('checked',true);}}},_onUpdateColor:function(ev){ev.preventDefault();var $target=$(ev.currentTarget);var color=$target.data('color');var id=$target.data('id');var $tag=this.$(".badge[data-id='"+id+"']");var currentColor=$tag.data('color');var changes={};if($target.is('.o_hide_in_kanban')){var $checkbox=$('.o_hide_in_kanban .custom-checkbox input');$checkbox.prop('checked',!$checkbox.prop('checked'));this.prevColors=this.prevColors?this.prevColors:{};if($checkbox.is(':checked')){this.prevColors[id]=currentColor;}else{color=this.prevColors[id]?this.prevColors[id]:1;}}else if($target.is('[class^="o_tag_color"]')){if(color===currentColor){return;}}
changes[this.colorField]=color;this.trigger_up('field_changed',{dataPointID:_.findWhere(this.value.data,{res_id:id}).id,changes:changes,force_save:true,});},});var KanbanFieldMany2ManyTags=FieldMany2ManyTags.extend({events:AbstractField.prototype.events,_render:function(){var self=this;this.$el.empty().addClass('o_field_many2manytags o_kanban_tags');_.each(this.value.data,function(m2m){if(self.colorField in m2m.data&&!m2m.data[self.colorField]){return;}
$('<span>',{class:'o_tag o_tag_color_'+(m2m.data[self.colorField]||0),text:m2m.data.display_name,}).prepend('<span>').appendTo(self.$el);});},});var FieldMany2ManyCheckBoxes=AbstractField.extend({description:_lt("Checkboxes"),template:'FieldMany2ManyCheckBoxes',events:_.extend({},AbstractField.prototype.events,{change:'_onChange',}),specialData:"_fetchSpecialRelation",supportedFieldTypes:['many2many'],init:function(){this._super.apply(this,arguments);this.m2mValues=this.record.specialData[this.name];},isSet:function(){return true;},_render:function(){var self=this;this._super.apply(this,arguments);_.each(this.value.res_ids,function(id){self.$('input[data-record-id="'+id+'"]').prop('checked',true);});},_renderReadonly:function(){this.$("input").prop("disabled",true);},_onChange:function(){var ids=_.map(this.$('input:checked'),function(input){return $(input).data("record-id");});this._setValue({operation:'REPLACE_WITH',ids:ids,});},});var FieldStatus=AbstractField.extend({className:'o_statusbar_status',events:{'click button:not(.dropdown-toggle)':'_onClickStage',},specialData:"_fetchSpecialStatus",supportedFieldTypes:['selection','many2one'],init:function(){this._super.apply(this,arguments);this._setState();this._onClickStage=_.debounce(this._onClickStage,300,true);this.isClickable=!!this.attrs.clickable||!!this.nodeOptions.clickable;},_reset:function(){this._super.apply(this,arguments);this._setState();},_setState:function(){var self=this;if(this.field.type==='many2one'){this.status_information=_.map(this.record.specialData[this.name],function(info){return _.extend({selected:info.id===self.value.res_id,},info);});}else{var selection=this.field.selection;if(this.attrs.statusbar_visible){var restriction=this.attrs.statusbar_visible.split(",");selection=_.filter(selection,function(val){return _.contains(restriction,val[0])||val[0]===self.value;});}
this.status_information=_.map(selection,function(val){return{id:val[0],display_name:val[1],selected:val[0]===self.value,fold:false};});}},_render:function(){var selections=_.partition(this.status_information,function(info){return(info.selected||!info.fold);});this.$el.html(qweb.render("FieldStatus.content",{selection_unfolded:selections[0],selection_folded:selections[1],clickable:this.isClickable,}));},_onClickStage:function(e){this._setValue($(e.currentTarget).data("value"));},});var FieldSelection=AbstractField.extend({description:_lt("Selection"),template:'FieldSelection',specialData:"_fetchSpecialRelation",supportedFieldTypes:['selection'],events:_.extend({},AbstractField.prototype.events,{'change':'_onChange',}),init:function(){this._super.apply(this,arguments);this._setValues();},getFocusableElement:function(){return this.$el.is('select')?this.$el:$();},isSet:function(){return this.value!==false;},updateModifiersValue:function(){this._super.apply(this,arguments);if(!this.attrs.modifiersValue.invisible&&this.mode!=='readonly'){this._setValues();this._renderEdit();}},_renderEdit:function(){this.$el.empty();var required=this.attrs.modifiersValue&&this.attrs.modifiersValue.required;for(var i=0;i<this.values.length;i++){var disabled=required&&this.values[i][0]===false;this.$el.append($('<option/>',{value:JSON.stringify(this.values[i][0]),text:this.values[i][1],style:disabled?"display: none":"",}));}
var value=this.value;if(this.field.type==='many2one'&&value){value=value.data.id;}
this.$el.val(JSON.stringify(value));},_renderReadonly:function(){this.$el.empty().text(this._formatValue(this.value));},_reset:function(){this._super.apply(this,arguments);this._setValues();},_setValues:function(){if(this.field.type==='many2one'){this.values=this.record.specialData[this.name];this.formatType='many2one';}else{this.values=_.reject(this.field.selection,function(v){return v[0]===false&&v[1]==='';});}
this.values=[[false,this.attrs.placeholder||'']].concat(this.values);},_onChange:function(){var res_id=JSON.parse(this.$el.val());if(this.field.type==='many2one'){var value=_.find(this.values,function(val){return val[0]===res_id;});this._setValue({id:res_id,display_name:value[1]});}else{this._setValue(res_id);}},});var FieldRadio=FieldSelection.extend({description:_lt("Radio"),template:null,className:'o_field_radio',tagName:'span',specialData:"_fetchSpecialMany2ones",supportedFieldTypes:['selection','many2one'],events:_.extend({},AbstractField.prototype.events,{'click input':'_onInputClick',}),init:function(){this._super.apply(this,arguments);if(this.mode==='edit'){this.tagName='div';this.className+=this.nodeOptions.horizontal?' o_horizontal':' o_vertical';}
this.unique_id=_.uniqueId("radio");this._setValues();},isSet:function(){return true;},_renderEdit:function(){var self=this;var currentValue;if(this.field.type==='many2one'){currentValue=this.value&&this.value.data.id;}else{currentValue=this.value;}
this.$el.empty();_.each(this.values,function(value,index){self.$el.append(qweb.render('FieldRadio.button',{checked:value[0]===currentValue,id:self.unique_id+'_'+value[0],index:index,value:value,}));});},_reset:function(){this._super.apply(this,arguments);this._setValues();},_setValues:function(){if(this.field.type==='selection'){this.values=this.field.selection||[];}else if(this.field.type==='many2one'){this.values=_.map(this.record.specialData[this.name],function(val){return[val.id,val.display_name];});}},_onInputClick:function(event){var index=$(event.target).data('index');var value=this.values[index];if(this.field.type==='many2one'){this._setValue({id:value[0],display_name:value[1]});}else{this._setValue(value[0]);}},});var FieldSelectionBadge=FieldSelection.extend({description:_lt("Badges"),template:null,className:'o_field_selection_badge',tagName:'span',specialData:"_fetchSpecialMany2ones",events:_.extend({},AbstractField.prototype.events,{'click span.o_selection_badge':'_onBadgeClicked',}),_renderEdit:function(){this.currentValue=this.value;if(this.field.type==='many2one'){this.currentValue=this.value&&this.value.data.id;}
this.$el.empty();this.$el.html(qweb.render('FieldSelectionBadge',{'values':this.values,'current_value':this.currentValue}));},_setValues:function(){if(this.field.type==='selection'){this.values=this.field.selection||[];}else if(this.field.type==='many2one'){this.values=_.map(this.record.specialData[this.name],function(val){return[val.id,val.display_name];});}},_onBadgeClicked:function(event){var index=$(event.target).data('index');var value=this.values[index];if(value[0]!==this.currentValue){if(this.field.type==='many2one'){this._setValue({id:value[0],display_name:value[1]});}else{this._setValue(value[0]);}}else{this._setValue(false);}},});var FieldSelectionFont=FieldSelection.extend({_renderEdit:function(){this._super.apply(this,arguments);this.$('option').each(function(i,option){if(!option.label){$(option).remove();}
$(option).css('font-family',option.value);});this.$el.css('font-family',this.value);},});var FieldReference=FieldMany2One.extend({specialData:"_fetchSpecialReference",supportedFieldTypes:['reference'],template:'FieldReference',events:_.extend({},FieldMany2One.prototype.events,{'change select':'_onSelectionChange',}),init:function(){this._super.apply(this,arguments);this.field=_.extend({},this.field);this._setState();},start:function(){this.$('select').val(this.field.relation);return this._super.apply(this,arguments);},getFocusableElement:function(){if(this.mode==='edit'&&!this.field.relation){return this.$('select');}
return this._super.apply(this,arguments);},_formatValue:function(){var value;if(this.field.type==='char'){value=this.record.specialData[this.name];}else{value=this.value;}
return value&&value.data&&value.data.display_name||'';},_renderEdit:function(){this._super.apply(this,arguments);if(this.$('select').val()){this.$('.o_input_dropdown').show();this.$el.addClass('o_row');}else{this.$('.o_input_dropdown').hide();}},_reset:function(){this._super.apply(this,arguments);var value=this.$('select').val();this._setState();this.$('select').val(this.value&&this.value.model||value);},_setRelation:function(model){this.field.relation=model;},_setState:function(){if(this.field.type==='char'){this.value=this.record.specialData[this.name];}
if(this.value){this._setRelation(this.value.model);}},_setValue:function(value,options){value=value||{};value.model=this.$('select').val();return this._super(value,options);},_onSelectionChange:function(){var value=this.$('select').val();this.reinitialize(false);this._setRelation(value);},});return{FieldMany2One:FieldMany2One,Many2oneBarcode:Many2oneBarcode,KanbanFieldMany2One:KanbanFieldMany2One,ListFieldMany2One:ListFieldMany2One,FieldX2Many:FieldX2Many,FieldOne2Many:FieldOne2Many,FieldMany2Many:FieldMany2Many,FieldMany2ManyBinaryMultiFiles:FieldMany2ManyBinaryMultiFiles,FieldMany2ManyCheckBoxes:FieldMany2ManyCheckBoxes,FieldMany2ManyTags:FieldMany2ManyTags,FieldMany2ManyTagsAvatar:FieldMany2ManyTagsAvatar,FormFieldMany2ManyTags:FormFieldMany2ManyTags,KanbanFieldMany2ManyTags:KanbanFieldMany2ManyTags,FieldRadio:FieldRadio,FieldSelectionBadge:FieldSelectionBadge,FieldSelection:FieldSelection,FieldStatus:FieldStatus,FieldSelectionFont:FieldSelectionFont,FieldReference:FieldReference,};});;

/* /web/static/src/js/fields/special_fields.js defined in bundle 'web.assets_backend' */
odoo.define('web.special_fields',function(require){"use strict";var core=require('web.core');var field_utils=require('web.field_utils');var relational_fields=require('web.relational_fields');var FieldSelection=relational_fields.FieldSelection;var _t=core._t;var FieldTimezoneMismatch=FieldSelection.extend({start:function(){var interval=navigator.platform.toUpperCase().indexOf('MAC')>=0?60000:1000;this._datetime=setInterval(this._renderDateTimeTimezone.bind(this),interval);return this._super.apply(this,arguments);},destroy:function(){clearInterval(this._datetime);return this._super();},_render:function(){this._super.apply(this,arguments);this._renderTimezoneMismatch();},_renderDateTimeTimezone:function(){if(!this.mismatch||!this.$option.html()){return;}
var offset=this.recordData.tz_offset.match(/([+-])([0-9]{2})([0-9]{2})/);offset=(offset[1]==='-'?-1:1)*(parseInt(offset[2])*60+parseInt(offset[3]));var datetime=field_utils.format.datetime(moment.utc().add(offset,'minutes'),this.field,{timezone:false});var content=this.$option.html().split(' ')[0];content+='    ('+datetime+')';this.$option.html(content);},_renderTimezoneMismatch:function(){this.$el.last().filter('.o_tz_warning').remove();this.$el=this.$el.first();var value=this.$el.val();var $span=$('<span class="fa fa-exclamation-triangle o_tz_warning"/>');if(this.$option&&this.$option.html()){this.$option.html(this.$option.html().split(' ')[0]);}
var userOffset=this.recordData.tz_offset;this.mismatch=false;if(userOffset&&value!==""&&value!=="false"){var offset=-(new Date().getTimezoneOffset());var browserOffset=(offset<0)?"-":"+";browserOffset+=_.str.sprintf("%02d",Math.abs(offset/60));browserOffset+=_.str.sprintf("%02d",Math.abs(offset%60));this.mismatch=(browserOffset!==userOffset);}
if(this.mismatch){$span.insertAfter(this.$el);$span.attr('title',_t("Timezone Mismatch : This timezone is different from that of your browser.\nPlease, set the same timezone as your browser's to avoid time discrepancies in your system."));this.$el=this.$el.add($span);this.$option=this.$('option').filter(function(){return $(this).attr('value')===value;});this._renderDateTimeTimezone();}else if(value=="false"){$span.insertAfter(this.$el);$span.attr('title',_t("Set a timezone on your user"));this.$el=this.$el.add($span);}},_renderEdit:function(){var $otherEl=this.$el.not('select');this.$el=this.$el.first();this._super.apply(this,arguments);$otherEl.insertAfter(this.$el);this.$el=this.$el.add($otherEl);},});var FieldReportLayout=relational_fields.FieldMany2One.extend({events:_.extend({},relational_fields.FieldMany2One.prototype.events,{'click img':'_onImgClicked',}),willStart:function(){var self=this;this.previews={};return this._super().then(function(){return self._rpc({model:'report.layout',method:"search_read"}).then(function(values){self.previews=values;});});},_render:function(){var self=this;this.$el.empty();var value=_.isObject(this.value)?this.value.data.id:this.value;_.each(this.previews,function(val){var $container=$('<div>').addClass('col-3 text-center');var $img=$('<img>').addClass('img img-fluid img-thumbnail ml16').toggleClass('btn-info',val.view_id[0]===value).attr('src',val.image).data('key',val.view_id[0]);$container.append($img);if(val.pdf){var $previewLink=$('<a>').text('Example').attr('href',val.pdf).attr('target','_blank');$container.append($previewLink);}
self.$el.append($container);});},_onImgClicked:function(event){this._setValue($(event.currentTarget).data('key'));},});return{FieldTimezoneMismatch:FieldTimezoneMismatch,FieldReportLayout:FieldReportLayout,};});;

/* /web/static/src/js/fields/upgrade_fields.js defined in bundle 'web.assets_backend' */
odoo.define('web.upgrade_widgets',function(require){"use strict";var AbstractField=require('web.AbstractField');var basic_fields=require('web.basic_fields');var core=require('web.core');var Dialog=require('web.Dialog');var field_registry=require('web.field_registry');var framework=require('web.framework');var relational_fields=require('web.relational_fields');var _t=core._t;var QWeb=core.qweb;var FieldBoolean=basic_fields.FieldBoolean;var FieldRadio=relational_fields.FieldRadio;var AbstractFieldUpgrade={_confirmUpgrade:function(){return this._rpc({model:'res.users',method:'search_count',args:[[["share","=",false]]],}).then(function(data){framework.redirect("https://www.odoo.com/odoo-enterprise/upgrade?num_users="+data);});},_insertEnterpriseLabel:function($enterpriseLabel){},_openDialog:function(){var message=$(QWeb.render('EnterpriseUpgrade'));var buttons=[{text:_t("Upgrade now"),classes:'btn-primary',close:true,click:this._confirmUpgrade.bind(this),},{text:_t("Cancel"),close:true,},];return new Dialog(this,{size:'medium',buttons:buttons,$content:$('<div>',{html:message,}),title:_t("Odoo Enterprise"),}).open();},_render:function(){this._super.apply(this,arguments);this._insertEnterpriseLabel($("<span>",{text:"Enterprise",'class':"badge badge-primary oe_inline o_enterprise_label"}));},_resetValue:function(){},_onInputClicked:function(event){if($(event.currentTarget).prop("checked")){this._openDialog().on('closed',this,this._resetValue.bind(this));}},};var UpgradeBoolean=FieldBoolean.extend(AbstractFieldUpgrade,{supportedFieldTypes:[],events:_.extend({},AbstractField.prototype.events,{'click input':'_onInputClicked',}),renderWithLabel:function($label){this.$label=$label;this._render();},_insertEnterpriseLabel:function($enterpriseLabel){var $el=this.$label||this.$el;$el.append('&nbsp;').append($enterpriseLabel);},_resetValue:function(){this.$input.prop("checked",false).change();},});var UpgradeRadio=FieldRadio.extend(AbstractFieldUpgrade,{supportedFieldTypes:[],events:_.extend({},FieldRadio.prototype.events,{'click input:last':'_onInputClicked',}),isSet:function(){return true;},_insertEnterpriseLabel:function($enterpriseLabel){this.$('label').last().append('&nbsp;').append($enterpriseLabel);},_resetValue:function(){this.$('input').first().prop("checked",true).click();},});field_registry.add('upgrade_boolean',UpgradeBoolean).add('upgrade_radio',UpgradeRadio);});;

/* /web/static/src/js/views/abstract_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.AbstractView',function(require){"use strict";var AbstractModel=require('web.AbstractModel');var AbstractRenderer=require('web.AbstractRenderer');var AbstractController=require('web.AbstractController');var ControlPanelView=require('web.ControlPanelView');var mvc=require('web.mvc');var SearchPanel=require('web.SearchPanel');var viewUtils=require('web.viewUtils');var Factory=mvc.Factory;var AbstractView=Factory.extend({display_name:'',mobile_friendly:false,icon:'fa-question',multi_record:true,viewType:undefined,withSearchBar:true,searchMenuTypes:['filter','groupBy','favorite'],withControlPanel:true,withSearchPanel:true,config:_.extend({},Factory.prototype.config,{Model:AbstractModel,Renderer:AbstractRenderer,Controller:AbstractController,SearchPanel:SearchPanel,}),init:function(viewInfo,params){this._super.apply(this,arguments);var action=params.action||{};params=_.defaults(params,this._extractParamsFromAction(action));if(typeof viewInfo.arch==='string'){this.fieldsView=this._processFieldsView(viewInfo);}else{this.fieldsView=viewInfo;}
this.arch=this.fieldsView.arch;this.fields=this.fieldsView.viewFields;this.userContext=params.userContext||{};this.withControlPanel=this.withControlPanel&&params.withControlPanel;const searchPanelDisabled='search_panel'in params.context&&!params.search_panel;this.withSearchPanel=this.withSearchPanel&&this.multi_record&&params.withSearchPanel&&!searchPanelDisabled;var isEmbedded=params.isEmbedded||false;this.rendererParams={arch:this.arch,isEmbedded:isEmbedded,noContentHelp:params.noContentHelp,};this.controllerParams={actionViews:params.actionViews,activeActions:{edit:this.arch.attrs.edit?!!JSON.parse(this.arch.attrs.edit):true,create:this.arch.attrs.create?!!JSON.parse(this.arch.attrs.create):true,delete:this.arch.attrs.delete?!!JSON.parse(this.arch.attrs.delete):true,duplicate:this.arch.attrs.duplicate?!!JSON.parse(this.arch.attrs.duplicate):true,},bannerRoute:this.arch.attrs.banner_route,controllerID:params.controllerID,displayName:params.displayName,isEmbedded:isEmbedded,isMultiRecord:this.multi_record,modelName:params.modelName,viewType:this.viewType,};var controllerState=params.controllerState||{};var currentId=controllerState.currentId||params.currentId;this.loadParams={context:params.context,count:params.count||((this.controllerParams.ids!==undefined)&&this.controllerParams.ids.length)||0,domain:params.domain,modelName:params.modelName,res_id:currentId,res_ids:controllerState.resIds||params.ids||(currentId?[currentId]:undefined),};var defaultOrder=this.arch.attrs.default_order;if(defaultOrder){this.loadParams.orderedBy=_.map(defaultOrder.split(','),function(order){order=order.trim().split(' ');return{name:order[0],asc:order[1]!=='desc'};});}
if(params.searchQuery){this._updateMVCParams(params.searchQuery);}
this.controlPanelParams={action:action,activateDefaultFavorite:params.activateDefaultFavorite,dynamicFilters:params.dynamicFilters,breadcrumbs:params.breadcrumbs,context:this.loadParams.context,domain:this.loadParams.domain,modelName:params.modelName,searchMenuTypes:params.searchMenuTypes,state:controllerState.cpState,viewInfo:params.controlPanelFieldsView,withBreadcrumbs:params.withBreadcrumbs,withSearchBar:params.withSearchBar,};this.searchPanelParams={defaultNoFilter:params.searchPanelDefaultNoFilter,fields:this.fields,model:this.loadParams.modelName,state:controllerState.spState,};},getController:function(parent){var self=this;var cpDef=this.withControlPanel&&this._createControlPanel(parent);var spDef;if(this.withSearchPanel){var spProto=this.config.SearchPanel.prototype;var viewInfo=this.controlPanelParams.viewInfo;var searchPanelParams=spProto.computeSearchPanelParams(viewInfo,this.viewType);if(searchPanelParams.sections){this.searchPanelParams.sections=searchPanelParams.sections;this.rendererParams.withSearchPanel=true;spDef=Promise.resolve(cpDef).then(this._createSearchPanel.bind(this,parent,searchPanelParams));}}
var _super=this._super.bind(this);return Promise.all([cpDef,spDef]).then(function([controlPanel,searchPanel]){var modelParent=self.model&&self.model.getParent();var prom=_super(parent);prom.then(function(controller){if(controlPanel){controlPanel.setParent(controller);}
if(searchPanel){searchPanel.setParent(controller);}
if(modelParent){self.model.setParent(modelParent);}});return prom;});},getModel:function(){if(!this.model){this.model=this._super.apply(this,arguments);}
return this.model;},setController:function(Controller){this.Controller=Controller;},_createControlPanel:function(parent){var self=this;var controlPanelView=new ControlPanelView(this.controlPanelParams);return controlPanelView.getController(parent).then(function(controlPanel){self.controllerParams.controlPanel=controlPanel;return controlPanel.appendTo(document.createDocumentFragment()).then(function(){self._updateMVCParams(controlPanel.getSearchQuery());return controlPanel;});});},_createSearchPanel:async function(parent,params){var defaultValues={};Object.keys(this.loadParams.context).forEach((key)=>{let match=/^searchpanel_default_(.*)$/.exec(key);if(match){defaultValues[match[1]]=this.loadParams.context[key];}});var controlPanelDomain=this.loadParams.domain;var spParams=_.extend({},this.searchPanelParams,{defaultValues:defaultValues,searchDomain:controlPanelDomain,classes:params.classes||[],});var searchPanel=new this.config.SearchPanel(parent,spParams);this.controllerParams.searchPanel=searchPanel;this.controllerParams.controlPanelDomain=controlPanelDomain;await searchPanel.appendTo(document.createDocumentFragment());var searchPanelDomain=searchPanel.getDomain();this.loadParams.domain=controlPanelDomain.concat(searchPanelDomain);return searchPanel;},_extractParamsFromAction:function(action){action=action||{};var context=action.context||{};var inline=action.target==='inline';return{actionId:action.id||false,actionViews:action.views||[],activateDefaultFavorite:!context.active_id&&!context.active_ids,context:action.context||{},controlPanelFieldsView:action.controlPanelFieldsView,currentId:action.res_id?action.res_id:undefined,displayName:action.display_name||action.name,domain:action.domain||[],limit:action.limit,modelName:action.res_model,noContentHelp:action.help,searchMenuTypes:inline?[]:this.searchMenuTypes,withBreadcrumbs:'no_breadcrumbs'in context?!context.no_breadcrumbs:true,withControlPanel:this.withControlPanel,withSearchBar:inline?false:this.withSearchBar,withSearchPanel:this.withSearchPanel,};},_processFieldsView:function(fieldsView){var fv=_.extend({},fieldsView);fv.arch=viewUtils.parseArch(fv.arch);fv.viewFields=_.defaults({},fv.viewFields,fv.fields);return fv;},_updateMVCParams:function(searchQuery){var timeRangeMenuData=searchQuery.context.timeRangeMenuData||{};var comparisonTimeRange=timeRangeMenuData.comparisonTimeRange||[];var comparisonTimeRangeDescription=timeRangeMenuData.comparisonTimeRangeDescription||'';var timeRangeDescription=timeRangeMenuData.timeRangeDescription||'';this.loadParams=_.extend(this.loadParams,{compare:comparisonTimeRange.length>0,comparisonField:timeRangeMenuData.comparisonField,comparisonTimeRange:comparisonTimeRange,comparisonTimeRangeDescription:comparisonTimeRangeDescription,context:searchQuery.context,domain:searchQuery.domain,groupedBy:searchQuery.groupBy,timeRange:timeRangeMenuData.timeRange||[],timeRangeDescription:timeRangeMenuData.timeRangeDescription||'',});this.loadParams.orderedBy=searchQuery.orderedBy?searchQuery.orderedBy:this.loadParams.orderedBy;this.rendererParams.timeRangeDescription=timeRangeDescription;this.rendererParams.comparisonTimeRangeDescription=comparisonTimeRangeDescription;},});return AbstractView;});;

/* /web/static/src/js/views/abstract_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.AbstractRenderer',function(require){"use strict";var mvc=require('web.mvc');return mvc.Renderer.extend({init:function(parent,state,params){this._super.apply(this,arguments);this.arch=params.arch;this.noContentHelp=params.noContentHelp;this.withSearchPanel=params.withSearchPanel;},start:function(){this.$el.addClass(this.arch.attrs.class);if(this.withSearchPanel){this.$el.addClass('o_renderer_with_searchpanel');}
return Promise.all([this._render(),this._super()]);},on_attach_callback:function(){},on_detach_callback:function(){},getLocalState:function(){},giveFocus:function(){},setLocalState:function(localState){},updateState:function(state,params){this.state=state;return params.noRender?Promise.resolve():this._render();},_render:function(){return Promise.resolve();},});});;

/* /web/static/src/js/views/abstract_model.js defined in bundle 'web.assets_backend' */
odoo.define('web.AbstractModel',function(require){"use strict";var fieldUtils=require('web.field_utils');var mvc=require('web.mvc');var AbstractModel=mvc.Model.extend({reload:function(params){return Promise.resolve();},_parseServerValue:function(field,value){if(field.type==='date'||field.type==='datetime'){value=fieldUtils.parse[field.type](value,field,{isUTC:true});}else if(field.type==='selection'&&value===false){var hasKey0=_.find(field.selection,function(option){return option[0]===0;});value=hasKey0?0:value;}
return value;},});return AbstractModel;});;

/* /web/static/src/js/views/abstract_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.AbstractController',function(require){"use strict";var ActionMixin=require('web.ActionMixin');var ajax=require('web.ajax');var concurrency=require('web.concurrency');var config=require('web.config');var core=require('web.core');var mvc=require('web.mvc');var session=require('web.session');var QWeb=core.qweb;var AbstractController=mvc.Controller.extend(ActionMixin,{custom_events:{get_controller_query_params:'_onGetControllerQueryParams',navigation_move:'_onNavigationMove',open_record:'_onOpenRecord',search:'_onSearch',switch_view:'_onSwitchView',search_panel_domain_updated:'_onSearchPanelDomainUpdated',},events:{'click a[type="action"]':'_onActionClicked',},init:function(parent,model,renderer,params){this._super.apply(this,arguments);this._controlPanel=params.controlPanel;this._title=params.displayName;this.modelName=params.modelName;this.activeActions=params.activeActions;this.controllerID=params.controllerID;this.initialState=params.initialState;this.bannerRoute=params.bannerRoute;this.isMultiRecord=params.isMultiRecord;this.actionViews=params.actionViews;this.viewType=params.viewType;this.dp=new concurrency.DropPrevious();this._searchPanel=params.searchPanel;this.controlPanelDomain=params.controlPanelDomain||[];this.searchPanelDomain=this._searchPanel?this._searchPanel.getDomain():[];},start:function(){var self=this;if(this._searchPanel){this.$('.o_content').addClass('o_controller_with_searchpanel').prepend(this._searchPanel.$el);}
this.$el.addClass('o_view_controller');return this._super.apply(this,arguments).then(function(){var prom;if(self._controlPanel){prom=self._renderControlPanelElements().then(function(elements){self.controlPanelElements=elements;self._controlPanel.$el.prependTo(self.$el);});}
return Promise.resolve(prom);}).then(function(){return self._update(self.initialState);});},destroy:function(){if(this.$buttons){this.$buttons.off();}
if(this.controlPanelElements&&this.controlPanelElements.$switch_buttons){this.controlPanelElements.$switch_buttons.off();}
this._super.apply(this,arguments);},on_attach_callback:function(){if(this._controlPanel){this._controlPanel.on_attach_callback();}
if(this._searchPanel){this._searchPanel.on_attach_callback();}
this.renderer.on_attach_callback();},on_detach_callback:function(){if(this._controlPanel){this._controlPanel.on_detach_callback();}
this.renderer.on_detach_callback();},canBeRemoved:function(){return this.discardChanges(undefined,{noAbandon:true,readonlyIfRealDiscard:true,});},discardChanges:function(recordID,options){return Promise.resolve();},exportState:function(){var state={};if(this._controlPanel){state.cpState=this._controlPanel.exportState();}
if(this._searchPanel){state.spState=this._searchPanel.exportState();}
return state;},giveFocus:function(){this.renderer.giveFocus();},is_action_enabled:function(action){return this.activeActions[action];},reload:async function(params){params=params||{};var searchPanelUpdateProm;var controllerState=params.controllerState||{};var cpState=controllerState.cpState;if(this._controlPanel&&cpState){await this._controlPanel.importState(cpState).then(function(searchQuery){params=_.extend({},params,searchQuery);});}
var postponeRendering=false;if(this._searchPanel){this.controlPanelDomain=params.domain||this.controlPanelDomain;if(controllerState.spState){this._searchPanel.importState(controllerState.spState);this.searchPanelDomain=this._searchPanel.getDomain();}else{searchPanelUpdateProm=this._searchPanel.update({searchDomain:this._getSearchDomain()});postponeRendering=!params.noRender;params.noRender=true;}
params.domain=this.controlPanelDomain.concat(this.searchPanelDomain);}
await Promise.all([this.update(params,{}),searchPanelUpdateProm]);if(postponeRendering){return this.renderer._render();}},renderPager:function($node){return Promise.resolve();},renderSidebar:function($node){return Promise.resolve();},update:function(params,options){var self=this;var shouldReload=(options&&'reload'in options)?options.reload:true;var def=shouldReload?this.model.reload(this.handle,params):Promise.resolve();var cpUpdateIndex=this._controlPanel&&this._controlPanel.updateIndex;return this.dp.add(def).then(function(handle){if(self._controlPanel&&cpUpdateIndex!==self._controlPanel.updateIndex){return;}
self.handle=handle||self.handle;var state=self.model.get(self.handle);var localState=self.renderer.getLocalState();return self.dp.add(self.renderer.updateState(state,params)).then(function(){if(self._controlPanel&&cpUpdateIndex!==self._controlPanel.updateIndex){return;}
self.renderer.setLocalState(localState);return self._update(state,params);});});},_getSearchDomain:function(){return this.controlPanelDomain;},_pushState:function(state){this.trigger_up('push_state',{controllerID:this.controllerID,state:state||{},});},_renderBanner:function(){if(this.bannerRoute!==undefined){var self=this;return this.dp.add(this._rpc({route:this.bannerRoute})).then(function(response){if(!response.html){self.$el.removeClass('o_has_banner');return Promise.resolve();}
self.$el.addClass('o_has_banner');var $banner=$(response.html);if(self._$banner&&self._$banner.remove){self._$banner.remove();}
var defs=[];$('link[rel="stylesheet"]',$banner).each(function(i,link){defs.push(ajax.loadCSS(link.href));link.remove();});$('script[type="text/javascript"]',$banner).each(function(i,js){defs.push(ajax.loadJS(js.src));js.remove();});return Promise.all(defs).then(function(){$banner.insertBefore(self.$('> .o_content'));self._$banner=$banner;});});}
return Promise.resolve();},_renderControlPanelElements:function(){var self=this;var elements={$buttons:$('<div>'),$sidebar:$('<div>'),$pager:$('<div>'),};this.renderButtons(elements.$buttons);var sidebarProm=this.renderSidebar(elements.$sidebar);var pagerProm=this.renderPager(elements.$pager);return Promise.all([sidebarProm,pagerProm]).then(function(){elements=_.mapObject(elements,function($node){return $node&&$node.contents();});elements.$switch_buttons=self._renderSwitchButtons();return elements;});},_renderSwitchButtons:function(){var self=this;var views=_.filter(this.actionViews,{multiRecord:this.isMultiRecord});if(views.length<=1){return $();}
var template=config.device.isMobile?'ControlPanel.SwitchButtons.Mobile':'ControlPanel.SwitchButtons';var $switchButtons=$(QWeb.render(template,{viewType:this.viewType,views:views,}));_.each(views,function(view){$switchButtons.filter('.o_cp_switch_'+view.type).tooltip();});var $switchButtonsFiltered=config.device.isMobile?$switchButtons.find('button'):$switchButtons.filter('button');$switchButtonsFiltered.click(_.debounce(function(event){var viewType=$(event.target).data('view-type');self.trigger_up('switch_view',{view_type:viewType});},200,true));if(config.device.isMobile){var activeView=_.findWhere(views,{type:this.viewType});$switchButtons.find('.o_switch_view_button_icon').addClass('fa fa-lg '+activeView.icon);}
return $switchButtons;},_startRenderer:function(){return this.renderer.appendTo(this.$('.o_content'));},_update:function(state,params){var cpContent=_.extend({},this.controlPanelElements);this.updateControlPanel({breadcrumbs:params&&params.breadcrumbs,cp_content:cpContent,title:this.getTitle(),});this._pushState();return this._renderBanner();},_onActionClicked:function(ev){ev.preventDefault();var $target=$(ev.currentTarget);var self=this;var data=$target.data();if(data.method!==undefined&&data.model!==undefined){var options={};if(data.reloadOnClose){options.on_close=function(){self.trigger_up('reload');};}
this.dp.add(this._rpc({model:data.model,method:data.method,context:session.user_context,})).then(function(action){if(action!==undefined){self.do_action(action,options);}});}else if($target.attr('name')){this.do_action($target.attr('name'),data.context&&{additional_context:data.context});}else{this.do_action({name:$target.attr('title')||_.str.strip($target.text()),type:'ir.actions.act_window',res_model:data.model||this.modelName,res_id:data.resId,target:'current',views:data.views||(data.resId?[[false,'form']]:[[false,'list'],[false,'form']]),domain:data.domain||[],},{additional_context:_.extend({},data.context)});}},_onGetControllerQueryParams:function(ev){ev.stopPropagation();var state=this.getOwnedQueryParams();ev.data.callback(state||{});},_onNavigationMove:function(ev){switch(ev.data.direction){case'up':ev.stopPropagation();this._controlPanel.focusSearchBar();break;case'down':ev.stopPropagation();this.giveFocus();break;}},_onOpenRecord:function(ev){ev.stopPropagation();var record=this.model.get(ev.data.id,{raw:true});this.trigger_up('switch_view',{view_type:'form',res_id:record.res_id,mode:ev.data.mode||'readonly',model:this.modelName,});},_onSearch:function(ev){ev.stopPropagation();this.reload(_.extend({offset:0},ev.data));},_onSearchPanelDomainUpdated:function(ev){this.searchPanelDomain=ev.data.domain;this.reload({offset:0});},_onSwitchView:function(ev){ev.data.controllerID=this.controllerID;},});return AbstractController;});;

/* /web/static/src/js/views/basic/basic_model.js defined in bundle 'web.assets_backend' */
odoo.define('web.BasicModel',function(require){"use strict";var AbstractModel=require('web.AbstractModel');var concurrency=require('web.concurrency');var Context=require('web.Context');var core=require('web.core');var Domain=require('web.Domain');var session=require('web.session');var utils=require('web.utils');var viewUtils=require('web.viewUtils');var _t=core._t;const AGGREGATABLE_TYPES=['float','integer','monetary'];var x2ManyCommands={CREATE:0,create:function(virtualID,values){delete values.id;return[x2ManyCommands.CREATE,virtualID||false,values];},UPDATE:1,update:function(id,values){delete values.id;return[x2ManyCommands.UPDATE,id,values];},DELETE:2,delete:function(id){return[x2ManyCommands.DELETE,id,false];},FORGET:3,forget:function(id){return[x2ManyCommands.FORGET,id,false];},LINK_TO:4,link_to:function(id){return[x2ManyCommands.LINK_TO,id,false];},DELETE_ALL:5,delete_all:function(){return[5,false,false];},REPLACE_WITH:6,replace_with:function(ids){return[6,false,ids];}};var BasicModel=AbstractModel.extend({OPEN_GROUP_LIMIT:10,noCacheModels:['ir.actions.act_window','ir.filters','ir.ui.view',],init:function(){this.mutex=new concurrency.Mutex();this.batchedRPCsRequests=[];this.localData=Object.create(null);this._super.apply(this,arguments);},addDefaultRecord:function(listID,options){var self=this;var list=this.localData[listID];var context=_.extend({},this._getDefaultContext(list),this._getContext(list));var position=(options&&options.position)||'top';var params={context:context,fields:list.fields,fieldsInfo:list.fieldsInfo,parentID:list.id,position:position,viewType:list.viewType,};return this._makeDefaultRecord(list.model,params).then(function(id){list.count++;if(position==='top'){list.data.unshift(id);}else{list.data.push(id);}
var record=self.localData[id];list._cache[record.res_id]=id;return id;});},addFieldsInfo:function(recordID,viewInfo){var record=this.localData[recordID];record.fields=_.extend({},record.fields,viewInfo.fields);var fieldsInfo=_.mapObject(viewInfo.fieldsInfo,function(fieldsInfo){return _.defaults({},fieldsInfo,record.fieldsInfo[record.viewType]);});record.fieldsInfo=_.extend({},record.fieldsInfo,fieldsInfo);},applyDefaultValues:function(recordID,values,options){options=options||{};var record=this.localData[recordID];var viewType=options.viewType||record.viewType;var fieldNames=options.fieldNames||Object.keys(record.fieldsInfo[viewType]);var field;var fieldName;record._changes=record._changes||{};values=_.pick(values,fieldNames);for(var i=0;i<fieldNames.length;i++){fieldName=fieldNames[i];if(!(fieldName in values)&&!(fieldName in record._changes)){field=record.fields[fieldName];if(field.type==='float'||field.type==='integer'||field.type==='monetary'){values[fieldName]=0;}else if(field.type==='one2many'||field.type==='many2many'){values[fieldName]=[];}else{values[fieldName]=null;}}}
var defs=[];for(fieldName in values){field=record.fields[fieldName];record.data[fieldName]=null;var dp;if(field.type==='many2one'&&values[fieldName]){dp=this._makeDataPoint({context:record.context,data:{id:values[fieldName]},modelName:field.relation,parentID:record.id,});record._changes[fieldName]=dp.id;}else if(field.type==='reference'&&values[fieldName]){var ref=values[fieldName].split(',');dp=this._makeDataPoint({context:record.context,data:{id:parseInt(ref[1])},modelName:ref[0],parentID:record.id,});defs.push(this._fetchNameGet(dp));record._changes[fieldName]=dp.id;}else if(field.type==='one2many'||field.type==='many2many'){defs.push(this._processX2ManyCommands(record,fieldName,values[fieldName],options));}else{record._changes[fieldName]=this._parseServerValue(field,values[fieldName]);}}
return Promise.all(defs);},applyRawChanges:function(recordID,viewType){var record=this.localData[recordID];return this._applyOnChange(record._rawChanges,record,viewType).then(function(){return record.id;});},canBeAbandoned:function(id){if(this.localData[id]._noAbandon){return false;}
var record=this.localData[id];var parent=this.localData[record.parentID];if(parent){var entry=_.findWhere(parent._savePoint,{operation:'ADD',id:id});if(entry){if(!entry.isNew){return false;}
var lastEntry=_.last(parent._savePoint);if(lastEntry.operation==='UPDATE'&&lastEntry.id===id){return false;}}}
return this.isNew(id);},deleteRecords:function(recordIds,modelName){var self=this;var records=_.map(recordIds,function(id){return self.localData[id];});var context=_.extend(records[0].getContext(),session.user_context);return this._rpc({model:modelName,method:'unlink',args:[_.pluck(records,'res_id')],context:context,}).then(function(){_.each(records,function(record){var parent=record.parentID&&self.localData[record.parentID];if(parent&&parent.type==='list'){parent.data=_.without(parent.data,record.id);delete self.localData[record.id];}else{record.res_ids.splice(record.offset,1);record.offset=Math.min(record.offset,record.res_ids.length-1);record.res_id=record.res_ids[record.offset];record.count--;}});self._invalidateCache(records[0]);});},discardChanges:function(id,options){options=options||{};var element=this.localData[id];var isNew=this.isNew(id);var rollback='rollback'in options?options.rollback:isNew;var initialOffset=element.offset;element._domains={};this._visitChildren(element,function(elem){if(rollback&&elem._savePoint){if(elem._savePoint instanceof Array){elem._changes=elem._savePoint.slice(0);}else{elem._changes=_.extend({},elem._savePoint);}
elem._isDirty=!isNew;}else{elem._changes=null;elem._isDirty=false;}
elem.offset=0;if(elem.tempLimitIncrement){elem.limit-=elem.tempLimitIncrement;delete elem.tempLimitIncrement;}});element.offset=initialOffset;},duplicateRecord:function(recordID){var self=this;var record=this.localData[recordID];var context=this._getContext(record);return this._rpc({model:record.model,method:'copy',args:[record.data.id],context:context,}).then(function(res_id){var index=record.res_ids.indexOf(record.res_id);record.res_ids.splice(index+1,0,res_id);return self.load({fieldsInfo:record.fieldsInfo,fields:record.fields,modelName:record.model,res_id:res_id,res_ids:record.res_ids.slice(0),viewType:record.viewType,context:context,});});},freezeOrder:function(listID){var list=this.localData[listID];if(list.type==='record'){return;}
list=this._applyX2ManyOperations(list);this._sortList(list);this.localData[listID].orderedResIDs=list.res_ids;},get:function(id,options){var self=this;options=options||{};if(!(id in this.localData)){return null;}
var element=this.localData[id];if(options.env){var env={ids:element.res_ids?element.res_ids.slice(0):[],};if(element.type==='record'){env.currentId=this.isNew(element.id)?undefined:element.res_id;}
return env;}
if(element.type==='record'){var data=_.extend({},element.data,element._changes);var relDataPoint;for(var fieldName in data){var field=element.fields[fieldName];if(data[fieldName]===null){data[fieldName]=false;}
if(!field){continue;}
if(field.type==='many2one'){if(options.raw){relDataPoint=this.localData[data[fieldName]];data[fieldName]=relDataPoint?relDataPoint.res_id:false;}else{data[fieldName]=this.get(data[fieldName])||false;}}else if(field.type==='reference'){if(options.raw){relDataPoint=this.localData[data[fieldName]];data[fieldName]=relDataPoint?relDataPoint.model+','+relDataPoint.res_id:false;}else{data[fieldName]=this.get(data[fieldName])||false;}}else if(field.type==='one2many'||field.type==='many2many'){if(options.raw){if(typeof data[fieldName]==='string'){relDataPoint=this.localData[data[fieldName]];relDataPoint=this._applyX2ManyOperations(relDataPoint);data[fieldName]=relDataPoint.res_ids;}else{data[fieldName]=data[fieldName]||[];}}else{data[fieldName]=this.get(data[fieldName])||[];}}}
var record={context:_.extend({},element.context),count:element.count,data:data,domain:element.domain.slice(0),evalModifiers:element.evalModifiers,fields:element.fields,fieldsInfo:element.fieldsInfo,getContext:element.getContext,getDomain:element.getDomain,getFieldNames:element.getFieldNames,id:element.id,isDirty:element.isDirty,limit:element.limit,model:element.model,offset:element.offset,ref:element.ref,res_ids:element.res_ids.slice(0),specialData:_.extend({},element.specialData),type:'record',viewType:element.viewType,};if(!this.isNew(element.id)){record.res_id=element.res_id;}
var evalContext;Object.defineProperty(record,'evalContext',{get:function(){evalContext=evalContext||self._getEvalContext(element);return evalContext;},});return record;}
element=this._applyX2ManyOperations(element);this._sortList(element);if(!element.orderedResIDs&&element._changes){_.each(element._changes,function(change){if(change.operation==='ADD'&&change.isNew){element.data=_.without(element.data,change.id);if(change.position==='top'){element.data.unshift(change.id);}else{element.data.push(change.id);}}});}
var list={aggregateValues:_.extend({},element.aggregateValues),context:_.extend({},element.context),count:element.count,data:_.map(element.data,function(elemID){return self.get(elemID,options);}),domain:element.domain.slice(0),fields:element.fields,getContext:element.getContext,getDomain:element.getDomain,getFieldNames:element.getFieldNames,groupedBy:element.groupedBy,groupsCount:element.groupsCount,groupsLimit:element.groupsLimit,groupsOffset:element.groupsOffset,id:element.id,isDirty:element.isDirty,isOpen:element.isOpen,limit:element.limit,model:element.model,offset:element.offset,orderedBy:element.orderedBy,res_id:element.res_id,res_ids:element.res_ids.slice(0),type:'list',value:element.value,viewType:element.viewType,};if(element.fieldsInfo){list.fieldsInfo=element.fieldsInfo;}
return list;},getName:function(id){var record=this.localData[id];var returnValue='';if(record._changes&&'display_name'in record._changes){returnValue=record._changes.display_name;}
else if('display_name'in record.data){returnValue=record.data.display_name;}
return returnValue||_t("New");},isDirty:function(id){var isDirty=false;this._visitChildren(this.localData[id],function(r){if(r._isDirty){isDirty=true;}});return isDirty;},isNew:function(id){var data=this.localData[id];if(data.type!=="record"){return false;}
var res_id=data.res_id;if(typeof res_id==='number'){return false;}else if(typeof res_id==='string'&&/^[0-9]+-/.test(res_id)){return false;}
return true;},load:function(params){params.type=params.type||(params.res_id!==undefined?'record':'list');params.viewType=params.viewType||'default';if(!params.fieldsInfo){var fieldsInfo={};for(var fieldName in params.fieldNames){fieldsInfo[params.fieldNames[fieldName]]={};}
params.fieldsInfo={};params.fieldsInfo[params.viewType]=fieldsInfo;}
if(params.type==='record'&&params.res_id===undefined){params.allowWarning=true;return this._makeDefaultRecord(params.modelName,params);}
var dataPoint=this._makeDataPoint(params);return this._load(dataPoint).then(function(){return dataPoint.id;});},makeRecord:function(model,fields,fieldInfo){var self=this;var defs=[];var record_fields={};_.each(fields,function(field){record_fields[field.name]=_.pick(field,'type','relation','domain','selection');});fieldInfo=fieldInfo||{};var fieldsInfo={};fieldsInfo.default={};_.each(fields,function(field){fieldsInfo.default[field.name]=fieldInfo[field.name]||{};});var record=this._makeDataPoint({modelName:model,fields:record_fields,fieldsInfo:fieldsInfo,viewType:'default',});_.each(fields,function(field){var dataPoint;record.data[field.name]=null;if(field.type==='many2one'){if(field.value){var id=_.isArray(field.value)?field.value[0]:field.value;var display_name=_.isArray(field.value)?field.value[1]:undefined;dataPoint=self._makeDataPoint({modelName:field.relation,data:{id:id,display_name:display_name,},parentID:record.id,});record.data[field.name]=dataPoint.id;if(display_name===undefined){defs.push(self._fetchNameGet(dataPoint));}}}else if(field.type==='one2many'||field.type==='many2many'){var relatedFieldsInfo={};relatedFieldsInfo.default={};_.each(field.fields,function(field){relatedFieldsInfo.default[field.name]={};});var dpParams={fieldsInfo:relatedFieldsInfo,modelName:field.relation,parentID:record.id,static:true,type:'list',viewType:'default',};var needLoad=false;if(field.value&&field.value.length){if(_.isObject(field.value[0])){dpParams.res_ids=_.pluck(field.value,'id');dataPoint=self._makeDataPoint(dpParams);_.each(field.value,function(data){var recordDP=self._makeDataPoint({data:data,modelName:field.relation,parentID:dataPoint.id,type:'record',});dataPoint.data.push(recordDP.id);dataPoint._cache[recordDP.res_id]=recordDP.id;});}else{dpParams.res_ids=field.value;dataPoint=self._makeDataPoint(dpParams);needLoad=true;}}else{dpParams.res_ids=[];dataPoint=self._makeDataPoint(dpParams);}
if(needLoad){defs.push(self._load(dataPoint));}
record.data[field.name]=dataPoint.id;}else if(field.value){record.data[field.name]=field.value;}});return Promise.all(defs).then(function(){return record.id;});},notifyChanges:function(record_id,changes,options){return this.mutex.exec(this._applyChange.bind(this,record_id,changes,options));},reload:function(id,options){return this.mutex.exec(this._reload.bind(this,id,options));},removeLine:function(elementID){var record=this.localData[elementID];var parent=this.localData[record.parentID];if(parent.static){parent._changes=_.filter(parent._changes,function(change){if(change.id===elementID&&change.operation==='ADD'&&parent.tempLimitIncrement){parent.tempLimitIncrement--;parent.limit--;}
return change.id!==elementID;});}else{parent.data=_.without(parent.data,elementID);parent.count--;}},resequence:function(modelName,resIDs,parentID,options){options=options||{};if((resIDs.length<=1)){return Promise.resolve(parentID);}
var self=this;var data=this.localData[parentID];var params={model:modelName,ids:resIDs,};if(options.offset){params.offset=options.offset;}
if(options.field){params.field=options.field;}
return this._rpc({route:'/web/dataset/resequence',params:params,}).then(function(wasResequenced){if(!wasResequenced){return Promise.resolve();}
var field=params.field?params.field:'sequence';return self._rpc({model:modelName,method:'read',args:[resIDs,[field]],}).then(function(records){if(data.data.length){var dataType=self.localData[data.data[0]].type;if(dataType==='record'){_.each(data.data,function(dataPoint){var recordData=self.localData[dataPoint].data;var inRecords=_.findWhere(records,{id:recordData.id});if(inRecords){recordData[field]=inRecords[field];}});data.data=_.sortBy(data.data,function(d){return self.localData[d].data[field];});}
if(dataType==='list'){data.data=_.sortBy(data.data,function(d){return _.indexOf(resIDs,self.localData[d].res_id)});}}
data.res_ids=[];_.each(data.data,function(d){var dataPoint=self.localData[d];if(dataPoint.type==='record'){data.res_ids.push(dataPoint.res_id);}else{data.res_ids=data.res_ids.concat(dataPoint.res_ids);}});self._updateParentResIDs(data);return parentID;})});},save:function(recordID,options){var self=this;return this.mutex.exec(function(){options=options||{};var record=self.localData[recordID];if(options.savePoint){self._visitChildren(record,function(rec){var newValue=rec._changes||rec.data;if(newValue instanceof Array){rec._savePoint=newValue.slice(0);}else{rec._savePoint=_.extend({},newValue);}});_.each((record._changes||{}),function(value,fieldName){record._editionViewType[fieldName]=options.viewType;});}
var shouldReload='reload'in options?options.reload:true;var method=self.isNew(recordID)?'create':'write';if(record._changes){delete record._changes.id;}
var changes=self._generateChanges(record,{viewType:options.viewType,changesOnly:method!=='create'});delete changes.id;if(method==='create'){var fieldNames=record.getFieldNames();_.each(fieldNames,function(name){if(changes[name]===null){delete changes[name];}});}
var prom=new Promise(function(resolve,reject){var changedFields=Object.keys(changes);if(options.savePoint){resolve(changedFields);return;}
if(method==='create'||changedFields.length){var args=method==='write'?[[record.data.id],changes]:[changes];self._rpc({model:record.model,method:method,args:args,context:record.getContext(),}).then(function(id){if(method==='create'){record.res_id=id;record.data.id=id;record.offset=record.res_ids.length;record.res_ids.push(id);record.count++;}
var _changes=record._changes;record._changes={};self._invalidateCache(record);self.unfreezeOrder(record.id);if(shouldReload){self._fetchRecord(record).then(function(){resolve(changedFields);});}else{_.extend(record.data,_changes);resolve(changedFields);}}).guardedCatch(reject);}else{resolve(changedFields);}});prom.then(function(){record._isDirty=false;});return prom;});},setDirty:function(id){this.localData[id]._isDirty=true;},setSort:function(list_id,fieldName){var list=this.localData[list_id];if(list.type==='record'){return;}else if(list._changes){_.each(list._changes,function(change){delete change.isNew;});}
if(list.orderedBy.length===0){list.orderedBy.push({name:fieldName,asc:true});}else if(list.orderedBy[0].name===fieldName){if(!list.orderedResIDs){list.orderedBy[0].asc=!list.orderedBy[0].asc;}}else{var orderedBy=_.reject(list.orderedBy,function(o){return o.name===fieldName;});list.orderedBy=[{name:fieldName,asc:true}].concat(orderedBy);}
list.orderedResIDs=null;if(list.static){return this._fetchUngroupedList(list);}
return Promise.resolve();},toggleActive:function(recordIDs,parentID){var self=this;var parent=this.localData[parentID];var resIDs=_.map(recordIDs,function(recordID){return self.localData[recordID].res_id;});return this._rpc({model:parent.model,method:'toggle_active',args:[resIDs],}).then(function(action){self._invalidateCache(parent);if(!_.isEmpty(action)){return self.do_action(action,{on_close:function(){return self.trigger_up('reload');}});}else{return self.reload(parentID);}});},actionArchive:function(recordIDs,parentID){var self=this;var parent=this.localData[parentID];var resIDs=_.map(recordIDs,function(recordID){return self.localData[recordID].res_id;});return this._rpc({model:parent.model,method:'action_archive',args:[resIDs],}).then(function(action){self._invalidateCache(parent);if(!_.isEmpty(action)){return self.do_action(action,{on_close:function(){return self.trigger_up('reload');}});}else{return self.reload(parentID);}});},actionUnarchive:function(recordIDs,parentID){var self=this;var parent=this.localData[parentID];var resIDs=_.map(recordIDs,function(recordID){return self.localData[recordID].res_id;});return this._rpc({model:parent.model,method:'action_unarchive',args:[resIDs],}).then(function(action){self._invalidateCache(parent);if(!_.isEmpty(action)){return self.do_action(action,{on_close:function(){return self.trigger_up('reload');}});}else{return self.reload(parentID);}});},toggleGroup:function(groupId){var self=this;var group=this.localData[groupId];if(group.isOpen){group.isOpen=false;group.data=[];group.res_ids=[];group.offset=0;this._updateParentResIDs(group);return Promise.resolve(groupId);}
if(!group.isOpen){group.isOpen=true;var def;if(group.count>0){def=this._load(group).then(function(){self._updateParentResIDs(group);});}
return Promise.resolve(def).then(function(){return groupId;});}},unfreezeOrder:function(elementID){var list=this.localData[elementID];if(list.type==='record'){var data=_.extend({},list.data,list._changes);for(var fieldName in data){var field=list.fields[fieldName];if(!field||!data[fieldName]){continue;}
if(field.type==='one2many'||field.type==='many2many'){var recordlist=this.localData[data[fieldName]];recordlist.orderedResIDs=null;for(var index in recordlist.data){this.unfreezeOrder(recordlist.data[index]);}}}
return;}
list.orderedResIDs=null;this._sortList(list);},_addX2ManyDefaultRecord:function(list,options){var self=this;var position=options&&options.position||'top';var params={fields:list.fields,fieldsInfo:list.fieldsInfo,parentID:list.id,position:position,viewType:list.viewType,allowWarning:options&&options.allowWarning};var additionalContexts=options&&options.context;var makeDefaultRecords=[];if(additionalContexts){_.each(additionalContexts,function(context){params.context=self._getContext(list,{additionalContext:context});makeDefaultRecords.push(self._makeDefaultRecord(list.model,params));});}else{params.context=self._getContext(list);makeDefaultRecords.push(self._makeDefaultRecord(list.model,params));}
return Promise.all(makeDefaultRecords).then(function(resultIds){var ids=[];_.each(resultIds,function(id){ids.push(id);list._changes.push({operation:'ADD',id:id,position:position,isNew:true});var record=self.localData[id];list._cache[record.res_id]=id;if(list.orderedResIDs){var index=list.offset+(position!=='top'?list.limit:0);list.orderedResIDs.splice(index,0,record.res_id);self.localData[list.id].orderedResIDs=list.orderedResIDs;}});return ids;});},_applyChange:function(recordID,changes,options){var self=this;var record=this.localData[recordID];var field;var defs=[];options=options||{};record._changes=record._changes||{};if(!options.doNotSetDirty){record._isDirty=true;}
var initialData={};this._visitChildren(record,function(elem){initialData[elem.id]=$.extend(true,{},_.pick(elem,'data','_changes'));});for(var fieldName in changes){field=record.fields[fieldName];if(field&&(field.type==='one2many'||field.type==='many2many')){defs.push(this._applyX2ManyChange(record,fieldName,changes[fieldName],options));}else if(field&&(field.type==='many2one'||field.type==='reference')){defs.push(this._applyX2OneChange(record,fieldName,changes[fieldName]));}else{record._changes[fieldName]=changes[fieldName];}}
if(options.notifyChange===false){return Promise.resolve(_.keys(changes));}
return Promise.all(defs).then(function(){var onChangeFields=[];for(var fieldName in changes){field=record.fields[fieldName];if(field&&field.onChange){var isX2Many=field.type==='one2many'||field.type==='many2many';if(!isX2Many||(self._isX2ManyValid(record._changes[fieldName]||record.data[fieldName]))){onChangeFields.push(fieldName);}}}
return new Promise(function(resolve,reject){if(onChangeFields.length){self._performOnChange(record,onChangeFields,options.viewType).then(function(result){delete record._warning;resolve(_.keys(changes).concat(Object.keys(result&&result.value||{})));}).guardedCatch(function(){self._visitChildren(record,function(elem){_.extend(elem,initialData[elem.id]);});resolve({});});}else{resolve(_.keys(changes));}}).then(function(fieldNames){return self._fetchSpecialData(record).then(function(fieldNames2){return _.union(fieldNames,fieldNames2);});});});},_applyX2OneChange:function(record,fieldName,data){var self=this;if(!data||!data.id){record._changes[fieldName]=false;return Promise.resolve();}
var relatedID;if(record._changes&&fieldName in record._changes){relatedID=record._changes[fieldName];}else{relatedID=record.data[fieldName];}
var relatedRecord=this.localData[relatedID];if(relatedRecord&&(data.id===this.localData[relatedID].res_id)){return Promise.resolve();}
var rel_data=_.pick(data,'id','display_name');var field=record.fields[fieldName];var coModel=field.type==='reference'?data.model:field.relation;var def;if(rel_data.display_name===undefined){def=this._rpc({model:coModel,method:'name_get',args:[data.id],context:record.context,}).then(function(result){rel_data.display_name=result[0][1];});}
return Promise.resolve(def).then(function(){var rec=self._makeDataPoint({context:record.context,data:rel_data,fields:{},fieldsInfo:{},modelName:coModel,parentID:record.id,});record._changes[fieldName]=rec.id;});},_applyOnChange:function(values,record,viewType){var self=this;var defs=[];var rec;viewType=viewType||record.viewType;record._changes=record._changes||{};_.each(values,function(val,name){var field=record.fields[name];if(!field){record._rawChanges[name]=val;return;}
if(record._rawChanges[name]){delete record._rawChanges[name];}
var oldValue=name in record._changes?record._changes[name]:record.data[name];var id;if(field.type==='many2one'){id=false;if(val){var data=_.isArray(val)?{id:val[0],display_name:val[1]}:{id:val};if(!oldValue||(self.localData[oldValue].res_id!==data.id)){rec=self._makeDataPoint({context:record.context,data:data,modelName:field.relation,parentID:record.id,});id=rec.id;record._changes[name]=id;}}else{record._changes[name]=false;}}else if(field.type==='reference'){id=false;if(val){var ref=val.split(',');var modelName=ref[0];var resID=parseInt(ref[1]);if(!oldValue||self.localData[oldValue].res_id!==resID||self.localData[oldValue].model!==modelName){rec=self._makeDataPoint({context:record.context,data:{id:parseInt(ref[1])},modelName:modelName,parentID:record.id,});defs.push(self._fetchNameGet(rec));id=rec.id;record._changes[name]=id;}}else{record._changes[name]=id;}}else if(field.type==='one2many'||field.type==='many2many'){var listId=record._changes[name]||record.data[name];var list;if(listId){list=self.localData[listId];}else{var fieldInfo=record.fieldsInfo[viewType][name];if(!fieldInfo){return;}
var view=fieldInfo.views&&fieldInfo.views[fieldInfo.mode];list=self._makeDataPoint({fields:view?view.fields:fieldInfo.relatedFields,fieldsInfo:view?view.fieldsInfo:fieldInfo.fieldsInfo,limit:fieldInfo.limit,modelName:field.relation,parentID:record.id,static:true,type:'list',viewType:view?view.type:fieldInfo.viewType,});}
record._changes[name]=list.id;list._changes=list._changes||[];var oldChanges=list._changes;_.each(val,function(command){var rec,recID;if(command[0]===0||command[0]===1){if(command[0]===0&&command[1]){var previousChange=_.find(oldChanges,function(operation){var child=self.localData[operation.id];return child&&(child.ref===command[1]);});recID=previousChange&&previousChange.id;rec=self.localData[recID];}
if(command[0]===1&&command[1]){rec=self.localData[list._cache[command[1]]];}
if(!rec){var params={context:list.context,fields:list.fields,fieldsInfo:list.fieldsInfo,modelName:list.model,parentID:list.id,viewType:list.viewType,ref:command[1],};if(command[0]===1){params.res_id=command[1];}
rec=self._makeDataPoint(params);list._cache[rec.res_id]=rec.id;}
rec._noAbandon=!list._savePoint;list._changes.push({operation:'ADD',id:rec.id});if(command[0]===1){list._changes.push({operation:'UPDATE',id:rec.id});}
defs.push(self._applyOnChange(command[2],rec));}else if(command[0]===4){linkRecord(list,command[1]);}else if(command[0]===5){list._changes=[{operation:'REMOVE_ALL'}];}else if(command[0]===6){list._changes=[{operation:'REMOVE_ALL'}];_.each(command[2],function(resID){linkRecord(list,resID);});}});var def=self._readUngroupedList(list).then(function(){var x2ManysDef=self._fetchX2ManysBatched(list);var referencesDef=self._fetchReferencesBatched(list);return Promise.all([x2ManysDef,referencesDef]);});defs.push(def);}else{var newValue=self._parseServerValue(field,val);if(newValue!==oldValue){record._changes[name]=newValue;}}});return Promise.all(defs);function linkRecord(list,resID){rec=self.localData[list._cache[resID]];if(rec){self.discardChanges(rec.id);}
list._changes.push({operation:'ADD',id:rec?rec.id:null,resID:resID,});}},_applyX2ManyChange:function(record,fieldName,command,options){if(command.operation==='TRIGGER_ONCHANGE'){return Promise.resolve();}
var self=this;var localID=(record._changes&&record._changes[fieldName])||record.data[fieldName];var list=this.localData[localID];var field=record.fields[fieldName];var viewType=(options&&options.viewType)||record.viewType;var fieldInfo=record.fieldsInfo[viewType][fieldName];var view=fieldInfo.views&&fieldInfo.views[fieldInfo.mode];var def,rec;var defs=[];list._changes=list._changes||[];switch(command.operation){case'ADD':var newRecord=this.localData[command.id];_.defaults(list.fields,newRecord.fields);_.defaults(list.fieldsInfo,newRecord.fieldsInfo);newRecord.fields=list.fields;newRecord.fieldsInfo=list.fieldsInfo;newRecord.viewType=list.viewType;list._cache[newRecord.res_id]=newRecord.id;list._changes.push(command);break;case'ADD_M2M':list._forceM2MLink=true;var data=_.isArray(command.ids)?command.ids:[command.ids];if(data.length+list.res_ids.length>list.limit){list.limit=data.length+list.res_ids.length;}
var list_records={};_.each(data,function(d){rec=self._makeDataPoint({context:record.context,modelName:field.relation,fields:view?view.fields:fieldInfo.relatedFields,fieldsInfo:view?view.fieldsInfo:fieldInfo.fieldsInfo,res_id:d.id,data:d,viewType:view?view.type:fieldInfo.viewType,parentID:list.id,});list_records[d.id]=rec;list._cache[rec.res_id]=rec.id;list._changes.push({operation:'ADD',id:rec.id});});var fieldNames=list.getFieldNames();if(fieldNames.length){def=this._rpc({model:list.model,method:'read',args:[_.pluck(data,'id'),fieldNames],context:_.extend({},record.context,field.context),}).then(function(records){_.each(records,function(record){list_records[record.id].data=record;self._parseServerData(fieldNames,list,record);});return Promise.all([self._fetchX2ManysBatched(list),self._fetchReferencesBatched(list)]);});defs.push(def);}
break;case'CREATE':var createOptions=_.extend({context:command.context,position:command.position},options||{});def=this._addX2ManyDefaultRecord(list,createOptions).then(function(ids){_.each(ids,function(id){if(command.position==='bottom'&&list.orderedResIDs&&list.orderedResIDs.length>=list.limit){list.tempLimitIncrement=(list.tempLimitIncrement||0)+1;list.limit+=1;}
if(command.data){return self._applyChange(id,command.data);}});});defs.push(def);break;case'UPDATE':list._changes.push({operation:'UPDATE',id:command.id});if(command.data){defs.push(this._applyChange(command.id,command.data));}
break;case'FORGET':list._forceM2MUnlink=true;case'DELETE':var idsToRemove=command.ids;list._changes=_.reject(list._changes,function(change,index){var idInCommands=_.contains(command.ids,change.id);if(idInCommands&&change.operation==='ADD'){idsToRemove=_.without(idsToRemove,change.id);}
return idInCommands;});_.each(idsToRemove,function(id){var operation=list._forceM2MUnlink?'FORGET':'DELETE';list._changes.push({operation:operation,id:id});});break;case'DELETE_ALL':list._changes=_.reject(list._changes,function(change){return change.operation==='ADD';});return this._applyX2ManyChange(record,fieldName,{operation:'DELETE',ids:list.res_ids},options);case'REPLACE_WITH':list._changes=[];var newIds=_.difference(command.ids,list.res_ids);var removedIds=_.difference(list.res_ids,command.ids);var addDef,removedDef,values;if(newIds.length){values=_.map(newIds,function(id){return{id:id};});addDef=this._applyX2ManyChange(record,fieldName,{operation:'ADD_M2M',ids:values},options);}
if(removedIds.length){var listData=_.map(list.data,function(localId){return self.localData[localId];});removedDef=this._applyX2ManyChange(record,fieldName,{operation:'DELETE',ids:_.map(removedIds,function(resID){if(resID in list._cache){return list._cache[resID];}
return _.findWhere(listData,{res_id:resID}).id;}),},options);}
return Promise.all([addDef,removedDef]);case'MULTI':_.each(command.commands,function(innerCommand){defs.push(self._applyX2ManyChange(record,fieldName,innerCommand,options));});break;}
return Promise.all(defs).then(function(){return self._readUngroupedList(list).then(function(){return self._fetchX2ManysBatched(list);});});},_applyX2ManyOperations:function(list,options){if(!list.static){return list;}
var self=this;list=_.extend({},list);list.res_ids=list.res_ids.slice(0);var changes=list._changes||[];if(options){var to=options.to===0?0:(options.to||changes.length);changes=changes.slice(options.from||0,to);}
_.each(changes,function(change){var relRecord;if(change.id){relRecord=self.localData[change.id];}
switch(change.operation){case'ADD':list.count++;var resID=relRecord?relRecord.res_id:change.resID;if(change.position==='top'&&(options?options.position!=='bottom':true)){list.res_ids.unshift(resID);}else{list.res_ids.push(resID);}
break;case'FORGET':case'DELETE':list.count--;var deletedResID=relRecord?relRecord.res_id:change.id;list.res_ids=_.without(list.res_ids,deletedResID);break;case'REMOVE_ALL':list.count=0;list.res_ids=[];break;case'UPDATE':break;}});this._setDataInRange(list);return list;},_buildOnchangeSpecs:function(record,viewType){var hasOnchange=false;var specs={};var fieldsInfo=record.fieldsInfo[viewType||record.viewType];generateSpecs(fieldsInfo,record.fields);function generateSpecs(fieldsInfo,fields,prefix){prefix=prefix||'';_.each(Object.keys(fieldsInfo),function(name){var field=fields[name];var fieldInfo=fieldsInfo[name];var key=prefix+name;specs[key]=(field.onChange)||"";if(field.onChange){hasOnchange=true;}
if(field.type==='one2many'||field.type==='many2many'){_.each(fieldInfo.views,function(view){generateSpecs(view.fieldsInfo[view.type],view.fields,key+'.');});}});}
return hasOnchange?specs:false;},_computeOverrideDefaultFields:function(listID,position){var list=this.localData[listID];var handleField;if(!list){return{};}
position=position||'bottom';if(!list.fieldsInfo){return{};}
for(var field in list.fieldsInfo.list){if(list.fieldsInfo.list[field].widget==='handle'){handleField=field;break;}}
if(!handleField){return{};}
var isOrderedByHandle=list.orderedBy&&list.orderedBy.length&&list.orderedBy[0].asc===true&&list.orderedBy[0].name===handleField;if(!isOrderedByHandle){return{};}
var computedList=this.get(list.id,{raw:true});if(!computedList||!computedList.data||!computedList.data.length){return{};}
var index=Math.min(computedList.data.length-1,position!=='top'?list.limit-1:0);var handleFieldValue=computedList.data[index].data[handleField];if(position==='top'){handleFieldValue--;}else if(list.count<=list.offset+list.limit-(list.tempLimitIncrement||0)){handleFieldValue++;}
return{field:handleField,value:handleFieldValue,};},_evalModifiers:function(element,modifiers){var result={};var self=this;var evalContext;function evalModifier(mod){if(mod===undefined||mod===false||mod===true){return!!mod;}
evalContext=evalContext||self._getEvalContext(element);return new Domain(mod,evalContext).compute(evalContext);}
if('invisible'in modifiers){result.invisible=evalModifier(modifiers.invisible);}
if('column_invisible'in modifiers){result.column_invisible=evalModifier(modifiers.column_invisible);}
if('readonly'in modifiers){result.readonly=evalModifier(modifiers.readonly);}
if('required'in modifiers){result.required=evalModifier(modifiers.required);}
return result;},_fetchMany2OneGroup:function(groups){var ids=_.uniq(_.pluck(_.pluck(groups,'record'),'res_id'));return this._rpc({model:groups[0].record.model,method:'name_get',args:[ids],context:groups[0].context}).then(function(name_gets){_.each(groups,function(obj){var nameGet=_.find(name_gets,function(n){return n[0]===obj.record.res_id;});obj.record.data.display_name=nameGet[1];});});},_fetchNameGet:function(dataPoint){return this._rpc({model:dataPoint.model,method:'name_get',args:[dataPoint.res_id],context:dataPoint.getContext(),}).then(function(result){dataPoint.data.display_name=result[0][1];});},_fetchNameGets:function(list,fieldName){var self=this;var model=list.fields[fieldName].relation;var records=[];var ids=[];list=this._applyX2ManyOperations(list);_.each(list.data,function(localId){var record=self.localData[localId];var data=record._changes||record.data;var many2oneId=data[fieldName];if(!many2oneId){return;}
var many2oneRecord=self.localData[many2oneId];records.push(many2oneRecord);ids.push(many2oneRecord.res_id);model=many2oneRecord.model;});if(!ids.length){return Promise.resolve();}
return this._rpc({model:model,method:'name_get',args:[_.uniq(ids)],context:list.context,}).then(function(name_gets){_.each(records,function(record){var nameGet=_.find(name_gets,function(nameGet){return nameGet[0]===record.data.id;});record.data.display_name=nameGet[1];});});},_fetchRecord:function(record,options){var self=this;options=options||{};var fieldNames=options.fieldNames||record.getFieldNames(options);fieldNames=_.uniq(fieldNames.concat(['display_name']));return this._rpc({model:record.model,method:'read',args:[[record.res_id],fieldNames],context:_.extend({},record.getContext(),{bin_size:true}),}).then(function(result){if(result.length===0){return Promise.reject();}
result=result[0];record.data=_.extend({},record.data,result);}).then(function(){self._parseServerData(fieldNames,record,record.data);}).then(function(){return Promise.all([self._fetchX2Manys(record,options),self._fetchReferences(record,options)]).then(function(){return self._postprocess(record,options);});});},_fetchReference:function(record,fieldName){var self=this;var def;var value=record._changes&&record._changes[fieldName]||record.data[fieldName];var model=value&&value.split(',')[0];var resID=value&&parseInt(value.split(',')[1]);if(model&&model!=='False'&&resID){def=self._rpc({model:model,method:'name_get',args:[resID],context:record.getContext({fieldName:fieldName}),}).then(function(result){return self._makeDataPoint({data:{id:result[0][0],display_name:result[0][1],},modelName:model,parentID:record.id,});});}
return Promise.resolve(def);},_fetchReferenceData:function(datapoints,model,fieldName){var self=this;var ids=_.map(Object.keys(datapoints),function(id){return parseInt(id);});var parent=datapoints[ids[0]][0];var def=self._rpc({model:model,method:'name_get',args:[ids],context:self.localData[parent].getContext({fieldName:fieldName}),}).then(function(result){_.each(result,function(el){var parentIDs=datapoints[el[0]];_.each(parentIDs,function(parentID){var parent=self.localData[parentID];var referenceDp=self._makeDataPoint({data:{id:el[0],display_name:el[1],},modelName:model,parentID:parent,});parent.data[fieldName]=referenceDp.id;});});});return def;},_fetchReferences:function(record,options){var self=this;var defs=[];var fieldNames=options&&options.fieldNames||record.getFieldNames();_.each(fieldNames,function(fieldName){var field=record.fields[fieldName];if(field.type==='reference'){var def=self._fetchReference(record,fieldName).then(function(dataPoint){if(dataPoint){record.data[fieldName]=dataPoint.id;}});defs.push(def);}});return Promise.all(defs);},_fetchReferenceBatched:function(list,fieldName){var self=this;list=this._applyX2ManyOperations(list);this._sortList(list);var toFetch=this._getDataToFetchByModel(list,fieldName);var defs=[];_.each(toFetch,function(datapoints,model){defs.push(self._fetchReferenceData(datapoints,model,fieldName));});return Promise.all(defs);},_fetchReferencesBatched:function(list){var defs=[];var fieldNames=list.getFieldNames();for(var i=0;i<fieldNames.length;i++){var field=list.fields[fieldNames[i]];if(field.type==='reference'){defs.push(this._fetchReferenceBatched(list,fieldNames[i]));}}
return Promise.all(defs);},_fetchReferenceSingleBatch:function(list,fieldName){var self=this;var toFetch={};_.each(list.data,function(groupIndex){var group=self.localData[groupIndex];_.extend(toFetch,self._getDataToFetchByModel(group,fieldName));});var defs=[];_.each(toFetch,function(datapoints,model){defs.push(self._fetchReferenceData(datapoints,model,fieldName));});return Promise.all(defs);},_fetchReferencesSingleBatch:function(list){var defs=[];var fieldNames=list.getFieldNames();for(var fIndex in fieldNames){var field=list.fields[fieldNames[fIndex]];if(field.type==='reference'){defs.push(this._fetchReferenceSingleBatch(list,fieldNames[fIndex]));}}
return Promise.all(defs);},_fetchRelatedData:function(list,toFetch,fieldName){var self=this;var ids=_.keys(toFetch);for(var i=0;i<ids.length;i++){ids[i]=Number(ids[i]);}
var fieldInfo=list.fieldsInfo[list.viewType][fieldName];if(!ids.length||fieldInfo.__no_fetch){return Promise.resolve();}
var def;var fieldNames=_.keys(fieldInfo.relatedFields);if(fieldNames.length){var field=list.fields[fieldName];def=this._rpc({model:field.relation,method:'read',args:[ids,fieldNames],context:list.getContext()||{},});}else{def=Promise.resolve(_.map(ids,function(id){return{id:id};}));}
return def.then(function(result){var records=_.uniq(_.flatten(_.values(toFetch)));self._updateRecordsData(records,fieldName,result);});},_fetchRelationalData:function(record){var self=this;var toBeFetched=[];_.each(record.getFieldNames(),function(name){var field=record.fields[name];if(field.type==='many2one'&&!record.fieldsInfo[record.viewType][name].__no_fetch){var localId=(record._changes&&record._changes[name])||record.data[name];var relatedRecord=self.localData[localId];if(!relatedRecord||relatedRecord.data.display_name){return;}
toBeFetched.push({context:record.getContext({fieldName:name,viewType:record.viewType}),record:relatedRecord});}});var groups=_.groupBy(toBeFetched,function(elem){return[elem.record.model,JSON.stringify(elem.context)].join();});return Promise.all(_.map(groups,this._fetchMany2OneGroup.bind(this)));},_fetchSpecialData:function(record,options){var self=this;var specialFieldNames=[];var fieldNames=(options&&options.fieldNames)||record.getFieldNames();return Promise.all(_.map(fieldNames,function(name){var viewType=(options&&options.viewType)||record.viewType;var fieldInfo=record.fieldsInfo[viewType][name]||{};var Widget=fieldInfo.Widget;if(Widget&&Widget.prototype.specialData){return self[Widget.prototype.specialData](record,name,fieldInfo).then(function(data){if(data===undefined){return;}
record.specialData[name]=data;specialFieldNames.push(name);});}})).then(function(){return specialFieldNames;});},_fetchSpecialMany2ones:function(record,fieldName,fieldInfo,fieldsToRead){var field=record.fields[fieldName];if(field.type!=="many2one"){return Promise.resolve();}
var context=record.getContext({fieldName:fieldName});var domain=record.getDomain({fieldName:fieldName});if(domain.length){var localID=(record._changes&&fieldName in record._changes)?record._changes[fieldName]:record.data[fieldName];if(localID){var element=this.localData[localID];domain=["|",["id","=",element.data.id]].concat(domain);}}
var hasChanged=this._saveSpecialDataCache(record,fieldName,{context:context,domain:domain,});if(!hasChanged){return Promise.resolve();}
var self=this;return this._rpc({model:field.relation,method:'search_read',fields:["id"].concat(fieldsToRead||[]),context:context,domain:domain,}).then(function(records){var ids=_.pluck(records,'id');return self._rpc({model:field.relation,method:'name_get',args:[ids],context:context,}).then(function(name_gets){_.each(records,function(rec){var name_get=_.find(name_gets,function(n){return n[0]===rec.id;});rec.display_name=name_get[1];});return records;});});},_fetchSpecialRelation:function(record,fieldName){var field=record.fields[fieldName];if(!_.contains(["many2one","many2many","one2many"],field.type)){return Promise.resolve();}
var context=record.getContext({fieldName:fieldName});var domain=record.getDomain({fieldName:fieldName});var hasChanged=this._saveSpecialDataCache(record,fieldName,{context:context,domain:domain,});if(!hasChanged){return Promise.resolve();}
return this._rpc({model:field.relation,method:'name_search',args:["",domain],context:context});},_fetchSpecialReference:function(record,fieldName){var def;var field=record.fields[fieldName];if(field.type==='char'){def=this._fetchReference(record,fieldName);}
return Promise.resolve(def);},_fetchSpecialStatus:function(record,fieldName,fieldInfo){var foldField=fieldInfo.options.fold_field;var fieldsToRead=foldField?[foldField]:[];return this._fetchSpecialMany2ones(record,fieldName,fieldInfo,fieldsToRead).then(function(m2os){_.each(m2os,function(m2o){m2o.fold=foldField?m2o[foldField]:false;});return m2os;});},_fetchSpecialDomain:function(record,fieldName,fieldInfo){var self=this;var context=record.getContext({fieldName:fieldName});var domainModel=fieldInfo.options.model;if(record.data.hasOwnProperty(domainModel)){domainModel=record._changes&&record._changes[domainModel]||record.data[domainModel];}
var domainValue=record._changes&&record._changes[fieldName]||record.data[fieldName]||[];var hasChanged=this._saveSpecialDataCache(record,fieldName,{context:context,domainModel:domainModel,domainValue:domainValue,});if(!hasChanged){return Promise.resolve();}else if(!domainModel){return Promise.resolve({model:domainModel,nbRecords:0,});}
return new Promise(function(resolve){var evalContext=self._getEvalContext(record);self._rpc({model:domainModel,method:'search_count',args:[Domain.prototype.stringToArray(domainValue,evalContext)],context:context}).then(function(nbRecords){resolve({model:domainModel,nbRecords:nbRecords,});}).guardedCatch(function(reason){var e=reason.event;e.preventDefault();resolve({model:domainModel,nbRecords:0,});});});},_fetchUngroupedList:function(list,options){options=_.defaults(options||{},{enableRelationalFetch:true});var self=this;var def;if(list.static){def=this._readUngroupedList(list).then(function(){if(list.parentID&&self.isNew(list.parentID)){var many2ones=self._getMany2OneFieldNames(list);var defs=_.map(many2ones,function(name){return self._fetchNameGets(list,name);});return Promise.all(defs);}});}else{def=this._searchReadUngroupedList(list);}
return def.then(function(){if(options.enableRelationalFetch){return Promise.all([self._fetchX2ManysBatched(list),self._fetchReferencesBatched(list)]);}}).then(function(){return list;});},_fetchX2ManyBatched:function(list,fieldName){list=this._applyX2ManyOperations(list);this._sortList(list);var toFetch=this._getDataToFetch(list,fieldName);return this._fetchRelatedData(list,toFetch,fieldName);},_fetchX2Manys:function(record,options){var self=this;var defs=[];options=options||{};var fieldNames=options.fieldNames||record.getFieldNames(options);var viewType=options.viewType||record.viewType;_.each(fieldNames,function(fieldName){var field=record.fields[fieldName];if(field.type==='one2many'||field.type==='many2many'){var fieldInfo=record.fieldsInfo[viewType][fieldName];var rawContext=fieldInfo&&fieldInfo.context;var view=fieldInfo.views&&fieldInfo.views[fieldInfo.mode];var fieldsInfo=view?view.fieldsInfo:(fieldInfo.fieldsInfo||{});var ids=record.data[fieldName]||[];var list=self._makeDataPoint({count:ids.length,context:_.extend({},record.context,field.context),fieldsInfo:fieldsInfo,fields:view?view.fields:fieldInfo.relatedFields,limit:fieldInfo.limit,modelName:field.relation,res_ids:ids,static:true,type:'list',orderedBy:fieldInfo.orderedBy,parentID:record.id,rawContext:rawContext,relationField:field.relation_field,viewType:view?view.type:fieldInfo.viewType,});record.data[fieldName]=list.id;if(!fieldInfo.__no_fetch){var def=self._readUngroupedList(list).then(function(){return Promise.all([self._fetchX2ManysBatched(list),self._fetchReferencesBatched(list)]);});defs.push(def);}}});return Promise.all(defs);},_fetchX2ManysBatched:function(list){var defs=[];var fieldNames=list.getFieldNames();for(var i=0;i<fieldNames.length;i++){var field=list.fields[fieldNames[i]];if(field.type==='many2many'||field.type==='one2many'){defs.push(this._fetchX2ManyBatched(list,fieldNames[i]));}}
return Promise.all(defs);},_fetchX2ManySingleBatch:function(list,fieldName){var self=this;var toFetch={};_.each(list.data,function(groupIndex){var group=self.localData[groupIndex];var nextDataToFetch=self._getDataToFetch(group,fieldName);_.each(_.keys(nextDataToFetch),function(id){if(toFetch[id]){toFetch[id]=toFetch[id].concat(nextDataToFetch[id]);}else{toFetch[id]=nextDataToFetch[id];}});});return self._fetchRelatedData(list,toFetch,fieldName);},_fetchX2ManysSingleBatch:function(list){var defs=[];var fieldNames=list.getFieldNames();for(var i=0;i<fieldNames.length;i++){var field=list.fields[fieldNames[i]];if(field.type==='many2many'||field.type==='one2many'){defs.push(this._fetchX2ManySingleBatch(list,fieldNames[i]));}}
return Promise.all(defs);},_generateChanges:function(record,options){options=options||{};var viewType=options.viewType||record.viewType;var changes;if('changesOnly'in options&&!options.changesOnly){changes=_.extend({},record.data,record._changes);}else{changes=_.extend({},record._changes);}
var withReadonly=options.withReadonly||false;var commands=this._generateX2ManyCommands(record,{changesOnly:'changesOnly'in options?options.changesOnly:true,withReadonly:withReadonly,});for(var fieldName in record.fields){if(!withReadonly&&fieldName in changes||fieldName in commands){var editionViewType=record._editionViewType[fieldName]||viewType;if(this._isFieldProtected(record,fieldName,editionViewType)){delete changes[fieldName];continue;}}
var type=record.fields[fieldName].type;var value;if(type==='one2many'||type==='many2many'){if(commands[fieldName]&&commands[fieldName].length){changes[fieldName]=commands[fieldName];}else{delete changes[fieldName];}}else if(type==='many2one'&&fieldName in changes){value=changes[fieldName];changes[fieldName]=value?this.localData[value].res_id:false;}else if(type==='reference'&&fieldName in changes){value=changes[fieldName];changes[fieldName]=value?this.localData[value].model+','+this.localData[value].res_id:false;}else if(type==='char'&&changes[fieldName]===''){changes[fieldName]=false;}else if(changes[fieldName]===null){changes[fieldName]=false;}}
return changes;},_generateOnChangeData:function(record,options){options=_.extend({},options||{},{withReadonly:true});var commands=this._generateX2ManyCommands(record,options);var data=_.extend(this.get(record.id,{raw:true}).data,commands);var hasDisplayName=_.some(record.fieldsInfo,function(fieldsInfo){return'display_name'in fieldsInfo;});if(!hasDisplayName){delete data.display_name;}
if(record.parentID){var parent=this.localData[record.parentID];if(parent.parentID&&parent.relationField){var parentRecord=this.localData[parent.parentID];data[parent.relationField]=this._generateOnChangeData(parentRecord);}}
return data;},_generateX2ManyCommands:function(record,options){var self=this;options=options||{};var fields=record.fields;if(options.fieldNames){fields=_.pick(fields,options.fieldNames);}
var commands={};var data=_.extend({},record.data,record._changes);var type;for(var fieldName in fields){type=fields[fieldName].type;if(type==='many2many'||type==='one2many'){if(!data[fieldName]){continue;}
commands[fieldName]=[];var list=this.localData[data[fieldName]];if(options.changesOnly&&(!list._changes||!list._changes.length)){continue;}
var oldResIDs=list.res_ids.slice(0);var relRecordAdded=[];var relRecordUpdated=[];_.each(list._changes,function(change){if(change.operation==='ADD'&&change.id){relRecordAdded.push(self.localData[change.id]);}else if(change.operation==='UPDATE'&&!self.isNew(change.id)){relRecordUpdated.push(self.localData[change.id]);}});list=this._applyX2ManyOperations(list);this._sortList(list);if(type==='many2many'||list._forceM2MLink){var relRecordCreated=_.filter(relRecordAdded,function(rec){return typeof rec.res_id==='string';});var realIDs=_.difference(list.res_ids,_.pluck(relRecordCreated,'res_id'));commands[fieldName].push(x2ManyCommands.replace_with(realIDs));_.each(relRecordCreated,function(relRecord){var changes=self._generateChanges(relRecord,options);commands[fieldName].push(x2ManyCommands.create(relRecord.ref,changes));});_.each(relRecordUpdated,function(relRecord){var changes=self._generateChanges(relRecord,options);if(!_.isEmpty(changes)){var command=x2ManyCommands.update(relRecord.res_id,changes);commands[fieldName].push(command);}});}else if(type==='one2many'){var removedIds=_.difference(oldResIDs,list.res_ids);var addedIds=_.difference(list.res_ids,oldResIDs);var keptIds=_.intersection(oldResIDs,list.res_ids);var didChange=false;var changes,command,relRecord;for(var i=0;i<list.res_ids.length;i++){if(_.contains(keptIds,list.res_ids[i])){relRecord=_.findWhere(relRecordUpdated,{res_id:list.res_ids[i]});changes=relRecord?this._generateChanges(relRecord,options):{};if(!_.isEmpty(changes)){command=x2ManyCommands.update(relRecord.res_id,changes);didChange=true;}else{command=x2ManyCommands.link_to(list.res_ids[i]);}
commands[fieldName].push(command);}else if(_.contains(addedIds,list.res_ids[i])){relRecord=_.findWhere(relRecordAdded,{res_id:list.res_ids[i]});if(!relRecord){commands[fieldName].push(x2ManyCommands.link_to(list.res_ids[i]));continue;}
changes=this._generateChanges(relRecord,_.extend({},options,{changesOnly:true}));if(!this.isNew(relRecord.id)){commands[fieldName].push(x2ManyCommands.link_to(relRecord.res_id));delete changes.id;if(!_.isEmpty(changes)){commands[fieldName].push(x2ManyCommands.update(relRecord.res_id,changes));}}else{commands[fieldName].push(x2ManyCommands.create(relRecord.ref,changes));}}}
if(options.changesOnly&&!didChange&&addedIds.length===0&&removedIds.length===0){commands[fieldName]=[];}
for(i=0;i<removedIds.length;i++){if(list._forceM2MUnlink){commands[fieldName].push(x2ManyCommands.forget(removedIds[i]));}else{commands[fieldName].push(x2ManyCommands.delete(removedIds[i]));}}}}}
return commands;},_getContext:function(element,options){options=options||{};var context=new Context(session.user_context);context.set_eval_context(this._getEvalContext(element));if(options.full||!(options.fieldName||options.additionalContext)){context.add(element.context);}
if(options.fieldName){var viewType=options.viewType||element.viewType;var fieldInfo=element.fieldsInfo[viewType][options.fieldName];if(fieldInfo&&fieldInfo.context){context.add(fieldInfo.context);}else{var fieldParams=element.fields[options.fieldName];if(fieldParams.context){context.add(fieldParams.context);}}}
if(options.additionalContext){context.add(options.additionalContext);}
if(element.rawContext){var rawContext=new Context(element.rawContext);var evalContext=this._getEvalContext(this.localData[element.parentID]);evalContext.id=evalContext.id||false;rawContext.set_eval_context(evalContext);context.add(rawContext);}
return context.eval();},_getDataToFetch:function(list,fieldName){var self=this;var field=list.fields[fieldName];var fieldInfo=list.fieldsInfo[list.viewType][fieldName];var view=fieldInfo.views&&fieldInfo.views[fieldInfo.mode];var fieldsInfo=view?view.fieldsInfo:fieldInfo.fieldsInfo;var fields=view?view.fields:fieldInfo.relatedFields;var viewType=view?view.type:fieldInfo.viewType;var toFetch={};let dataPointIds=list.data;for(let i=0;i<list.groupedBy.length;i++){dataPointIds=dataPointIds.reduce((acc,groupId)=>acc.concat(this.localData[groupId].data),[]);}
dataPointIds.forEach(function(dataPoint){var record=self.localData[dataPoint];if(typeof record.data[fieldName]==='string'){return;}
_.each(record.data[fieldName],function(id){toFetch[id]=toFetch[id]||[];toFetch[id].push(record);});var m2mList=self._makeDataPoint({fieldsInfo:fieldsInfo,fields:fields,modelName:field.relation,parentID:record.id,res_ids:record.data[fieldName],static:true,type:'list',viewType:viewType,});record.data[fieldName]=m2mList.id;});return toFetch;},_getDataToFetchByModel:function(list,fieldName){var self=this;var toFetch={};_.each(list.data,function(dataPoint){var record=self.localData[dataPoint];var value=record.data[fieldName];if(value&&!self.localData[value]){var model=value.split(',')[0];var resID=value.split(',')[1];if(!(model in toFetch)){toFetch[model]={};}
if(toFetch[model][resID]){toFetch[model][resID].push(dataPoint);}else{toFetch[model][resID]=[dataPoint];}}});return toFetch;},_getDefaultContext:function(dataPoint){var defaultContext={};while(dataPoint.parentID){var parent=this.localData[dataPoint.parentID];var groupByField=parent.groupedBy[0].split(':')[0];var value=viewUtils.getGroupValue(dataPoint,groupByField);if(value){defaultContext['default_'+groupByField]=value;}
dataPoint=parent;}
return defaultContext;},_getDomain:function(element,options){if(options&&options.fieldName){if(element._domains[options.fieldName]){return Domain.prototype.stringToArray(element._domains[options.fieldName],this._getEvalContext(element,true));}
var viewType=options.viewType||element.viewType;var fieldInfo=element.fieldsInfo[viewType][options.fieldName];if(fieldInfo&&fieldInfo.domain){return Domain.prototype.stringToArray(fieldInfo.domain,this._getEvalContext(element,true));}
var fieldParams=element.fields[options.fieldName];if(fieldParams.domain){return Domain.prototype.stringToArray(fieldParams.domain,this._getEvalContext(element,true));}
return[];}
return Domain.prototype.stringToArray(element.domain,this._getEvalContext(element,true));},_getEvalContext:function(element,forDomain){var evalContext=element.type==='record'?this._getRecordEvalContext(element,forDomain):{};if(element.parentID){var parent=this.localData[element.parentID];if(parent.type==='list'&&parent.parentID){parent=this.localData[parent.parentID];}
if(parent.type==='record'){evalContext.parent=this._getRecordEvalContext(parent,forDomain);}}
if(session.user_context.allowed_company_ids){var current_company=session.user_context.allowed_company_ids[0];}else{var current_company=session.user_companies?session.user_companies.current_company[0]:false;}
return _.extend({active_id:evalContext.id||false,active_ids:evalContext.id?[evalContext.id]:[],active_model:element.model,current_date:moment().format('YYYY-MM-DD'),id:evalContext.id||false,current_company_id:current_company,},session.user_context,element.context,evalContext);},_getFieldNames:function(element,options){var fieldsInfo=element.fieldsInfo;var viewType=options&&options.viewType||element.viewType;return Object.keys(fieldsInfo&&fieldsInfo[viewType]||{});},_getMany2OneFieldNames:function(datapoint){var many2ones=[];_.each(datapoint.fields,function(field,name){if(field.type==='many2one'){many2ones.push(name);}});return many2ones;},_getRecordEvalContext:function(record,forDomain){var self=this;var relDataPoint;var context=_.extend({},record.data,record._changes);function _generateX2ManyCommands(fieldName){var commands=self._generateX2ManyCommands(record,{fieldNames:[fieldName]});return commands[fieldName];}
for(var fieldName in context){var field=record.fields[fieldName];if(context[fieldName]===null){context[fieldName]=false;}
if(!field||field.name==='id'){continue;}
if(field.type==='date'||field.type==='datetime'){if(context[fieldName]){context[fieldName]=JSON.parse(JSON.stringify(context[fieldName]));}
continue;}
if(field.type==='many2one'){relDataPoint=this.localData[context[fieldName]];context[fieldName]=relDataPoint?relDataPoint.res_id:false;continue;}
if(field.type==='one2many'||field.type==='many2many'){var ids;if(!context[fieldName]||_.isArray(context[fieldName])){ids=context[fieldName]?context[fieldName].slice(0):[];}else{relDataPoint=this._applyX2ManyOperations(this.localData[context[fieldName]]);ids=relDataPoint.res_ids.slice(0);}
if(!forDomain){ids.toJSON=_generateX2ManyCommands.bind(null,fieldName);}else if(field.type==='one2many'){ids=_.filter(ids,function(id){return typeof id!=='string';});}
context[fieldName]=ids;}}
return context;},_invalidateCache:function(dataPoint){while(dataPoint.parentID){dataPoint=this.localData[dataPoint.parentID];}
if(dataPoint.model==='res.currency'){session.reloadCurrencies();}
if(_.contains(this.noCacheModels,dataPoint.model)){core.bus.trigger('clear_cache');}},_isFieldProtected:function(record,fieldName,viewType){var fieldInfo=record.fieldsInfo&&(record.fieldsInfo[viewType||record.viewType][fieldName]);if(fieldInfo){var rawModifiers=fieldInfo.modifiers||{};var modifiers=this._evalModifiers(record,_.pick(rawModifiers,'readonly'));return modifiers.readonly&&!fieldInfo.force_save;}else{return false;}},_isFieldSet:function(value,fieldType){switch(fieldType){case'boolean':return true;case'one2many':case'many2many':return value.length>0;default:return value!==false;}},_isX2ManyValid:function(id){var self=this;var isValid=true;var element=this.localData[id];_.each(element._changes,function(command){if(command.operation==='DELETE'||command.operation==='FORGET'||(command.operation==='ADD'&&!command.isNew)||command.operation==='REMOVE_ALL'){return;}
var recordData=self.get(command.id,{raw:true}).data;var record=self.localData[command.id];_.each(element.getFieldNames(),function(fieldName){var field=element.fields[fieldName];var fieldInfo=element.fieldsInfo[element.viewType][fieldName];var rawModifiers=fieldInfo.modifiers||{};var modifiers=self._evalModifiers(record,_.pick(rawModifiers,'required'));if(modifiers.required&&!self._isFieldSet(recordData[fieldName],field.type)){isValid=false;}});});return isValid;},_load:function(dataPoint,options){if(options&&options.onlyGroups&&!(dataPoint.type==='list'&&dataPoint.groupedBy.length)){return Promise.resolve(dataPoint);}
if(dataPoint.type==='record'){return this._fetchRecord(dataPoint,options);}
if(dataPoint.type==='list'&&dataPoint.groupedBy.length){return this._readGroup(dataPoint,options);}
if(dataPoint.type==='list'&&!dataPoint.groupedBy.length){return this._fetchUngroupedList(dataPoint,options);}},_makeDataPoint:function(params){var type=params.type||('domain'in params&&'list')||'record';var res_id,value;var res_ids=params.res_ids||[];var data=params.data||(type==='record'?{}:[]);var context=params.context;if(type==='record'){res_id=params.res_id||(params.data&&params.data.id);if(res_id){data.id=res_id;}else{res_id=_.uniqueId('virtual_');}
context=_.omit(context,['orderedBy','group_by']);}else{var isValueArray=params.value instanceof Array;res_id=isValueArray?params.value[0]:undefined;value=isValueArray?params.value[1]:params.value;}
var fields=_.extend({display_name:{type:'char'},id:{type:'integer'},},params.fields);var dataPoint={_cache:type==='list'?{}:undefined,_changes:null,_domains:{},_rawChanges:{},aggregateValues:params.aggregateValues||{},context:context,count:params.count||res_ids.length,data:data,domain:params.domain||[],fields:fields,fieldsInfo:params.fieldsInfo,groupedBy:params.groupedBy||[],groupsCount:0,groupsLimit:type==='list'&&params.groupsLimit||null,groupsOffset:0,id:_.uniqueId(params.modelName+'_'),isOpen:params.isOpen,limit:type==='record'?1:params.limit,loadMoreOffset:0,model:params.modelName,offset:params.offset||(type==='record'?_.indexOf(res_ids,res_id):0),openGroupByDefault:params.openGroupByDefault,orderedBy:params.orderedBy||[],orderedResIDs:params.orderedResIDs,parentID:params.parentID,rawContext:params.rawContext,ref:params.ref||res_id,relationField:params.relationField,res_id:res_id,res_ids:res_ids,specialData:{},_specialDataCache:{},static:params.static||false,type:type,value:value,viewType:params.viewType,};dataPoint._editionViewType={};dataPoint.evalModifiers=this._evalModifiers.bind(this,dataPoint);dataPoint.getContext=this._getContext.bind(this,dataPoint);dataPoint.getDomain=this._getDomain.bind(this,dataPoint);dataPoint.getFieldNames=this._getFieldNames.bind(this,dataPoint);dataPoint.isDirty=this.isDirty.bind(this,dataPoint.id);this.localData[dataPoint.id]=dataPoint;return dataPoint;},_makeDefaultRecord:function(modelName,params){var self=this;var targetView=params.viewType;var fields=params.fields;var fieldsInfo=params.fieldsInfo;var fieldNames=Object.keys(fieldsInfo[targetView]);var fields_key=_.without(fieldNames,'__last_update');var parentRecord=self.localData[params.parentID];if(parentRecord){var originView=parentRecord.viewType;fieldNames=_.union(fieldNames,Object.keys(parentRecord.fieldsInfo[originView]));fieldsInfo[targetView]=_.defaults({},fieldsInfo[targetView],parentRecord.fieldsInfo[originView]);fields=_.defaults({},fields,parentRecord.fields);}
return this._rpc({model:modelName,method:'default_get',args:[fields_key],context:params.context,}).then(function(result){var record=self._makeDataPoint({modelName:modelName,fields:fields,fieldsInfo:fieldsInfo,context:params.context,parentID:params.parentID,res_ids:params.res_ids,viewType:targetView,});var overrideDefaultFields=self._computeOverrideDefaultFields(params.parentID,params.position);if(overrideDefaultFields){result[overrideDefaultFields.field]=overrideDefaultFields.value;}
return self.applyDefaultValues(record.id,result,{fieldNames:fieldNames}).then(function(){var def=new Promise(function(resolve,reject){var always=function(){if(record._warning){if(params.allowWarning){delete record._warning;}else{reject();}}
resolve();};self._performOnChange(record,fields_key).then(always).guardedCatch(always);});return def;}).then(function(){return self._fetchRelationalData(record);}).then(function(){return self._postprocess(record);}).then(function(){self.save(record.id,{savePoint:true});return record.id;});});},_parseServerData:function(fieldNames,element,data){var self=this;_.each(fieldNames,function(fieldName){var field=element.fields[fieldName];var val=data[fieldName];if(field.type==='many2one'){if(val!==false){var r=self._makeDataPoint({modelName:field.relation,fields:{display_name:{type:'char'},id:{type:'integer'},},data:{display_name:val[1],id:val[0],},parentID:element.id,});data[fieldName]=r.id;}else{data[fieldName]=false;}}else{data[fieldName]=self._parseServerValue(field,val);}});},_performOnChange:function(record,fields,viewType){var self=this;var onchangeSpec=this._buildOnchangeSpecs(record,viewType);if(!onchangeSpec){return Promise.resolve();}
var idList=record.data.id?[record.data.id]:[];var options={full:true,};if(fields.length===1){fields=fields[0];options.fieldName=fields;}
var context=this._getContext(record,options);var currentData=this._generateOnChangeData(record,{changesOnly:false});return self._rpc({model:record.model,method:'onchange',args:[idList,currentData,fields,onchangeSpec],context:context,}).then(function(result){if(!record._changes){return;}
if(result.warning){self.trigger_up('warning',result.warning);record._warning=true;}
if(result.domain){record._domains=_.extend(record._domains,result.domain);}
return self._applyOnChange(result.value,record).then(function(){return result;});});},_performRPC:function(params){var self=this;var request=_.extend({},params);var prom=new Promise(function(resolve,reject){request.resolve=resolve;request.reject=reject;});this.batchedRPCsRequests.push(request);Promise.resolve().then(function(){if(!self.batchedRPCsRequests.length){return;}
var batchedRPCsRequests=self.batchedRPCsRequests;self.batchedRPCsRequests=[];var batches={};var key;for(var i=0;i<batchedRPCsRequests.length;i++){var request=batchedRPCsRequests[i];key=request.model+','+JSON.stringify(request.context);if(!batches[key]){batches[key]=_.extend({},request,{requests:[request]});}else{batches[key].ids=_.uniq(batches[key].ids.concat(request.ids));batches[key].fieldNames=_.uniq(batches[key].fieldNames.concat(request.fieldNames));batches[key].requests.push(request);}}
function onSuccess(batch,results){for(var i=0;i<batch.requests.length;i++){var request=batch.requests[i];var fieldNames=request.fieldNames.concat(['id']);var filteredResults=results.filter(function(record){return request.ids.indexOf(record.id)>=0;}).map(function(record){return _.pick(record,fieldNames);});request.resolve(filteredResults);}}
function onFailure(batch,error){for(var i=0;i<batch.requests.length;i++){var request=batch.requests[i];request.reject(error);}}
for(key in batches){var batch=batches[key];self._rpc({model:batch.model,method:'read',args:[batch.ids,batch.fieldNames],context:batch.context,}).then(onSuccess.bind(null,batch)).guardedCatch(onFailure.bind(null,batch));}});return prom;},_postprocess:function(record,options){var self=this;var viewType=options&&options.viewType||record.viewType;var defs=[];_.each(record.getFieldNames(options),function(name){var field=record.fields[name];var fieldInfo=record.fieldsInfo[viewType][name]||{};var options=fieldInfo.options||{};if(options.always_reload){if(record.fields[name].type==='many2one'&&record.data[name]){var element=self.localData[record.data[name]];defs.push(self._rpc({model:field.relation,method:'name_get',args:[element.data.id],context:self._getContext(record,{fieldName:name,viewType:viewType}),}).then(function(result){element.data.display_name=result[0][1];}));}}});defs.push(this._fetchSpecialData(record,options));return Promise.all(defs).then(function(){return record;});},_processX2ManyCommands:function(record,fieldName,commands,options){var self=this;options=options||{};var defs=[];var field=record.fields[fieldName];var fieldInfo=record.fieldsInfo[options.viewType||record.viewType][fieldName];var view=fieldInfo.views&&fieldInfo.views[fieldInfo.mode];var fieldsInfo=view?view.fieldsInfo:fieldInfo.fieldsInfo;var fields=view?view.fields:fieldInfo.relatedFields;var viewType=view?view.type:fieldInfo.viewType;var x2manyList=self._makeDataPoint({context:record.context,fieldsInfo:fieldsInfo,fields:fields,limit:fieldInfo.limit,modelName:field.relation,parentID:record.id,rawContext:fieldInfo&&fieldInfo.context,relationField:field.relation_field,res_ids:[],static:true,type:'list',viewType:viewType,});record._changes[fieldName]=x2manyList.id;x2manyList._changes=[];var many2ones={};var r;commands=commands||[];var isCommandList=commands.length&&_.isArray(commands[0]);if(!isCommandList){commands=[[6,false,commands]];}
_.each(commands,function(value){if(value[0]===0){r=self._makeDataPoint({modelName:x2manyList.model,context:x2manyList.context,fieldsInfo:fieldsInfo,fields:fields,parentID:x2manyList.id,viewType:viewType,});r._noAbandon=true;x2manyList._changes.push({operation:'ADD',id:r.id});x2manyList._cache[r.res_id]=r.id;_.each(r.getFieldNames(),function(fieldName){r.data[fieldName]=null;});r._changes=_.defaults(value[2],r.data);for(var fieldName in r._changes){if(!r._changes[fieldName]){continue;}
var isFieldInView=fieldName in r.fields;if(isFieldInView){var field=r.fields[fieldName];var fieldType=field.type;var rec;if(fieldType==='many2one'){rec=self._makeDataPoint({context:r.context,modelName:field.relation,data:{id:r._changes[fieldName]},parentID:r.id,});r._changes[fieldName]=rec.id;many2ones[fieldName]=true;}else if(fieldType==='reference'){var reference=r._changes[fieldName].split(',');rec=self._makeDataPoint({context:r.context,modelName:reference[0],data:{id:parseInt(reference[1])},parentID:r.id,});r._changes[fieldName]=rec.id;many2ones[fieldName]=true;}else if(_.contains(['one2many','many2many'],fieldType)){var x2mCommands=value[2][fieldName];defs.push(self._processX2ManyCommands(r,fieldName,x2mCommands));}else{r._changes[fieldName]=self._parseServerValue(field,r._changes[fieldName]);}}}}
if(value[0]===6){_.each(value[2],function(res_id){x2manyList._changes.push({operation:'ADD',resID:res_id});});var def=self._readUngroupedList(x2manyList).then(function(){return Promise.all([self._fetchX2ManysBatched(x2manyList),self._fetchReferencesBatched(x2manyList)]);});defs.push(def);}});_.each(_.keys(many2ones),function(name){defs.push(self._fetchNameGets(x2manyList,name));});return Promise.all(defs);},_readMissingFields:function(list,resIDs,fieldNames){var self=this;var missingIDs=[];for(var i=0,len=resIDs.length;i<len;i++){var resId=resIDs[i];var dataPointID=list._cache[resId];if(!dataPointID){missingIDs.push(resId);continue;}
var record=self.localData[dataPointID];var data=_.extend({},record.data,record._changes);if(_.difference(fieldNames,_.keys(data)).length){missingIDs.push(resId);}}
var def;if(missingIDs.length&&fieldNames.length){def=self._performRPC({context:list.getContext(),fieldNames:fieldNames,ids:missingIDs,method:'read',model:list.model,});}else{def=Promise.resolve(_.map(missingIDs,function(id){return{id:id};}));}
return def.then(function(records){_.each(resIDs,function(id){var dataPoint;var data=_.findWhere(records,{id:id});if(id in list._cache){dataPoint=self.localData[list._cache[id]];if(data){self._parseServerData(fieldNames,dataPoint,data);_.extend(dataPoint.data,data);}}else{dataPoint=self._makeDataPoint({context:list.getContext(),data:data,fieldsInfo:list.fieldsInfo,fields:list.fields,modelName:list.model,parentID:list.id,viewType:list.viewType,});self._parseServerData(fieldNames,dataPoint,dataPoint.data);list._cache[id]=dataPoint.id;}
_.each(list._changes,function(change){if(change.operation==='ADD'&&!change.id&&change.resID===id){change.id=dataPoint.id;}});});return list;});},_readGroup:function(list,options){var self=this;options=options||{};var groupByField=list.groupedBy[0];var rawGroupBy=groupByField.split(':')[0];var fields=_.uniq(list.getFieldNames().concat(rawGroupBy));var orderedBy=_.filter(list.orderedBy,function(order){return order.name===rawGroupBy||list.fields[order.name].group_operator!==undefined;});var openGroupsLimit=list.groupsLimit||self.OPEN_GROUP_LIMIT;var expand=list.openGroupByDefault&&options.fetchRecordsWithGroups;return this._rpc({model:list.model,method:'web_read_group',fields:fields,domain:list.domain,context:list.context,groupBy:list.groupedBy,limit:list.groupsLimit,offset:list.groupsOffset,orderBy:orderedBy,lazy:true,expand:expand,expand_limit:expand?list.limit:null,expand_orderby:expand?list.orderedBy:null,}).then(function(result){var groups=result.groups;list.groupsCount=result.length;var previousGroups=_.map(list.data,function(groupID){return self.localData[groupID];});list.data=[];list.count=0;var defs=[];var openGroupCount=0;_.each(groups,function(group){var aggregateValues={};_.each(group,function(value,key){if(_.contains(fields,key)&&key!==groupByField&&AGGREGATABLE_TYPES.includes(list.fields[key].type)){aggregateValues[key]=value;}});var value=group[groupByField];if(list.fields[rawGroupBy].type==="selection"){var choice=_.find(list.fields[rawGroupBy].selection,function(c){return c[0]===value;});value=choice?choice[1]:false;}
var newGroup=self._makeDataPoint({modelName:list.model,count:group[rawGroupBy+'_count'],domain:group.__domain,context:list.context,fields:list.fields,fieldsInfo:list.fieldsInfo,value:value,aggregateValues:aggregateValues,groupedBy:list.groupedBy.slice(1),orderedBy:list.orderedBy,orderedResIDs:list.orderedResIDs,limit:list.limit,openGroupByDefault:list.openGroupByDefault,parentID:list.id,type:'list',viewType:list.viewType,});var oldGroup=_.find(previousGroups,function(g){return g.res_id===newGroup.res_id&&g.value===newGroup.value;});if(oldGroup){delete self.localData[newGroup.id];var updatedProps=_.pick(oldGroup,'isOpen','offset','id');if(options.onlyGroups||oldGroup.isOpen&&newGroup.groupedBy.length){updatedProps.data=oldGroup.data;}
_.extend(newGroup,updatedProps);newGroup.limit=oldGroup.limit+oldGroup.loadMoreOffset;self.localData[newGroup.id]=newGroup;}else if(!newGroup.openGroupByDefault||openGroupCount>=openGroupsLimit){newGroup.isOpen=false;}else if('__fold'in group){newGroup.isOpen=!group.__fold;}else{newGroup.isOpen=!self.localData[newGroup.parentID].parentID;}
list.data.push(newGroup.id);list.count+=newGroup.count;if(newGroup.isOpen&&newGroup.count>0){openGroupCount++;if(group.__data){newGroup.__data=group.__data;}
options=_.defaults({enableRelationalFetch:false},options);defs.push(self._load(newGroup,options));}});if(options.keepEmptyGroups){var emptyGroupsIDs=_.difference(_.pluck(previousGroups,'id'),list.data);_.each(emptyGroupsIDs,function(groupID){list.data.push(groupID);var emptyGroup=self.localData[groupID];emptyGroup.aggregateValues={};});}
return Promise.all(defs).then(function(groups){if(!options.onlyGroups){list.res_ids=_.flatten(_.map(groups,function(group){return group?group.res_ids:[];}));}
return list;}).then(function(){return Promise.all([self._fetchX2ManysSingleBatch(list),self._fetchReferencesSingleBatch(list)]).then(function(){return list;});});});},_readUngroupedList:function(list){var self=this;var def=Promise.resolve();list=this._applyX2ManyOperations(list);if(list.res_ids.length>list.limit&&list.orderedBy.length){if(!list.orderedResIDs){var fieldNames=_.pluck(list.orderedBy,'name');def=this._readMissingFields(list,_.filter(list.res_ids,_.isNumber),fieldNames);}
def.then(function(){self._sortList(list);});}
return def.then(function(){var resIDs=[];var currentResIDs=list.res_ids;if(list.orderedResIDs){currentResIDs=list.orderedResIDs.filter(function(resID){return list.res_ids.indexOf(resID)>=0;});}
var currentCount=currentResIDs.length;var upperBound=list.limit?Math.min(list.offset+list.limit,currentCount):currentCount;var fieldNames=list.getFieldNames();for(var i=list.offset;i<upperBound;i++){var resId=currentResIDs[i];if(_.isNumber(resId)){resIDs.push(resId);}}
return self._readMissingFields(list,resIDs,fieldNames).then(function(){if(list.res_ids.length<=list.limit){self._sortList(list);}else{self._setDataInRange(list);}
return list;});});},_reload:function(id,options){options=options||{};var element=this.localData[id];if(element.type==='record'){if(!options.currentId&&(('currentId'in options)||this.isNew(id))){var params={context:element.context,fieldsInfo:element.fieldsInfo,fields:element.fields,viewType:element.viewType,};return this._makeDefaultRecord(element.model,params);}
if(!options.keepChanges){this.discardChanges(id,{rollback:false});}}else if(element._changes){delete element.tempLimitIncrement;_.each(element._changes,function(change){delete change.isNew;});}
if(options.context!==undefined){element.context=options.context;}
if(options.orderedBy!==undefined){element.orderedBy=options.orderedBy||element.orderedBy;}
if(options.domain!==undefined){element.domain=options.domain;}
if(options.groupBy!==undefined){element.groupedBy=options.groupBy;}
if(options.limit!==undefined){element.limit=options.limit;}
if(options.offset!==undefined){this._setOffset(element.id,options.offset);}
if(options.groupsLimit!==undefined){element.groupsLimit=options.groupsLimit;}
if(options.groupsOffset!==undefined){element.groupsOffset=options.groupsOffset;}
if(options.loadMoreOffset!==undefined){element.loadMoreOffset=options.loadMoreOffset;}else{element.loadMoreOffset=0;}
if(options.currentId!==undefined){element.res_id=options.currentId;}
if(options.ids!==undefined){element.res_ids=options.ids;element.count=element.res_ids.length;}
if(element.type==='record'){element.offset=_.indexOf(element.res_ids,element.res_id);}
var loadOptions=_.pick(options,'fieldNames','viewType');return this._load(element,loadOptions).then(function(result){return result.id;});},_saveSpecialDataCache:function(record,fieldName,value){if(_.isEqual(record._specialDataCache[fieldName],value)){return false;}
record._specialDataCache[fieldName]=value;return true;},_searchReadUngroupedList:function(list){var self=this;var fieldNames=list.getFieldNames();var prom;if(list.__data){prom=Promise.resolve(list.__data);}else{prom=this._rpc({route:'/web/dataset/search_read',model:list.model,fields:fieldNames,context:_.extend({},list.getContext(),{bin_size:true}),domain:list.domain||[],limit:list.limit,offset:list.loadMoreOffset+list.offset,orderBy:list.orderedBy,});}
return prom.then(function(result){delete list.__data;list.count=result.length;var ids=_.pluck(result.records,'id');var data=_.map(result.records,function(record){var dataPoint=self._makeDataPoint({context:list.context,data:record,fields:list.fields,fieldsInfo:list.fieldsInfo,modelName:list.model,parentID:list.id,viewType:list.viewType,});self._parseServerData(fieldNames,dataPoint,dataPoint.data);return dataPoint.id;});if(list.loadMoreOffset){list.data=list.data.concat(data);list.res_ids=list.res_ids.concat(ids);}else{list.data=data;list.res_ids=ids;}
self._updateParentResIDs(list);return list;});},_setDataInRange:function(list){var idsInRange;if(list.limit){idsInRange=list.res_ids.slice(list.offset,list.offset+list.limit);}else{idsInRange=list.res_ids;}
list.data=[];_.each(idsInRange,function(id){if(list._cache[id]){list.data.push(list._cache[id]);}});if(list.limit){for(var i=list.offset+list.limit;i<list.res_ids.length;i++){var id=list.res_ids[i];var dataPointID=list._cache[id];if(_.findWhere(list._changes,{isNew:true,id:dataPointID})){list.data.push(dataPointID);}else{break;}}}},_setOffset:function(elementId,offset){var element=this.localData[elementId];element.offset=offset;if(element.type==='record'&&element.res_ids.length){element.res_id=element.res_ids[offset];}},_sortList:function(list){if(!list.static){return;}
var self=this;if(list.orderedResIDs){var orderedResIDs={};for(var k=0;k<list.orderedResIDs.length;k++){orderedResIDs[list.orderedResIDs[k]]=k;}
utils.stableSort(list.res_ids,function compareResIdIndexes(resId1,resId2){if(!(resId1 in orderedResIDs)&&!(resId2 in orderedResIDs)){return 0;}
if(!(resId1 in orderedResIDs)){return Infinity;}
if(!(resId2 in orderedResIDs)){return-Infinity;}
return orderedResIDs[resId1]-orderedResIDs[resId2];});}else if(list.orderedBy.length){var compareRecords=function(resId1,resId2,level){if(!level){level=0;}
if(list.orderedBy.length<level+1){return 0;}
var order=list.orderedBy[level];var record1ID=list._cache[resId1];var record2ID=list._cache[resId2];if(!record1ID&&!record2ID){return 0;}
if(!record1ID){return Infinity;}
if(!record2ID){return-Infinity;}
var r1=self.localData[record1ID];var r2=self.localData[record2ID];var data1=_.extend({},r1.data,r1._changes);var data2=_.extend({},r2.data,r2._changes);var orderData1=data1[order.name];var orderData2=data2[order.name];if(list.fields[order.name].type==='many2one'){orderData1=orderData1?self.localData[orderData1].data.display_name:"";orderData2=orderData2?self.localData[orderData2].data.display_name:"";}
if(orderData1<orderData2){return order.asc?-1:1;}
if(orderData1>orderData2){return order.asc?1:-1;}
return compareRecords(resId1,resId2,level+1);};utils.stableSort(list.res_ids,compareRecords);}
this._setDataInRange(list);},_updateParentResIDs:function(element){var self=this;if(element.parentID){var parent=this.localData[element.parentID];parent.res_ids=_.flatten(_.map(parent.data,function(dataPointID){return self.localData[dataPointID].res_ids;}));this._updateParentResIDs(parent);}},_updateRecordsData:function(records,fieldName,values){if(!records.length||!values){return;}
var self=this;var field=records[0].fields[fieldName];var fieldInfo=records[0].fieldsInfo[records[0].viewType][fieldName];var view=fieldInfo.views&&fieldInfo.views[fieldInfo.mode];var fieldsInfo=view?view.fieldsInfo:fieldInfo.fieldsInfo;var fields=view?view.fields:fieldInfo.relatedFields;var viewType=view?view.type:fieldInfo.viewType;_.each(records,function(record){var x2mList=self.localData[record.data[fieldName]];x2mList.data=[];_.each(x2mList.res_ids,function(res_id){var dataPoint=self._makeDataPoint({modelName:field.relation,data:_.findWhere(values,{id:res_id}),fields:fields,fieldsInfo:fieldsInfo,parentID:x2mList.id,viewType:viewType,});x2mList.data.push(dataPoint.id);x2mList._cache[res_id]=dataPoint.id;});});},_visitChildren:function(element,fn){var self=this;fn(element);if(element.type==='record'){for(var fieldName in element.data){var field=element.fields[fieldName];if(!field){continue;}
if(_.contains(['one2many','many2one','many2many'],field.type)){var hasChange=element._changes&&fieldName in element._changes;var value=hasChange?element._changes[fieldName]:element.data[fieldName];var relationalElement=this.localData[value];if(relationalElement){self._visitChildren(relationalElement,fn);}}}}
if(element.type==='list'){element=this._applyX2ManyOperations(element);_.each(element.data,function(elemId){var elem=self.localData[elemId];self._visitChildren(elem,fn);});}},});return BasicModel;});;

/* /web/static/src/js/views/basic/basic_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.BasicView',function(require){"use strict";var AbstractView=require('web.AbstractView');var BasicController=require('web.BasicController');var BasicModel=require('web.BasicModel');var config=require('web.config');var fieldRegistry=require('web.field_registry');var pyUtils=require('web.py_utils');var utils=require('web.utils');var BasicView=AbstractView.extend({config:_.extend({},AbstractView.prototype.config,{Model:BasicModel,Controller:BasicController,}),viewType:undefined,init:function(viewInfo,params){this._super.apply(this,arguments);this.fieldsInfo={};this.fieldsInfo[this.viewType]=this.fieldsView.fieldsInfo[this.viewType];this.rendererParams.viewType=this.viewType;this.controllerParams.confirmOnDelete=true;this.controllerParams.archiveEnabled='active'in this.fields;this.controllerParams.hasButtons='action_buttons'in params?params.action_buttons:true;this.controllerParams.viewId=viewInfo.view_id;this.loadParams.fieldsInfo=this.fieldsInfo;this.loadParams.fields=this.fields;this.loadParams.limit=parseInt(this.arch.attrs.limit,10)||params.limit;this.loadParams.parentID=params.parentID;this.loadParams.viewType=this.viewType;this.recordID=params.recordID;this.model=params.model;},_getFieldWidgetClass:function(viewType,field,attrs){var FieldWidget;if(attrs.widget){FieldWidget=fieldRegistry.getAny([viewType+"."+attrs.widget,attrs.widget]);if(!FieldWidget){console.warn("Missing widget: ",attrs.widget," for field",attrs.name,"of type",field.type);}}else if(viewType==='kanban'&&field.type==='many2many'){FieldWidget=fieldRegistry.get('kanban.many2many_tags');}
return FieldWidget||fieldRegistry.getAny([viewType+"."+field.type,field.type,"abstract"]);},_loadData:function(model){if(this.recordID){model.addFieldsInfo(this.recordID,{fields:this.fields,fieldsInfo:this.fieldsInfo,});var record=model.get(this.recordID);var viewType=this.viewType;var viewFields=Object.keys(record.fieldsInfo[viewType]);var fieldNames=_.difference(viewFields,Object.keys(record.data));var fieldsInfo=record.fieldsInfo[viewType];_.each(viewFields,function(name){if(!_.contains(fieldNames,name)){var fieldType=record.fields[name].type;var fieldInfo=fieldsInfo[name];if(fieldInfo.Widget){var requiresSpecialData=fieldInfo.Widget.prototype.specialData;if(requiresSpecialData&&!(name in record.specialData)){fieldNames.push(name);return;}}
if((fieldType==='one2many'||fieldType==='many2many')){if(!('fieldsInfo'in record.data[name])){fieldNames.push(name);}else{var fieldViews=fieldInfo.views||fieldInfo.fieldsInfo||{};var fieldViewTypes=Object.keys(fieldViews);var recordViewTypes=Object.keys(record.data[name].fieldsInfo);if(_.difference(fieldViewTypes,recordViewTypes).length){fieldNames.push(name);}
if(record.data[name].viewType==='default'){var defaultFieldInfo=record.data[name].fieldsInfo.default;_.each(fieldViews,function(fieldView){_.each(fieldView.fieldsInfo,function(x2mFieldInfo){_.defaults(x2mFieldInfo,defaultFieldInfo);});});}}}
if(fieldType==='many2one'){if(JSON.stringify(record.data[name].context)!==JSON.stringify(fieldInfo.context)){fieldNames.push(name);}}}});var def;if(fieldNames.length){def=model.applyRawChanges(record.id,viewType).then(function(){if(model.isNew(record.id)){return model.applyDefaultValues(record.id,{},{fieldNames:fieldNames,viewType:viewType,});}else{return model.reload(record.id,{fieldNames:fieldNames,keepChanges:true,viewType:viewType,});}});}
return Promise.resolve(def).then(function(){return model.get(record.id);});}
return this._super.apply(this,arguments);},_processArch:function(arch,fv){var self=this;utils.traverse(arch,function(node){return self._processNode(node,fv);});},_processField:function(viewType,field,attrs){var self=this;attrs.Widget=this._getFieldWidgetClass(viewType,field,attrs);_.each(attrs,function(value,key){var splitKey=key.split('-');if(splitKey[0]==='decoration'){attrs.decorations=attrs.decorations||[];attrs.decorations.push({className:'text-'+splitKey[1],expression:pyUtils._getPyJSAST(value),});}});if(!_.isObject(attrs.options)){attrs.options=attrs.options?pyUtils.py_eval(attrs.options):{};}
if(attrs.on_change&&attrs.on_change!=="0"&&!field.onChange){field.onChange="1";}
if(attrs.modifiers.invisible===true||attrs.modifiers.column_invisible===true){attrs.__no_fetch=true;}
if(!_.isEmpty(field.views)){attrs.views={};_.each(field.views,function(innerFieldsView,viewType){viewType=viewType==='tree'?'list':viewType;attrs.views[viewType]=self._processFieldsView(innerFieldsView,viewType);});}
attrs.views=attrs.views||{};attrs.mode=attrs.mode==='tree'?'list':attrs.mode;if(!attrs.views.list&&attrs.views.tree){attrs.views.list=attrs.views.tree;}
if(field.type==='one2many'||field.type==='many2many'){if(attrs.Widget.prototype.useSubview){var mode=attrs.mode;if(!mode){if(attrs.views.list&&!attrs.views.kanban){mode='list';}else if(!attrs.views.list&&attrs.views.kanban){mode='kanban';}else{mode='list,kanban';}}
if(mode.indexOf(',')!==-1){mode=config.device.isMobile?'kanban':'list';}
attrs.mode=mode;if(mode in attrs.views){var view=attrs.views[mode];this._processSubViewAttrs(view,attrs);}}
if(attrs.Widget.prototype.fieldsToFetch){attrs.viewType='default';attrs.relatedFields=_.extend({},attrs.Widget.prototype.fieldsToFetch);attrs.fieldsInfo={default:_.mapObject(attrs.Widget.prototype.fieldsToFetch,function(){return{};}),};if(attrs.options.color_field){attrs.relatedFields[attrs.options.color_field]={type:'integer'};attrs.fieldsInfo.default[attrs.options.color_field]={};}}}
if(attrs.Widget.prototype.fieldDependencies){attrs.fieldDependencies=attrs.Widget.prototype.fieldDependencies;}
return attrs;},_processFieldsView:function(fieldsView,viewType){var fv=this._super.apply(this,arguments);viewType=viewType||this.viewType;fv.type=viewType;fv.fieldsInfo=Object.create(null);fv.fieldsInfo[viewType]=Object.create(null);this._processArch(fv.arch,fv);return fv;},_processNode:function(node,fv){if(typeof node==='string'){return false;}
if(!_.isObject(node.attrs.modifiers)){node.attrs.modifiers=node.attrs.modifiers?JSON.parse(node.attrs.modifiers):{};}
if(!_.isObject(node.attrs.options)&&node.tag==='button'){node.attrs.options=node.attrs.options?JSON.parse(node.attrs.options):{};}
if(node.tag==='field'){var viewType=fv.type;var fieldsInfo=fv.fieldsInfo[viewType];var fields=fv.viewFields;fieldsInfo[node.attrs.name]=this._processField(viewType,fields[node.attrs.name],node.attrs?_.clone(node.attrs):{});if(fieldsInfo[node.attrs.name].fieldDependencies){var deps=fieldsInfo[node.attrs.name].fieldDependencies;for(var dependency_name in deps){var dependency_dict={name:dependency_name,type:deps[dependency_name].type};if(!(dependency_name in fieldsInfo)){fieldsInfo[dependency_name]=_.extend({},dependency_dict,{options:deps[dependency_name].options||{},});}
if(!(dependency_name in fields)){fields[dependency_name]=dependency_dict;}
if(fv.fields&&!(dependency_name in fv.fields)){fv.fields[dependency_name]=dependency_dict;}}}
return false;}
return node.tag!=='arch';},_processSubViewAttrs:function(view,attrs){var defaultOrder=view.arch.attrs.default_order;if(defaultOrder){attrs.orderedBy=_.map(defaultOrder.split(','),function(order){order=order.trim().split(' ');return{name:order[0],asc:order[1]!=='desc'};});}else{var handleField=_.find(view.arch.children,function(child){return child.attrs&&child.attrs.widget==='handle';});if(handleField){attrs.orderedBy=[{name:handleField.attrs.name,asc:true}];}}
attrs.columnInvisibleFields={};_.each(view.arch.children,function(child){if(child.attrs&&child.attrs.modifiers){attrs.columnInvisibleFields[child.attrs.name]=child.attrs.modifiers.column_invisible||false;}});},});return BasicView;});;

/* /web/static/src/js/views/basic/basic_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.BasicController',function(require){"use strict";var AbstractController=require('web.AbstractController');var core=require('web.core');var Dialog=require('web.Dialog');var FieldManagerMixin=require('web.FieldManagerMixin');var Pager=require('web.Pager');var TranslationDialog=require('web.TranslationDialog');var _t=core._t;var BasicController=AbstractController.extend(FieldManagerMixin,{custom_events:_.extend({},AbstractController.prototype.custom_events,FieldManagerMixin.custom_events,{discard_changes:'_onDiscardChanges',reload:'_onReload',resequence_records:'_onResequenceRecords',set_dirty:'_onSetDirty',load_optional_fields:'_onLoadOptionalFields',save_optional_fields:'_onSaveOptionalFields',sidebar_data_asked:'_onSidebarDataAsked',translate:'_onTranslate',}),init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.archiveEnabled=params.archiveEnabled;this.confirmOnDelete=params.confirmOnDelete;this.hasButtons=params.hasButtons;FieldManagerMixin.init.call(this,this.model);this.mode=params.mode||'readonly';this.handle=this.initialState.id;this.savingDef=Promise.resolve();this.viewId=params.viewId;},start:function(){this.$el.toggleClass('o_cannot_create',!this.activeActions.create);return this._super.apply(this,arguments).then(this._updateEnv.bind(this));},canBeDiscarded:function(recordID){var self=this;if(!this.isDirty(recordID)){return Promise.resolve(false);}
var message=_t("The record has been modified, your changes will be discarded. Do you want to proceed?");var def;def=new Promise(function(resolve,reject){var dialog=Dialog.confirm(self,message,{title:_t("Warning"),confirm_callback:resolve.bind(self,true),cancel_callback:reject,});dialog.on('closed',def,reject);});return def;},canBeSaved:function(recordID){var fieldNames=this.renderer.canBeSaved(recordID||this.handle);if(fieldNames.length){this._notifyInvalidFields(fieldNames);return false;}
return true;},discardChanges:function(recordID,options){return Promise.all([this.mutex.getUnlockedDef(),this.savingDef]).then(this._discardChanges.bind(this,recordID||this.handle,options));},getSelectedIds:function(){return[];},giveFocus:function(){this.renderer.giveFocus();},isDirty:function(recordID){return this.model.isDirty(recordID||this.handle);},renderPager:function($node,options){var self=this;var params=this._getPagerParams();this.pager=new Pager(this,params.size,params.current_min,params.limit,options);this.pager.on('pager_changed',this,function(newState){this.pager.disable();var data=this.model.get(this.handle,{raw:true});var limitChanged=(data.limit!==newState.limit);var reloadParams;if(data.groupedBy&&data.groupedBy.length){reloadParams={groupsLimit:newState.limit,groupsOffset:newState.current_min-1};}else{reloadParams={limit:newState.limit,offset:newState.current_min-1};}
this.reload(reloadParams).then(function(){if(!limitChanged){self.trigger_up('scrollTo',{top:0});}}).then(this.pager.enable.bind(this.pager));});return this.pager.appendTo($node).then(function(){self._updatePager();});},saveRecord:function(recordID,options){var self=this;var unlockedMutex=this.mutex.getUnlockedDef().then(function(){return self.renderer.commitChanges(recordID||self.handle);}).then(function(){return self.mutex.exec(self._saveRecord.bind(self,recordID,options));});this.savingDef=new Promise(function(resolve){unlockedMutex.then(resolve).guardedCatch(resolve);});return unlockedMutex;},update:function(params,options){var self=this;this.mode=params.mode||this.mode;return this._super(params,options).then(function(){self._updateEnv();self._updatePager();});},reload:function(params){if(params&&params.controllerState){if(params.controllerState.currentId){params.currentId=params.controllerState.currentId;}
params.ids=params.controllerState.resIds;}
return this._super.apply(this,arguments);},_abandonRecord:function(recordID){recordID=recordID||this.handle;if(recordID===this.handle){this.trigger_up('history_back');}else{this.model.removeLine(recordID);}},_applyChanges:function(dataPointID,changes,event){var _super=FieldManagerMixin._applyChanges.bind(this);return this.mutex.exec(function(){return _super(dataPointID,changes,event);});},_callButtonAction:function(attrs,record){var self=this;var def=new Promise(function(resolve,reject){var reload=function(){return self.isDestroyed()?Promise.resolve():self.reload();};record=record||self.model.get(self.handle);self.trigger_up('execute_action',{action_data:_.extend({},attrs,{context:record.getContext({additionalContext:attrs.context||{}}),}),env:{context:record.getContext(),currentID:record.data.id,model:record.model,resIDs:record.res_ids,},on_success:resolve,on_fail:function(){self.update({},{reload:false}).then(reject).guardedCatch(reject);},on_closed:reload,});});return this.alive(def);},_confirmChange:function(id,fields,e){if(e.name==='discard_changes'&&e.target.reset){return e.target.reset(this.model.get(e.target.dataPointID),e,true);}
var state=this.model.get(this.handle);return this.renderer.confirmChange(state,id,fields,e);},_confirmSaveNewRecord:function(){var self=this;var def=new Promise(function(resolve,reject){var message=_t("You need to save this new record before editing the translation. Do you want to proceed?");var dialog=Dialog.confirm(self,message,{title:_t("Warning"),confirm_callback:resolve.bind(self,true),cancel_callback:reject,});dialog.on('closed',self,reject);});return def;},_deleteRecords:function(ids){var self=this;function doIt(){return self.model.deleteRecords(ids,self.modelName).then(self._onDeletedRecords.bind(self,ids));}
if(this.confirmOnDelete){Dialog.confirm(this,_t("Are you sure you want to delete this record ?"),{confirm_callback:doIt,});}else{doIt();}},_disableButtons:function(){if(this.$buttons){this.$buttons.find('button').attr('disabled',true);}},_discardChanges:function(recordID,options){var self=this;recordID=recordID||this.handle;options=options||{};return this.canBeDiscarded(recordID).then(function(needDiscard){if(options.readonlyIfRealDiscard&&!needDiscard){return;}
self.model.discardChanges(recordID);if(options.noAbandon){return;}
if(self.model.canBeAbandoned(recordID)){self._abandonRecord(recordID);return;}
return self._confirmSave(recordID);});},_enableButtons:function(){if(this.$buttons){this.$buttons.find('button').removeAttr('disabled');}},exportState:function(){var state=this._super.apply(this,arguments);var env=this.model.get(this.handle,{env:true});return _.extend(state,{currentId:env.currentId,resIds:env.ids,});},_getOptionalFieldsLocalStorageKey:function(keyParts){keyParts.model=this.modelName;keyParts.viewType=this.viewType;keyParts.viewId=this.viewId;var parts=['model','viewType','viewId','relationalField','subViewType','subViewId',];var viewIdentifier=parts.reduce(function(identifier,partName){if(partName in keyParts){return identifier+','+keyParts[partName];}
return identifier;},'optional_fields');viewIdentifier=keyParts.fields.sort(this._nameSortComparer).reduce(function(identifier,field){return identifier+','+field.name;},viewIdentifier);return viewIdentifier;},_getPagerParams:function(){var state=this.model.get(this.handle,{raw:true});var isGrouped=state.groupedBy&&state.groupedBy.length;return{current_min:(isGrouped?state.groupsOffset:state.offset)+1,limit:isGrouped?state.groupsLimit:state.limit,size:isGrouped?state.groupsCount:state.count,};},_getSidebarEnv:function(){return{context:this.model.get(this.handle).getContext(),activeIds:this.getSelectedIds(),model:this.modelName,};},_isPagerVisible:function(){return true;},_nameSortComparer:function(left,right){return left.name<right.name?-1:1;},_notifyInvalidFields:function(invalidFields){var record=this.model.get(this.handle,{raw:true});var fields=record.fields;var warnings=invalidFields.map(function(fieldName){var fieldStr=fields[fieldName].string;return _.str.sprintf('<li>%s</li>',_.escape(fieldStr));});warnings.unshift('<ul>');warnings.push('</ul>');this.do_warn(_t("The following fields are invalid:"),warnings.join(''));},_onDeletedRecords:function(ids){this.update({});},_saveRecord:function(recordID,options){recordID=recordID||this.handle;options=_.defaults(options||{},{stayInEdit:false,reload:true,savePoint:false,});if(this.canBeSaved(recordID)){var self=this;var saveDef=this.model.save(recordID,{reload:options.reload,savePoint:options.savePoint,viewType:options.viewType,});if(!options.stayInEdit){saveDef=saveDef.then(function(fieldNames){var def=fieldNames.length?self._confirmSave(recordID):self._setMode('readonly',recordID);return def.then(function(){return fieldNames;});});}
return saveDef;}else{return Promise.reject("SaveRecord: this.canBeSave is false");}},_setMode:function(mode,recordID){if((recordID||this.handle)===this.handle){return this.update({mode:mode},{reload:false}).then(function(){core.bus.trigger('DOM_updated');});}
return Promise.resolve();},_updateEnv:function(){var env=this.model.get(this.handle,{env:true});if(this.sidebar){var sidebarEnv=this._getSidebarEnv();this.sidebar.updateEnv(sidebarEnv);}},_updatePager:function(){if(this.pager){this.pager.updateState(this._getPagerParams());this.pager.do_toggle(this._isPagerVisible());}},_onDiscardChanges:function(ev){var self=this;ev.stopPropagation();var recordID=ev.data.recordID;this._discardChanges(recordID).then(function(){self._confirmChange(recordID,[ev.data.fieldName],ev).then(ev.data.onSuccess).guardedCatch(ev.data.onSuccess);}).guardedCatch(ev.data.onFailure);},_onFieldChanged:function(ev){if(this.mode==='readonly'){ev.data.force_save=true;}
FieldManagerMixin._onFieldChanged.apply(this,arguments);},_onReload:function(ev){ev.stopPropagation();var data=ev&&ev.data||{};var handle=data.db_id;var prom;if(handle){prom=this.model.reload(handle).then(this._confirmSave.bind(this,handle));}else{prom=this.reload({fieldNames:data.fieldNames,keepChanges:data.keepChanges||false,});}
prom.then(ev.data.onSuccess).guardedCatch(ev.data.onFailure);},_onResequenceRecords:function(ev){var self=this;this.trigger_up('mutexify',{action:function(){var state=self.model.get(self.handle);var resIDs=_.map(ev.data.recordIds,function(recordID){return _.findWhere(state.data,{id:recordID}).res_id;});var options={offset:ev.data.offset,field:ev.data.handleField,};return self.model.resequence(self.modelName,resIDs,self.handle,options).then(function(){self._updateEnv();state=self.model.get(self.handle);return self.renderer.updateState(state,{noRender:true});});},});},_onLoadOptionalFields:function(ev){var res=this.call('local_storage','getItem',this._getOptionalFieldsLocalStorageKey(ev.data.keyParts));ev.data.callback(res);},_onSaveOptionalFields:function(ev){this.call('local_storage','setItem',this._getOptionalFieldsLocalStorageKey(ev.data.keyParts),ev.data.optionalColumnsEnabled);},_onSetDirty:function(ev){ev.stopPropagation();this.model.setDirty(ev.data.dataPointID);},_onSidebarDataAsked:function(ev){var sidebarEnv=this._getSidebarEnv();ev.data.callback(sidebarEnv);},_onTranslate:async function(ev){ev.stopPropagation();if(this.model.isNew(ev.data.id)){await this._confirmSaveNewRecord();var updatedFields=await this.saveRecord(ev.data.id,{stayInEdit:true});await this._confirmChange(ev.data.id,updatedFields,ev);}
var record=this.model.get(ev.data.id,{raw:true});var result=await this._rpc({route:'/web/dataset/call_button',params:{model:'ir.translation',method:'translate_fields',args:[record.model,record.res_id,ev.data.fieldName],kwargs:{context:record.getContext()},}});this.translationDialog=new TranslationDialog(this,{domain:result.domain,searchName:result.context.search_default_name,fieldName:record.fieldsInfo[record.viewType][ev.data.fieldName].name,userLanguageValue:ev.target.value||'',dataPointID:record.id,isComingFromTranslationAlert:ev.data.isComingFromTranslationAlert,isText:result.context.translation_type==='text',showSrc:result.context.translation_show_src,});return this.translationDialog.open();},});return BasicController;});;

/* /web/static/src/js/views/basic/basic_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.BasicRenderer',function(require){"use strict";var AbstractRenderer=require('web.AbstractRenderer');var config=require('web.config');var core=require('web.core');var dom=require('web.dom');var widgetRegistry=require('web.widget_registry');var qweb=core.qweb;var BasicRenderer=AbstractRenderer.extend({custom_events:{navigation_move:'_onNavigationMove',},init:function(parent,state,params){this._super.apply(this,arguments);this.activeActions=params.activeActions;this.viewType=params.viewType;this.mode=params.mode||'readonly';this.widgets=[];this.handleField=null;},canBeSaved:function(recordID){var self=this;var invalidFields=[];_.each(this.allFieldWidgets[recordID],function(widget){var canBeSaved=self._canWidgetBeSaved(widget);if(!canBeSaved){invalidFields.push(widget.name);}
widget.$el.toggleClass('o_field_invalid',!canBeSaved);widget.$el.attr('aria-invalid',!canBeSaved);});return invalidFields;},commitChanges:function(recordID){var defs=_.map(this.allFieldWidgets[recordID],function(widget){return widget.commitChanges();});return Promise.all(defs);},confirmChange:function(state,id,fields,ev){this.state=state;var record=this._getRecord(id);if(!record){return this._render().then(_.constant([]));}
_.invoke(this.widgets,'updateState',state);var defs=[];var resetWidgets=[];_.each(this.allFieldWidgets[id],function(widget){var fieldChanged=_.contains(fields,widget.name);if(fieldChanged||widget.resetOnAnyFieldChange){defs.push(widget.reset(record,ev,fieldChanged));resetWidgets.push(widget);}});defs.push(this._updateAllModifiers(record));return Promise.all(defs).then(function(){return resetWidgets;});},focusField:function(id,fieldName,offset){this.editRecord(id);if(typeof offset==="number"){var field=_.findWhere(this.allFieldWidgets[id],{name:fieldName});dom.setSelectionRange(field.getFocusableElement().get(0),{start:offset,end:offset});}},_activateFieldWidget:function(record,currentIndex,options){options=options||{};_.defaults(options,{inc:1,wrap:false});currentIndex=Math.max(0,currentIndex);var recordWidgets=this.allFieldWidgets[record.id]||[];for(var i=0;i<recordWidgets.length;i++){var activated=recordWidgets[currentIndex].activate({event:options.event,noAutomaticCreate:options.noAutomaticCreate||false});if(activated){return currentIndex;}
currentIndex+=options.inc;if(currentIndex>=recordWidgets.length){if(options.wrap){currentIndex-=recordWidgets.length;}else{return-1;}}else if(currentIndex<0){if(options.wrap){currentIndex+=recordWidgets.length;}else{return-1;}}}
return-1;},_activateNextFieldWidget:function(record,currentIndex,options){currentIndex=(currentIndex+1)%(this.allFieldWidgets[record.id]||[]).length;return this._activateFieldWidget(record,currentIndex,_.extend({inc:1},options));},_activatePreviousFieldWidget:function(record,currentIndex){currentIndex=currentIndex?(currentIndex-1):((this.allFieldWidgets[record.id]||[]).length-1);return this._activateFieldWidget(record,currentIndex,{inc:-1});},_addFieldTooltip:function(widget,$node){$node=$node.length?$node:widget.$el;$node.tooltip({title:function(){return qweb.render('WidgetLabel.tooltip',{debug:config.isDebug(),widget:widget,});}});},_applyModifiers:function(modifiersData,record,element){var self=this;var modifiers=modifiersData.evaluatedModifiers[record.id]||{};if(element){_apply(element);}else{_.each(_.clone(modifiersData.elementsByRecord[record.id]),_apply);}
function _apply(element){if('readonly'in modifiers&&element.widget){var mode=modifiers.readonly?'readonly':modifiersData.baseModeByRecord[record.id];if(mode!==element.widget.mode){self._rerenderFieldWidget(element.widget,record,{keepBaseMode:true,mode:mode,});return;}}
element.$el.toggleClass("o_invisible_modifier",!!modifiers.invisible);element.$el.toggleClass("o_readonly_modifier",!!modifiers.readonly);element.$el.toggleClass("o_required_modifier",!!modifiers.required);if(element.widget&&element.widget.updateModifiersValue){element.widget.updateModifiersValue(modifiers);}
if(element.callback){element.callback(element,modifiers,record);}}},_canWidgetBeSaved:function(widget){var modifiers=this._getEvaluatedModifiers(widget.__node,widget.record);return widget.isValid()&&(widget.isSet()||!modifiers.required);},_destroyFieldWidget:function(recordID,widget){var recordWidgets=this.allFieldWidgets[recordID];var index=recordWidgets.indexOf(widget);if(index>=0){recordWidgets.splice(index,1);}
this._unregisterModifiersElement(widget.__node,recordID,widget);widget.destroy();return index;},_getEvaluatedModifiers:function(node,record){var element=this._getModifiersData(node);if(!element){return{};}
return element.evaluatedModifiers[record.id]||{};},_getModifiersData:function(node){return _.findWhere(this.allModifiersData,{node:node});},_getRecord:function(recordId){return null;},_handleAttributes:function($el,node){if($el.is('button')){return;}
if(node.attrs.class){$el.addClass(node.attrs.class);}
if(node.attrs.style){$el.attr('style',node.attrs.style);}
if(node.attrs.placeholder){$el.attr('placeholder',node.attrs.placeholder);}},_hasContent:function(){return this.state.count!==0;},_moveRecord:function(recordId,toIndex){var self=this;var records=this.state.data;var record=_.findWhere(records,{id:recordId});var fromIndex=records.indexOf(record);var lowerIndex=Math.min(fromIndex,toIndex);var upperIndex=Math.max(fromIndex,toIndex)+1;var order=_.findWhere(this.state.orderedBy,{name:this.handleField});var asc=!order||order.asc;var reorderAll=false;var sequence=(asc?-1:1)*Infinity;_.each(records,function(record,index){if((index<lowerIndex||index>=upperIndex)&&((asc&&sequence>=record.data[self.handleField])||(!asc&&sequence<=record.data[self.handleField]))){reorderAll=true;}
sequence=record.data[self.handleField];});if(reorderAll){records=_.without(records,record);records.splice(toIndex,0,record);}else{records=records.slice(lowerIndex,upperIndex);records=_.without(records,record);if(fromIndex>toIndex){records.unshift(record);}else{records.push(record);}}
var sequences=_.pluck(_.pluck(records,'data'),this.handleField);var recordIds=_.pluck(records,'id');if(!asc){recordIds.reverse();}
this.trigger_up('resequence_records',{handleField:this.handleField,offset:_.min(sequences),recordIds:recordIds,});},_postProcessField:function(widget,node){this._handleAttributes(widget.$el,node);},_registerModifiers:function(node,record,element,options){options=options||{};var modifiersData=this._getModifiersData(node);if(!modifiersData){var modifiers=node.attrs.modifiers||{};modifiersData={node:node,modifiers:modifiers,evaluatedModifiers:{},elementsByRecord:{},baseModeByRecord:{},};if(!_.isEmpty(modifiers)){this.allModifiersData.push(modifiersData);}}
if(!modifiersData.baseModeByRecord[record.id]||!options.keepBaseMode){modifiersData.baseModeByRecord[record.id]=options.mode||this.mode;}
if(!modifiersData.evaluatedModifiers[record.id]){modifiersData.evaluatedModifiers[record.id]=record.evalModifiers(modifiersData.modifiers);}
if(element){var newElement={};if(element instanceof jQuery){newElement.$el=element;}else{newElement.widget=element;newElement.$el=element.$el;}
if(options&&options.callback){newElement.callback=options.callback;}
if(!modifiersData.elementsByRecord[record.id]){modifiersData.elementsByRecord[record.id]=[];}
modifiersData.elementsByRecord[record.id].push(newElement);this._applyModifiers(modifiersData,record,newElement,options);}
return modifiersData.evaluatedModifiers[record.id];},_render:function(){var oldAllFieldWidgets=this.allFieldWidgets;this.allFieldWidgets={};this.allModifiersData=[];var oldWidgets=this.widgets;this.widgets=[];return this._renderView().then(function(){_.each(oldAllFieldWidgets,function(recordWidgets){_.each(recordWidgets,function(widget){widget.destroy();});});_.invoke(oldWidgets,'destroy');});},_renderFieldWidget:function(node,record,options){options=options||{};var fieldName=node.attrs.name;var mode=options.mode||this.mode;var modifiers=this._registerModifiers(node,record,null,options);var Widget=record.fieldsInfo[this.viewType][fieldName].Widget;var widget=new Widget(this,fieldName,record,{mode:modifiers.readonly?'readonly':mode,viewType:this.viewType,});if(this.allFieldWidgets[record.id]===undefined){this.allFieldWidgets[record.id]=[];}
this.allFieldWidgets[record.id].push(widget);widget.__node=node;var def=widget._widgetRenderAndInsert(function(){});var $el=$('<div>');this.defs.push(def);var self=this;def.then(function(){widget.$el.addClass($el.attr('class'));$el.replaceWith(widget.$el);self._registerModifiers(node,record,widget,{callback:function(element,modifiers,record){element.$el.toggleClass('o_field_empty',!!(record.data.id&&(modifiers.readonly||mode==='readonly')&&!element.widget.isSet()));},keepBaseMode:!!options.keepBaseMode,mode:mode,});self._postProcessField(widget,node);});return $el;},_renderNoContentHelper:function(){var $noContent=$('<div>').html(this.noContentHelp).addClass('o_nocontent_help');return $('<div>').addClass('o_view_nocontent').append($noContent);},_renderView:function(){return Promise.resolve();},_renderWidget:function(record,node){var Widget=widgetRegistry.get(node.attrs.name);var widget=new Widget(this,record,node);this.widgets.push(widget);var def=widget._widgetRenderAndInsert(function(){});this.defs.push(def);var $el=$('<div>');var self=this;def.then(function(){self._handleAttributes(widget.$el,node);self._registerModifiers(node,record,widget);widget.$el.addClass('o_widget');$el.replaceWith(widget.$el);});return $el;},_rerenderFieldWidget:function(widget,record,options){var $el=this._renderFieldWidget(widget.__node,record,options);widget.$el.replaceWith($el);var oldIndex=this._destroyFieldWidget(record.id,widget);var recordWidgets=this.allFieldWidgets[record.id];var newWidget=recordWidgets.pop();recordWidgets.splice(oldIndex,0,newWidget);},_unregisterModifiersElement:function(node,recordID,element){var modifiersData=this._getModifiersData(node);if(modifiersData){var elements=modifiersData.elementsByRecord[recordID];var index=_.findIndex(elements,function(oldElement){return oldElement.widget===element||oldElement.$el[0]===element[0];});if(index>=0){elements.splice(index,1);}}},_updateAllModifiers:function(record){var self=this;var defs=[];this.defs=defs;_.each(this.allModifiersData,function(modifiersData){if(record.id in modifiersData.evaluatedModifiers){modifiersData.evaluatedModifiers[record.id]=record.evalModifiers(modifiersData.modifiers);self._applyModifiers(modifiersData,record);}});delete this.defs;return Promise.all(defs);},_onNavigationMove:function(ev){},});return BasicRenderer;});;

/* /web/static/src/js/views/control_panel/control_panel_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.ControlPanelController',function(require){"use strict";var mvc=require('web.mvc');var ControlPanelController=mvc.Controller.extend({className:'o_cp_controller',custom_events:{facet_removed:'_onFacetRemoved',get_search_query:'_onGetSearchQuery',item_option_clicked:'_onItemOptionClicked',item_trashed:'_onItemTrashed',menu_item_clicked:'_onMenuItemClicked',new_favorite:'_onNewFavorite',new_filters:'_onNewFilters',new_groupBy:'_onNewGroupBy',activate_time_range:'_onActivateTimeRange',autocompletion_filter:'_onAutoCompletionFilter',reload:'_onReload',reset:'_onReset',},init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.modelName=params.modelName;},on_attach_callback:function(){this.renderer.on_attach_callback();},on_detach_callback:function(){this.renderer.on_detach_callback();},exportState:function(){return this.model.exportState();},focusSearchBar:function(){if(this.renderer.searchBar){this.renderer.searchBar.focus();}},getSearchQuery:function(){return this.model.getQuery();},importState:function(state){var defs=[];this.model.importState(state);defs.push(this.getSearchQuery());defs.push(this.renderer.updateState(this.model.get()));return Promise.all(defs).then(function(defsResults){return defsResults[0];});},setControllerID:function(controllerID){this.controllerID=controllerID;},updateContents:function(status,options){this.renderer.updateContents(status,options);},updateFilters:function(newFilters,filtersToRemove){var newFilterIDS=this.model.createNewFilters(newFilters);this.model.deactivateFilters(filtersToRemove);this._reportNewQueryAndRender();return newFilterIDS;},_getSubMenus:function(){return this.renderer.$subMenus;},_reportNewQueryAndRender:function(){this.trigger_up('search',this.model.getQuery());var state=this.model.get();return this.renderer.updateState(state);},_onActivateTimeRange:function(ev){ev.stopPropagation();this.model.activateTimeRange(ev.data.id,ev.data.timeRangeId,ev.data.comparisonTimeRangeId);this._reportNewQueryAndRender();},_onAutoCompletionFilter:function(ev){ev.stopPropagation();this.model.toggleAutoCompletionFilter(ev.data);this._reportNewQueryAndRender();},_onFacetRemoved:function(ev){ev.stopPropagation();var group=ev.data.group||this.renderer.getLastFacet();if(group){this.model.deactivateGroup(group.id);this._reportNewQueryAndRender();}},_onGetSearchQuery:function(ev){ev.stopPropagation();var query=this.getSearchQuery();ev.data.callback(query);},_onItemOptionClicked:function(ev){ev.stopPropagation();this.model.toggleFilterWithOptions(ev.data.id,ev.data.optionId);this._reportNewQueryAndRender();},_onItemTrashed:function(ev){ev.stopPropagation();var def=this.model.deleteFilterEverywhere(ev.data.id);def.then(this._reportNewQueryAndRender.bind(this));},_onMenuItemClicked:function(ev){ev.stopPropagation();this.model.toggleFilter(ev.data.id);this._reportNewQueryAndRender();},_onNewFavorite:function(ev){ev.stopPropagation();var def=this.model.createNewFavorite(ev.data);def.then(this._reportNewQueryAndRender.bind(this));},_onNewFilters:function(ev){ev.stopPropagation();this.model.createNewFilters(ev.data.filters);this._reportNewQueryAndRender();},_onNewGroupBy:function(ev){ev.stopPropagation();this.model.createNewGroupBy(ev.data);this._reportNewQueryAndRender();},_onReload:function(ev){ev.stopPropagation();this.trigger_up('search',this.model.getQuery());},_onReset:function(ev){ev.stopPropagation();var state=this.model.get();this.renderer.updateState(state);},});return ControlPanelController;});;

/* /web/static/src/js/views/control_panel/control_panel_model.js defined in bundle 'web.assets_backend' */
odoo.define('web.ControlPanelModel',function(require){"use strict";var controlPanelViewParameters=require('web.controlPanelViewParameters');var core=require('web.core');var Domain=require('web.Domain');var mvc=require('web.mvc');var pyUtils=require('web.py_utils');var searchBarAutocompleteRegistry=require('web.search_bar_autocomplete_sources_registry');var session=require('web.session');var _t=core._t;const DEFAULT_TIMERANGE=controlPanelViewParameters.DEFAULT_TIMERANGE;let TIME_RANGE_OPTIONS=controlPanelViewParameters.TIME_RANGE_OPTIONS;let COMPARISON_TIME_RANGE_OPTIONS=controlPanelViewParameters.COMPARISON_TIME_RANGE_OPTIONS;const OPTION_GENERATORS=controlPanelViewParameters.OPTION_GENERATORS;const YEAR_OPTIONS=controlPanelViewParameters.YEAR_OPTIONS;function isEqualTo(array1){if(array1.length===1){return array2=>array2.length===1&&array2[0]===array1[0];}else{return array2=>array2.length===2&&array2[0]===array1[0]&&array2[1]===array1[1];}}
var ControlPanelModel=mvc.Model.extend({init:function(parent,params){this._super.apply(this,arguments);TIME_RANGE_OPTIONS=TIME_RANGE_OPTIONS.map(function(option){return _.extend({},option,{description:option.description.toString()});});COMPARISON_TIME_RANGE_OPTIONS=COMPARISON_TIME_RANGE_OPTIONS.map(function(option){return _.extend({},option,{description:option.description.toString()});});this.modelName=params.modelName;this.fields=params.fields||{};this.actionId=params.actionId;this.actionContext=params.context||{};this.actionDomain=params.domain||[];this.filters={};this.groups={};this.query=[];},activateTimeRange:function(filterId,timeRangeId,comparisonTimeRangeId){var filter=this.filters[filterId];filter.timeRangeId=timeRangeId||filter.defaultTimeRangeId;filter.comparisonTimeRangeId=comparisonTimeRangeId;var group=this.groups[filter.groupId];var groupActive=group.activeFilterIds.length;if(groupActive){group.activeFilterIds=[[filterId]];}else{this.toggleFilter(filterId);}},createNewFavorite:function(newFavorite){return this._saveQuery(_.pick(newFavorite,['description','isDefault','isShared','type'])).then(function(){newFavorite.on_success();});},createNewFilters:function(newFilters){var self=this;var filterIds=[];var groupNumber=this._generateNewGroupNumber();this._createGroupOfFilters(newFilters);newFilters.forEach(function(filter){filter.groupNumber=groupNumber;self.toggleFilter(filter.id);filterIds.push(filter.id);});return filterIds;},createNewGroupBy:function(newGroupBy){var id=_.uniqueId('__filter__');newGroupBy.id=id;newGroupBy.groupId=this._getGroupIdOfType('groupBy');newGroupBy.groupNumber=this._generateNewGroupNumber();this.filters[id]=newGroupBy;if(_.contains(['date','datetime'],newGroupBy.fieldType)){this.toggleFilterWithOptions(newGroupBy.id);}else{this.toggleFilter(newGroupBy.id);}},deactivateFilters:function(filterIds){var self=this;filterIds.forEach(function(filterId){var filter=self.filters[filterId];var group=self.groups[filter.groupId];if(group.activeFilterIds.some(isEqualTo([filterId]))){self.toggleFilter(filterId);}});},deactivateGroup:function(groupId){var self=this;var group=this.groups[groupId];_.each(group.activeFilterIds,id=>{var filter=self.filters[id[0]];if(filter.autoCompleteValues){filter.autoCompleteValues=[];}
if(filter.currentOptionIds){filter.currentOptionIds.clear();}});group.activeFilterIds=[];this.query.splice(this.query.indexOf(groupId),1);},deleteFilterEverywhere:function(filterId){var self=this;var filter=this.filters[filterId];var def=this.deleteFilter(filter.serverSideId).then(function(){const groupOfFavorites=self.groups[filter.groupId];const isActive=groupOfFavorites.activeFilterIds.some(isEqualTo([filterId]));if(isActive){self.toggleFilter(filterId);}
delete self.filters[filterId];});return def;},exportState:function(){return{filters:this.filters,groups:this.groups,query:this.query,};},get:function(){var self=this;var filterFields=[];var filters=[];var groupBys=[];var timeRanges=[];var favorites=[];Object.keys(this.filters).forEach(function(filterId){var filter=_.extend({},self.filters[filterId]);var group=self.groups[filter.groupId];filter.isActive=group.activeFilterIds.some(id=>id[0]===filterId);if(filter.type==='field'){filterFields.push(filter);}
if(filter.type==='filter'&&!filter.invisible){filters.push(filter);}
if(filter.type==='groupBy'){groupBys.push(filter);}
if(filter.type==='favorite'){favorites.push(filter);}
if(filter.type==='timeRange'){timeRanges.push(filter);}});var facets=this._getFacets();favorites=_.sortBy(favorites,'groupNumber');return{facets:facets,filterFields:filterFields,filters:filters,groupBys:groupBys,timeRanges:timeRanges,favorites:favorites,groups:this.groups,query:_.extend([],this.query),fields:this.fields,};},getQuery:function(){var userContext=session.user_context;var context=_.extend(pyUtils.eval('contexts',this._getQueryContext(),userContext),this._getTimeRangeMenuData(true));var domain=Domain.prototype.stringToArray(this._getDomain(),userContext);if(context.timeRangeMenuData){if(typeof context.timeRangeMenuData.timeRange==='string'){context.timeRangeMenuData.timeRange=pyUtils.eval('domain',context.timeRangeMenuData.timeRange);}
if(typeof context.timeRangeMenuData.comparisonTimeRange==='string'){context.timeRangeMenuData.comparisonTimeRange=pyUtils.eval('domain',context.timeRangeMenuData.comparisonTimeRange);}}
var action_context=this.actionContext;var results=pyUtils.eval_domains_and_contexts({domains:[this.actionDomain].concat([domain]||[]),contexts:[action_context].concat(context||[]),eval_context:session.user_context,});if(results.error){throw new Error(_.str.sprintf(_t("Failed to evaluate search criterions")+": \n%s",JSON.stringify(results.error)));}
var groupBys=this._getGroupBy();var groupBy=groupBys.length?groupBys:(this.actionContext.group_by||[]);groupBy=(typeof groupBy==='string')?[groupBy]:groupBy;context=_.omit(results.context,'time_ranges');return{context:context,domain:results.domain,groupBy:groupBy,orderedBy:this._getOrderedBy(),};},importState:function(state){this.filters=state.filters;this.groups=state.groups;this.query=state.query;},load:function(params){var self=this;this.searchMenuTypes=params.searchMenuTypes||[];this.activateDefaultFavorite=params.activateDefaultFavorite;if(!params.withSearchBar&&params.searchMenuTypes.length===0){return Promise.resolve();}
if(params.initialState){this.importState(params.initialState);return Promise.resolve();}else{var groups=params.groups||[];groups.forEach(function(group){self._createGroupOfFilters(group);});if(this._getGroupIdOfType('groupBy')===undefined){this._createEmptyGroup('groupBy');}
this._createGroupOfTimeRanges();return Promise.all(self._loadSearchDefaults()).then(function(){return self._loadFavorites().then(function(){if(self.query.length===0){self._activateDefaultFilters();self._activateDefaultTimeRanges(params.timeRanges);}});});}},toggleAutoCompletionFilter:function(params){var filter=this.filters[params.filterId];if(filter.type==='field'){filter.autoCompleteValues=params.autoCompleteValues;filter.domain=this._getAutoCompletionFilterDomain(filter);var group=this.groups[filter.groupId];if(!group.activeFilterIds.some(isEqualTo([filter.id]))){group.activeFilterIds.push([filter.id]);this.query.push(group.id);}}else{if(filter.hasOptions){this.toggleFilterWithOptions(filter.id);}else{this.toggleFilter(filter.id);}}},toggleFilter:function(filterId){var self=this;var filter=this.filters[filterId];var group=this.groups[filter.groupId];var index=group.activeFilterIds.findIndex(isEqualTo([filterId]));var initiaLength=group.activeFilterIds.length;if(index===-1){if(filter.type==='favorite'){this.query.forEach(function(groupId){const group=self.groups[groupId];group.activeFilterIds.forEach(id=>{const filter=self.filters[id[0]];if(filter.autoCompleteValues){filter.autoCompleteValues=[];}
if(filter.currentOptionIds){filter.currentOptionIds.clear();}})
group.activeFilterIds=[];});this.query=[];}
group.activeFilterIds.push([filterId]);if(filter.type==='favorite'||initiaLength===0){this.query.push(group.id);}}else{if(filter.type==='field'&&filter.autoCompleteValues){filter.autoCompleteValues=[];}
group.activeFilterIds.splice(index,1);if(initiaLength===1){this.query.splice(this.query.indexOf(group.id),1);}}},toggleFilterWithOptions:function(filterId,optionId){const filter=this.filters[filterId];optionId=optionId||filter.defaultOptionId;const group=this.groups[filter.groupId];const selectedYears=()=>YEAR_OPTIONS.reduce((acc,y)=>{if(filter.currentOptionIds.has(y.optionId)){acc.push(y.optionId);}
return acc;},[]);if(filter.type==='filter'){const alreadyActive=group.activeFilterIds.some(isEqualTo([filterId]));if(alreadyActive){if(filter.currentOptionIds.has(optionId)){filter.currentOptionIds.delete(optionId);if(!selectedYears().length){filter.currentOptionIds.clear();}
if(!filter.currentOptionIds.size){this.toggleFilter(filterId);}}else{filter.currentOptionIds.add(optionId);}}else{this.toggleFilter(filterId);filter.currentOptionIds.add(optionId);if(!selectedYears().length){filter.currentOptionIds.add('this_year');}}}else if(filter.type==='groupBy'){const combinationId=[filterId,optionId];const initiaLength=group.activeFilterIds.length;const index=group.activeFilterIds.findIndex(isEqualTo(combinationId));if(index===-1){group.activeFilterIds.push(combinationId);filter.currentOptionIds.add(optionId);if(initiaLength===0){this.query.push(group.id);}}else{group.activeFilterIds.splice(index,1);filter.currentOptionIds.delete(optionId);if(initiaLength===1){this.query.splice(this.query.indexOf(group.id),1);}}}},_activateDefaultFilters:function(){Object.values(this.filters).filter(f=>f.isDefault&&f.type!=='favorite').sort((f1,f2)=>(f1.defaultRank||100)-(f2.defaultRank||100)).forEach(f=>{if(f.hasOptions){this.toggleFilterWithOptions(f.id);}else{this.toggleFilter(f.id);}});},_activateDefaultTimeRanges:function(defaultTimeRanges){if(defaultTimeRanges){var filter=_.find(this.filters,function(filter){return filter.type==='timeRange'&&filter.fieldName===defaultTimeRanges.field;});if(filter){this.activateTimeRange(filter.id,defaultTimeRanges.range,defaultTimeRanges.comparisonRange);}}},_addNewFavorite:function(favorite){var id=_.uniqueId('__filter__');favorite.id=id;favorite.groupId=this._getGroupIdOfType('favorite');this.filters[id]=favorite;this.toggleFilter(favorite.id);},_computeDateFilterDomain:function(filter){const domains=[];const p=_.partition([...filter.currentOptionIds],optionId=>OPTION_GENERATORS.find(o=>o.optionId===optionId).groupId===1);const yearIds=p[1];const otherOptionIds=p[0];if(otherOptionIds.length===0){yearIds.forEach(yearId=>{const d=filter.basicDomains[yearId];domains.push(d.domain);});}else{otherOptionIds.forEach(optionId=>{yearIds.forEach(yearId=>{const d=filter.basicDomains[yearId+'__'+optionId];domains.push(d.domain);});});}
return pyUtils.assembleDomains(domains,'OR');},_createEmptyGroup:function(type){var id=_.uniqueId('__group__');this.groups[id]={id:id,type:type,activeFilterIds:[],};},_createGroupOfFilters:function(group){var self=this;var type;var groupId=_.uniqueId('__group__');group.forEach(function(filter){var id=_.uniqueId('__filter__');filter.id=id;filter.groupId=groupId;type=filter.type;self.filters[id]=filter;});this.groups[groupId]={id:groupId,type:type,activeFilterIds:[],};},_createGroupOfTimeRanges:function(){var self=this;var timeRanges=[];Object.keys(this.fields).forEach(function(fieldName){var field=self.fields[fieldName];var fieldType=field.type;if(_.contains(['date','datetime'],fieldType)&&field.sortable){timeRanges.push({type:'timeRange',description:field.string,fieldName:fieldName,fieldType:fieldType,timeRangeId:false,comparisonTimeRangeId:false,defaultTimeRangeId:DEFAULT_TIMERANGE,timeRangeOptions:TIME_RANGE_OPTIONS,comparisonTimeRangeOptions:COMPARISON_TIME_RANGE_OPTIONS});}});if(timeRanges.length){this._createGroupOfFilters(timeRanges);}else{this._createEmptyGroup('timeRange');}},_generateNewGroupNumber:function(){var self=this;var groupNumber=1+Object.keys(this.filters).reduce(function(max,filterId){var filter=self.filters[filterId];if(filter.groupNumber){max=Math.max(filter.groupNumber,max);}
return max;},1);return groupNumber;},_getAutoCompletionFilterDomain:function(filter){var domain="";var field=this.fields[filter.attrs.name];var Obj=searchBarAutocompleteRegistry.getAny([filter.attrs.widget,field.type]);if(Obj){var obj=new(Obj)(this,filter,field,this.actionContext);domain=obj.getDomain(filter.autoCompleteValues);}
return domain;},_getDomain:function(){var self=this;var domains=this.query.map(function(groupId){var group=self.groups[groupId];return self._getGroupDomain(group);});return pyUtils.assembleDomains(domains,'AND');},_getFacets:function(){var self=this;return this.query.map(groupId=>{var group=self.groups[groupId];var facet=_.extend({},group);if(group.type==='groupBy'){facet.filters=group.activeFilterIds.map(id=>{let filter=_.extend({},self.filters[id[0]]);if(filter.hasOptions){filter.optionId=id[1];}
return filter;});}else{facet.filters=_.compact(group.activeFilterIds.map(id=>self.filters[id[0]]));}
return facet;});},_getFilterContext:function(filter){var context=filter.context||{};if(filter.type==='field'&&filter.attrs.context){context=pyUtils.eval('context',filter.attrs.context,{self:_.map(filter.autoCompleteValues,function(autoCompleteValue){return autoCompleteValue.value;}),});}
if(filter.type==='field'&&filter.isDefault){if(this.fields[filter.attrs.name].type==='many2one'){var value=filter.defaultValue;if(_.isArray(filter.defaultValue)){value=filter.defaultValue[0];}
context['default_'+filter.attrs.name]=value;}}
return context;},_getFilterDomain:function(filter){let domain;if(filter.type==='filter'){domain=filter.domain;if(filter.hasOptions){domain=this._computeDateFilterDomain(filter);}}else if(filter.type==='favorite'){domain=filter.domain;}else if(filter.type==='field'){domain=filter.domain;}
return domain;},_getFilterGroupBys:function(filterId){var groupBys;var filter=this.filters[filterId[0]];if(filter.type==='groupBy'){var optionId=filterId[1];var groupBy=filter.fieldName;if(optionId){groupBy=groupBy+':'+optionId;}
groupBys=[groupBy];}
if(filter.type==='favorite'){groupBys=filter.groupBys;}
return groupBys;},_getGroupBy:function(){var self=this;var groupBys=this.query.reduce(function(acc,groupId){var group=self.groups[groupId];return acc.concat(self._getGroupGroupBys(group));},[]);return groupBys;},_getGroupContexts:function(group){var self=this;var contexts=group.activeFilterIds.map(function(filterId){var filter=self.filters[filterId[0]];return self._getFilterContext(filter);});return _.compact(contexts);},_getGroupDomain:function(group){var self=this;var domains=group.activeFilterIds.map(function(filterId){var filter=self.filters[filterId[0]];return self._getFilterDomain(filter);});return pyUtils.assembleDomains(_.compact(domains),'OR');},_getGroupGroupBys:function(group){var self=this;var groupBys=group.activeFilterIds.reduce(function(acc,filterId){acc=acc.concat(self._getFilterGroupBys(filterId));return acc;},[]);return _.compact(groupBys);},_getGroupIdOfType:function(type){var self=this;return _.find(Object.keys(this.groups),function(groupId){var group=self.groups[groupId];return group.type===type;});},_getOrderedBy:function(){var orderedBy;var id=this._getGroupIdOfType('favorite');if(this.query.indexOf(id)!==-1){var group=this.groups[id];var activeFavoriteId=group.activeFilterIds[0][0];var favorite=this.filters[activeFavoriteId];if(favorite.orderedBy&&favorite.orderedBy.length){orderedBy=favorite.orderedBy;}}
return orderedBy;},_getQueryContext:function(){var self=this;var contexts=this.query.reduce(function(acc,groupId){var group=self.groups[groupId];acc=acc.concat(self._getGroupContexts(group));return acc;},[]);return _.compact(contexts);},_getTimeRangeMenuData:function(evaluation){var context={};var groupOfTimeRanges=this.groups[this._getGroupIdOfType('timeRange')];if(groupOfTimeRanges&&groupOfTimeRanges.activeFilterIds.length){var filter=this.filters[groupOfTimeRanges.activeFilterIds[0][0]];var comparisonTimeRange="[]";var comparisonTimeRangeDescription;var timeRange=Domain.prototype.constructDomain(filter.fieldName,filter.timeRangeId,filter.fieldType);var timeRangeDescription=_.find(filter.timeRangeOptions,function(option){return option.optionId===filter.timeRangeId;}).description.toString();if(filter.comparisonTimeRangeId){comparisonTimeRange=Domain.prototype.constructDomain(filter.fieldName,filter.timeRangeId,filter.fieldType,filter.comparisonTimeRangeId);comparisonTimeRangeDescription=_.find(filter.comparisonTimeRangeOptions,function(comparisonOption){return comparisonOption.optionId===filter.comparisonTimeRangeId;}).description.toString();}
if(evaluation){timeRange=Domain.prototype.stringToArray(timeRange);comparisonTimeRange=Domain.prototype.stringToArray(comparisonTimeRange);}
context={timeRangeMenuData:{comparisonField:filter.fieldName,timeRange:timeRange,timeRangeDescription:timeRangeDescription,comparisonTimeRange:comparisonTimeRange,comparisonTimeRangeDescription:comparisonTimeRangeDescription,}};}
return context;},_loadFavorites:function(){var self=this;var def=this.loadFilters(this.modelName,this.actionId).then(function(favorites){if(favorites.length){favorites=favorites.map(function(favorite){var userId=favorite.user_id?favorite.user_id[0]:false;var groupNumber=userId?1:2;var context=pyUtils.eval('context',favorite.context,session.user_context);var groupBys=[];if(context.group_by){groupBys=context.group_by;delete context.group_by;}
var sort=JSON.parse(favorite.sort);var orderedBy=sort.map(function(order){var fieldName;var asc;var sqlNotation=order.split(' ');if(sqlNotation.length>1){fieldName=sqlNotation[0];asc=sqlNotation[1]==='asc';}else{fieldName=order[0]==='-'?order.slice(1):order;asc=order[0]==='-'?false:true;}
return{name:fieldName,asc:asc,};});return{type:'favorite',description:favorite.name,isRemovable:true,groupNumber:groupNumber,isDefault:favorite.is_default,domain:favorite.domain,groupBys:groupBys,context:favorite.context,orderedBy:orderedBy,userId:userId,serverSideId:favorite.id,};});self._createGroupOfFilters(favorites);if(self.activateDefaultFavorite){var defaultFavorite=_.find(self.filters,function(filter){return filter.type==='favorite'&&filter.isDefault;});if(defaultFavorite){self.toggleFilter(defaultFavorite.id);}}}else{self._createEmptyGroup('favorite');}});return def;},_loadSearchDefaults:function(){var self=this;var defs=[];_.each(this.filters,function(filter){if(filter.type==='field'&&filter.isDefault){var def;var field=self.fields[filter.attrs.name];var value=filter.defaultValue;if(field.type==='many2one'){if(value instanceof Array){value=value[0];}
def=self._rpc({model:field.relation,method:'name_get',args:[value],context:self.actionContext,}).then(function(result){var autocompleteValue={label:result[0][1],value:value,};filter.autoCompleteValues.push(autocompleteValue);filter.domain=self._getAutoCompletionFilterDomain(filter);});}else{var autocompleteValue;if(field.type==='selection'){var match=_.find(field.selection,function(sel){return sel[0]===value;});autocompleteValue={label:match[1],value:match[0],};}else{autocompleteValue={label:String(value),value:value,};}
filter.autoCompleteValues.push(autocompleteValue);filter.domain=self._getAutoCompletionFilterDomain(filter);}
if(def){defs.push(def);}}});return defs;},_saveQuery:function(favorite){var self=this;var userContext=session.user_context;var controllerQueryParams;this.trigger_up('get_controller_query_params',{callback:function(state){controllerQueryParams=state;},});var queryContext=this._getQueryContext();var timeRangeMenuInfo=this._getTimeRangeMenuData(false);var context=pyUtils.eval('contexts',[userContext,controllerQueryParams.context,timeRangeMenuInfo].concat(queryContext));context=_.omit(context,Object.keys(userContext));var groupBys=this._getGroupBy();if(groupBys.length){context.group_by=groupBys;}
var domain=this._getDomain();var userId=favorite.isShared?false:session.uid;var orderedBy=this._getOrderedBy()||[];if(controllerQueryParams.orderedBy){orderedBy=controllerQueryParams.orderedBy;}
var sort=orderedBy.map(function(order){return order.name+((order.asc===false)?" desc":"");});var irFilter={name:favorite.description,context:context,domain:domain,is_default:favorite.isDefault,user_id:userId,model_id:this.modelName,action_id:this.actionId,sort:JSON.stringify(sort),};return this.createFilter(irFilter).then(function(serverSideId){delete context.group_by;favorite.isRemovable=true;favorite.groupNumber=userId?1:2;favorite.context=context;favorite.groupBys=groupBys;favorite.domain=domain;favorite.orderedBy=orderedBy;favorite.userId=userId;favorite.serverSideId=serverSideId;self._addNewFavorite(favorite);});},});return ControlPanelModel;});;

/* /web/static/src/js/views/control_panel/control_panel_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.ControlPanelRenderer',function(require){"use strict";var config=require('web.config');var data=require('web.data');var FavoriteMenu=require('web.FavoriteMenu');var FilterMenu=require('web.FilterMenu');var GroupByMenu=require('web.GroupByMenu');var mvc=require('web.mvc');var SearchBar=require('web.SearchBar');var TimeRangeMenu=require('web.TimeRangeMenu');var Renderer=mvc.Renderer;var ControlPanelRenderer=Renderer.extend({template:'ControlPanel',custom_events:{get_action_info:'_onGetActionInfo',},events:_.extend({},Renderer.prototype.events,{'click .o_searchview_more':'_onMore',}),init:function(parent,state,params){this._super.apply(this,arguments);this._breadcrumbs=params.breadcrumbs||[];this._title=params.title||'';this.withBreadcrumbs=params.withBreadcrumbs;this.withSearchBar=params.withSearchBar;if(params.template){this.template=params.template;}
this.context=params.context;this.$subMenus=null;this.action=params.action;this.displaySearchMenu=true;this.isMobile=config.device.isMobile;this.menusSetup=false;this.searchMenuTypes=params.searchMenuTypes||[];this.subMenus={};},start:function(){var self=this;this.nodes={$buttons:this.$('.o_cp_buttons'),$pager:this.$('.o_cp_pager'),$sidebar:this.$('.o_cp_sidebar'),$switch_buttons:this.$('.o_cp_switch_buttons'),};if(!this.withSearchBar){this.nodes.$searchview=this.$('.o_cp_searchview');}
if(this.searchMenuTypes.length===0){this.nodes.$searchview_buttons=this.$('.o_search_options');}
if(this.withBreadcrumbs){this._renderBreadcrumbs();}
var superDef=this._super.apply(this,arguments);var searchDef=this._renderSearch();return Promise.all([superDef,searchDef]).then(function(){self._setSearchMenusVisibility();});},on_attach_callback:function(){this._focusSearchInput();},on_detach_callback:function(){},getLastFacet:function(){return this.state.facets.slice(-1)[0];},updateContents:function(status,options){var new_cp_content=status.cp_content||{};var clear='clear'in(options||{})?options.clear:true;if(this.withBreadcrumbs){this._breadcrumbs=status.breadcrumbs||this._breadcrumbs;this._title=status.title||this._title;this._renderBreadcrumbs();}
if(clear){this._detachContent(this.nodes);}else{this._detachContent(_.pick(this.nodes,_.keys(new_cp_content)));}
this._attachContent(new_cp_content);},updateState:function(state){this.state=state;return this._renderSearch();},_attachContent:function(content){for(var $element in content){var $nodeset=content[$element];if($nodeset&&this.nodes[$element]){this.nodes[$element].append($nodeset);}}},_detachContent:function(content){for(var $element in content){content[$element].contents().detach();}},_focusSearchInput:function(){if(this.withSearchBar&&!config.device.isMobile){this.searchBar.focus();}},_getMenuItems:function(menuType){var menuItems;if(menuType==='filter'){menuItems=this.state.filters;}
if(menuType==='groupBy'){menuItems=this.state.groupBys;}
if(menuType==='timeRange'){menuItems=this.state.timeRanges;}
if(menuType==='favorite'){menuItems=this.state.favorites;}
return menuItems;},_getSubMenusPlace:function(){return $('<div>').appendTo(this.$('.o_search_options'));},_renderBreadcrumbs:function(){var self=this;var breadcrumbsDescriptors=this._breadcrumbs.concat({title:this._title});var breadcrumbs=breadcrumbsDescriptors.map(function(bc,index){return self._renderBreadcrumbsItem(bc,index,breadcrumbsDescriptors.length);});this.$('.breadcrumb').html(breadcrumbs);},_renderBreadcrumbsItem:function(bc,index,length){var self=this;var is_last=(index===length-1);var li_content=bc.title&&_.escape(bc.title.trim())||data.noDisplayContent;var $bc=$('<li>',{class:'breadcrumb-item'}).append(is_last?li_content:$('<a>',{href:'#'}).html(li_content)).toggleClass('active',is_last);if(!is_last){$bc.click(function(ev){ev.preventDefault();self.trigger_up('breadcrumb_clicked',{controllerID:bc.controllerID});});}
var secondLast=index===length-2;if(secondLast){$bc.attr('accessKey','b');}
return $bc;},_renderSearch:function(){var defs=[];if(this.menusSetup){this._updateMenus();}else{this.menusSetup=true;defs=defs.concat(this._setupMenus());}
if(this.withSearchBar){defs.push(this._renderSearchBar());}
return Promise.all(defs).then(this._focusSearchInput.bind(this));},_renderSearchBar:function(){var oldSearchBar=this.searchBar;this.searchBar=new SearchBar(this,{context:this.context,facets:this.state.facets,fields:this.state.fields,filterFields:this.state.filterFields,});return this.searchBar.appendTo(this.$('.o_searchview')).then(function(){if(oldSearchBar){oldSearchBar.destroy();}});},_setSearchMenusVisibility:function(){this.$('.o_searchview_more').toggleClass('fa-search-plus',!this.displaySearchMenu).toggleClass('fa-search-minus',this.displaySearchMenu);this.$('.o_search_options').toggleClass('o_hidden',!this.displaySearchMenu);},_setupMenu:function(menuType){var Menu;var menu;if(menuType==='filter'){Menu=FilterMenu;}
if(menuType==='groupBy'){Menu=GroupByMenu;}
if(menuType==='timeRange'){Menu=TimeRangeMenu;}
if(menuType==='favorite'){Menu=FavoriteMenu;}
if(_.contains(['filter','groupBy','timeRange'],menuType)){menu=new Menu(this,this._getMenuItems(menuType),this.state.fields);}
if(menuType==='favorite'){menu=new Menu(this,this._getMenuItems(menuType),this.action);}
this.subMenus[menuType]=menu;return menu.appendTo(this.$subMenus);},_setupMenus:function(){this.$subMenus=this._getSubMenusPlace();return this.searchMenuTypes.map(this._setupMenu.bind(this));},_updateMenus:function(){var self=this;this.searchMenuTypes.forEach(function(menuType){self.subMenus[menuType].update(self._getMenuItems(menuType));});},_onMore:function(){this.displaySearchMenu=!this.displaySearchMenu;this._setSearchMenusVisibility();},});return ControlPanelRenderer;});;

/* /web/static/src/js/views/control_panel/control_panel_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.ControlPanelView',function(require){"use strict";var ControlPanelController=require('web.ControlPanelController');var ControlPanelModel=require('web.ControlPanelModel');var ControlPanelRenderer=require('web.ControlPanelRenderer');var controlPanelViewParameters=require('web.controlPanelViewParameters');var mvc=require('web.mvc');var pyUtils=require('web.py_utils');var viewUtils=require('web.viewUtils');var Domain=require('web.Domain');var DEFAULT_INTERVAL=controlPanelViewParameters.DEFAULT_INTERVAL;var DEFAULT_PERIOD=controlPanelViewParameters.DEFAULT_PERIOD;var INTERVAL_OPTIONS=controlPanelViewParameters.INTERVAL_OPTIONS;var PERIOD_OPTIONS=controlPanelViewParameters.PERIOD_OPTIONS;const OPTION_GENERATORS=controlPanelViewParameters.OPTION_GENERATORS;var Factory=mvc.Factory;var ControlPanelView=Factory.extend({config:_.extend({},Factory.prototype.config,{Controller:ControlPanelController,Model:ControlPanelModel,Renderer:ControlPanelRenderer,}),init:function(params){var self=this;this._super();params=params||{};var viewInfo=params.viewInfo||{arch:'<search/>',fields:{}};var context=_.extend({},params.context);var domain=params.domain||[];var action=params.action||{};this.searchDefaults={};Object.keys(context).forEach(function(key){var match=/^search_default_(.*)$/.exec(key);if(match){self.searchDefaults[match[1]]=context[key];delete context[key];}});this.arch=viewUtils.parseArch(viewInfo.arch);this.fields=viewInfo.fields;this.referenceMoment=moment();this.optionGenerators=OPTION_GENERATORS.map(o=>{const description=o.description?o.description.toString():this.referenceMoment.clone().set(o.setParam).add(o.addParam).format(o.format);return _.extend({},o,{description:description});});PERIOD_OPTIONS=PERIOD_OPTIONS.map(option=>_.extend({},option,{description:option.description.toString()}));INTERVAL_OPTIONS=INTERVAL_OPTIONS.map(option=>_.extend({},option,{description:option.description.toString()}));this.controllerParams.modelName=params.modelName;this.modelParams.context=context;this.modelParams.domain=domain;this.modelParams.modelName=params.modelName;this.modelParams.actionId=action.id;this.modelParams.fields=this.fields;this.rendererParams.action=action;this.rendererParams.breadcrumbs=params.breadcrumbs;this.rendererParams.context=context;this.rendererParams.searchMenuTypes=params.searchMenuTypes||[];this.rendererParams.template=params.template;this.rendererParams.title=params.title;this.rendererParams.withBreadcrumbs=params.withBreadcrumbs!==false;this.rendererParams.withSearchBar='withSearchBar'in params?params.withSearchBar:true;this.loadParams.withSearchBar='withSearchBar'in params?params.withSearchBar:true;this.loadParams.searchMenuTypes=params.searchMenuTypes||[];this.loadParams.activateDefaultFavorite=params.activateDefaultFavorite;if(this.loadParams.withSearchBar){if(params.state){this.loadParams.initialState=params.state;}else{this.loadParams.groups=[];this.loadParams.timeRanges=context.time_ranges;this._parseSearchArch(this.arch);}}
if(params.dynamicFilters&&params.dynamicFilters.length){var dynamicFiltersGroup=params.dynamicFilters.map(function(filter){return{description:filter.description,domain:JSON.stringify(filter.domain),isDefault:true,type:'filter',};});this.loadParams.groups.unshift(dynamicFiltersGroup);}},_evalArchChild:function(child){if(child.attrs.context){try{var context=pyUtils.eval('context',child.attrs.context);if(context.group_by){child.tag='groupBy';child.attrs.fieldName=context.group_by.split(':')[0];child.attrs.defaultInterval=context.group_by.split(':')[1];}}catch(e){}}
return child;},_extractAttributes:function(filter,attrs){filter.isDefault=this.searchDefaults[attrs.name]?true:false;filter.description=attrs.string||attrs.help||attrs.name||attrs.domain||'Ω';if(filter.type==='filter'){if(filter.isDefault){filter.defaultRank=-5;}
filter.domain=attrs.domain;filter.context=pyUtils.eval('context',attrs.context);if(attrs.date){filter.fieldName=attrs.date;filter.fieldType=this.fields[attrs.date].type;filter.hasOptions=true;filter.options=this.optionGenerators;filter.defaultOptionId=attrs.default_period||DEFAULT_PERIOD;filter.currentOptionIds=new Set();filter.basicDomains=this._getDateFilterBasicDomains(filter);}
if(attrs.invisible){filter.invisible=true;}}else if(filter.type==='groupBy'){if(filter.isDefault){const val=this.searchDefaults[attrs.name];filter.defaultRank=typeof val==='number'?val:100;}
filter.fieldName=attrs.fieldName;filter.fieldType=this.fields[attrs.fieldName].type;if(_.contains(['date','datetime'],filter.fieldType)){filter.hasOptions=true;filter.options=INTERVAL_OPTIONS;filter.defaultOptionId=attrs.defaultInterval||DEFAULT_INTERVAL;filter.currentOptionIds=new Set();}}else if(filter.type==='field'){if(filter.isDefault){filter.defaultRank=-10;}
var field=this.fields[attrs.name];filter.attrs=attrs;filter.autoCompleteValues=[];if(filter.isDefault){filter.defaultValue=this.searchDefaults[filter.attrs.name];}
if(!attrs.string){attrs.string=field.string;}}},_getDateFilterBasicDomains:function(filter){const _constructBasicDomain=(y,o)=>{const addParam=_.extend({},y.addParam,o?o.addParam:{});const setParam=_.extend({},y.setParam,o?o.setParam:{});const granularity=o?o.granularity:y.granularity;const date=this.referenceMoment.clone().set(setParam).add(addParam);let leftBound=date.clone().startOf(granularity);let rightBound=date.clone().endOf(granularity);if(filter.fieldType==='date'){leftBound=leftBound.format("YYYY-MM-DD");rightBound=rightBound.format("YYYY-MM-DD");}else{leftBound=leftBound.utc().format("YYYY-MM-DD HH:mm:ss");rightBound=rightBound.utc().format("YYYY-MM-DD HH:mm:ss");}
const domain=Domain.prototype.arrayToString(['&',[filter.fieldName,">=",leftBound],[filter.fieldName,"<=",rightBound]]);let description;if(o){description=o.description+" "+y.description;}else{description=y.description;}
return{domain,description};};const domains={};this.optionGenerators.filter(y=>y.groupId===2).forEach(y=>{domains[y.optionId]=_constructBasicDomain(y);this.optionGenerators.filter(y=>y.groupId===1).forEach(o=>{domains[y.optionId+"__"+o.optionId]=_constructBasicDomain(y,o);});});return domains;},_parseSearchArch:function(arch){var self=this;var children=arch.children.filter(function(child){return child.tag!=='searchpanel';});var preFilters=_.flatten(children.map(function(child){return child.tag!=='group'?self._evalArchChild(child):child.children.map(self._evalArchChild);}));preFilters.push({tag:'separator'});var filter;var currentTag;var currentGroup=[];var groupOfGroupBys=[];var groupNumber=1;_.each(preFilters,function(preFilter){if(preFilter.tag!==currentTag||_.contains(['separator','field'],preFilter.tag)){if(currentGroup.length){if(currentTag==='groupBy'){groupOfGroupBys=groupOfGroupBys.concat(currentGroup);}else{self.loadParams.groups.push(currentGroup);}}
currentTag=preFilter.tag;currentGroup=[];groupNumber++;}
if(preFilter.tag!=='separator'){filter={type:preFilter.tag,};if(filter.type==='filter'||filter.type==='groupBy'){filter.groupNumber=groupNumber;}
self._extractAttributes(filter,preFilter.attrs);currentGroup.push(filter);}});if(groupOfGroupBys.length){this.loadParams.groups.push(groupOfGroupBys);}},});return ControlPanelView;});;

/* /web/static/src/js/views/control_panel/mobile_control_panel_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.MobileControlPanelController',function(require){"use strict";var config=require('web.config');var ControlPanelController=require('web.ControlPanelController');if(!config.device.isMobile){return;}
ControlPanelController.include({custom_events:_.extend({},ControlPanelController.prototype.custom_events,{'search_bar_cleared':'_onSearchBarCleared',}),_onSearchBarCleared:function(){var self=this;this.model.get().query.forEach(function(groupId){self.model.deactivateGroup(groupId);});this._reportNewQueryAndRender();},});});;

/* /web/static/src/js/views/control_panel/mobile_control_panel_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.MobileControlPanelRenderer',function(require){"use strict";var config=require('web.config');var ControlPanelRenderer=require('web.ControlPanelRenderer');if(!config.device.isMobile){return;}
ControlPanelRenderer.include({events:_.extend({},ControlPanelRenderer.prototype.events,{'click .o_mobile_search_close, .o_mobile_search_show_result, .o_toggle_searchview_full':'_toggleMobileSearchView','click .o_enable_searchview':'_toggleMobileQuickSearchView','click .o_toggle_searchview_full':'_onOpenMobileSearchView','click .o_mobile_search_clear_facets':'_onEmptyAll','show.bs.dropdown .o_mobile_search_filter .o_dropdown':'_onDropdownToggle','hide.bs.dropdown .o_mobile_search_filter .o_dropdown':'_onDropdownToggle',}),_getSubMenusPlace:function(){return this.$('.o_mobile_search_filter');},_render:function(){var self=this;return this._super.apply(this,arguments).then(function(){self.$('.o_mobile_search_clear_facets').toggleClass('o_hidden',!self.state.query.length);});},_renderSearchBar:function(){var self=this;return this._super.apply(this,arguments).then(function(){self._renderSearchviewInput();});},_renderSearchviewInput:function(){if(this.$('.o_toggle_searchview_full').is(':visible')&&!this.$('.o_mobile_search').is(':visible')){this.$('.o_toggle_searchview_full').toggleClass('btn-secondary',!!this.state.query.length);this.searchBar.$el.detach().insertAfter(this.$('.o_mobile_search'));}else{this.searchBar.$el.detach().insertAfter(this.$('.o_mobile_search_header'));}},_toggleMobileSearchView:function(){this.$('.o_mobile_search').toggleClass('o_hidden');this._renderSearchviewInput();},_toggleMobileQuickSearchView:function(){this.$('.o_cp_searchview').toggleClass('o_searchview_quick');this.$('.breadcrumb').toggleClass('o_hidden',this.$('.o_cp_searchview').hasClass('o_searchview_quick'));this.$('.o_toggle_searchview_full').toggleClass('o_hidden').toggleClass('btn-secondary',!!this.state.query.length);this._renderSearchviewInput();this.$('.o_enable_searchview').toggleClass("fa-search").toggleClass("fa-close");},_onDropdownToggle:function(ev){$(ev.currentTarget).find('.fa-chevron-right').toggleClass('fa-chevron-down');},_onEmptyAll:function(){this.trigger_up('search_bar_cleared');},_onOpenMobileSearchView:function(ev){if(ev.target===this.el){this._toggleMobileSearchView();}},});});;

/* /web/static/src/js/views/control_panel/search/search_bar_autocomplete_sources.js defined in bundle 'web.assets_backend' */
odoo.define('web.SearchBarAutoCompleteSources',function(require){"use strict";var Class=require('web.Class');var core=require('web.core');var Domain=require('web.Domain');var field_utils=require('web.field_utils');var mixins=require('web.mixins');var pyUtils=require('web.py_utils');var ServicesMixin=require('web.ServicesMixin');var time=require('web.time');var _t=core._t;var _lt=core._lt;var FilterInterface=Class.extend(mixins.EventDispatcherMixin,{completion_label:_lt("%s"),init:function(parent,filter){mixins.EventDispatcherMixin.init.call(this);this.setParent(parent);this.filter=filter;},getAutocompletionValues:function(value){var result;value=value.toLowerCase();if(fuzzy.test(value,this.filter.description)){result=[{label:_.str.sprintf(this.completion_label.toString(),_.escape(this.filter.description)),facet:{filter:this.filter,},}];}
return Promise.resolve(result);},});var Filter=FilterInterface.extend({completion_label:_lt("Filter on: %s"),});var GroupBy=FilterInterface.extend({completion_label:_lt("Group by: %s"),});var Field=FilterInterface.extend(ServicesMixin,{default_operator:'=',init:function(parent,filter,field,context){this._super.apply(this,arguments);this.field=field;this.filter=filter;this.attrs=_.extend({},field,filter.attrs);this.context=context;},getAutocompletionValues:function(value){return Promise.resolve([{label:this._getAutocompletionLabel(value),facet:this._getFacetValue(value),}]);},getDomain:function(values){if(!values.length){return;}
var valueToDomain;var self=this;var domain=this.attrs.filter_domain;if(domain){valueToDomain=function(facetValue){return Domain.prototype.stringToArray(domain,{self:self._valueFrom(facetValue),raw_value:facetValue.value,});};}else{valueToDomain=function(facetValue){return self._makeDomain(self.attrs.name,self.attrs.operator||self.default_operator,facetValue);};}
var domains=values.map(valueToDomain);domains=domains.map(Domain.prototype.arrayToString);return pyUtils.assembleDomains(domains,'OR');},_getAutocompletionLabel:function(value){return _.str.sprintf(_.str.escapeHTML(_t("Search %(field)s for: %(value)s")),{field:'<em>'+_.escape(this.attrs.string)+'</em>',value:'<strong>'+_.escape(value)+'</strong>'});},_getFacetValue:function(value){return{filter:this.filter,values:[{label:value,value:value}],};},_makeDomain:function(name,operator,facet){return[[name,operator,this._valueFrom(facet)]];},_valueFrom:function(facetValue){return facetValue.value;},});var CharField=Field.extend({default_operator:'ilike',getAutocompletionValues:function(value){if(_.isEmpty(value)){return Promise.resolve(null);}
return this._super.apply(this,arguments);},});var NumberField=Field.extend({getAutocompletionValues:function(value){var val=this.parse(value);if(isNaN(val)){return Promise.resolve();}
return this._super.apply(this,arguments);},});var IntegerField=NumberField.extend({error_message:_t("not a valid integer"),parse:function(value){try{return field_utils.parse.integer(value);}catch(e){return NaN;}},});var FloatField=NumberField.extend({error_message:_t("not a valid number"),parse:function(value){try{return field_utils.parse.float(value);}catch(e){return NaN;}},});var SelectionField=Field.extend({getAutocompletionValues:function(value){var self=this;var results=_(this.attrs.selection).chain().filter(function(sel){var selValue=sel[0],label=sel[1];if(selValue===undefined||!label){return false;}
return label.toLowerCase().indexOf(value.toLowerCase())!==-1;}).map(function(sel){return{label:_.escape(sel[1]),indent:true,facet:self._getFacetValue(sel)};}).value();if(_.isEmpty(results)){return Promise.resolve(null);}
return Promise.resolve([{label:_.escape(this.attrs.string)}].concat(results));},_getFacetValue:function(value){return{filter:this.filter,values:[{label:value[1],value:value[0]}],};},});var BooleanField=SelectionField.extend({init:function(){this._super.apply(this,arguments);this.attrs.selection=[[true,_t("Yes")],[false,_t("No")]];},});var DateField=Field.extend({getAutocompletionValues:function(value){var t,v;try{t=(this.attrs&&this.attrs.type==='datetime')?'datetime':'date';v=field_utils.parse[t](value,{type:t},{timezone:true});}catch(e){return Promise.resolve(null);}
var m=moment(v,t==='datetime'?'YYYY-MM-DD HH:mm:ss':'YYYY-MM-DD');if(!m.isValid()){return Promise.resolve(null);}
var dateString=field_utils.format[t](m,{type:t});var label=this._getAutocompletionLabel(dateString);var facet=this._getFacetValue(dateString,m.toDate());return Promise.resolve([{label:label,facet:facet,}]);},_getAutocompletionLabel:function(value){return _.str.sprintf(_.str.escapeHTML(_t("Search %(field)s at: %(value)s")),{field:'<em>'+_.escape(this.attrs.string)+'</em>',value:'<strong>'+value+'</strong>'});},_getFacetValue:function(value,rawValue){var facet=this._super.apply(this,arguments);facet.values[0].value=rawValue;return facet;},_valueFrom:function(facetValue){return time.date_to_str(facetValue.value);},});var DateTimeField=DateField.extend({_valueFrom:function(facetValue){return time.datetime_to_str(facetValue.value);},});var ManyToOneField=CharField.extend({default_operator:{},getAutocompletionValues:function(value){if(_.isEmpty(value)){return Promise.resolve(null);}
var label=this._getAutocompletionLabel(value);return Promise.resolve([{label:label,facet:this._getFacetValue(value),expand:this._expand.bind(this),}]);},_getExpandedFacetValue:function(value){return{filter:this.filter,values:[{label:value[1],value:value[0]}],};},_getFacetValue:function(value){return{filter:this.filter,values:[{label:value,value:value,operator:'ilike'}],};},_expand:function(value){var self=this;var args=this.attrs.domain;if(typeof args==='string'){try{args=Domain.prototype.stringToArray(args);}catch(e){args=[];}}
return this._rpc({model:this.attrs.relation,method:'name_search',kwargs:{name:value,args:args,limit:8,context:this.context,},}).then(function(results){if(_.isEmpty(results)){return null;}
return _(results).map(function(result){return{label:_.escape(result[1]),facet:self._getExpandedFacetValue(result)};});});},_makeDomain:function(name,operator,facetValue){operator=facetValue.operator||operator;switch(operator){case this.default_operator:return[[name,'=',facetValue.value]];case'ilike':return[[name,'ilike',facetValue.value]];case'child_of':return[[name,'child_of',facetValue.value]];}
return this._super(name,operator,facetValue);},_valueFrom:function(facetValue){return facetValue.label;},});return{BooleanField:BooleanField,CharField:CharField,DateField:DateField,DateTimeField:DateTimeField,Field:Field,Filter:Filter,FloatField:FloatField,GroupBy:GroupBy,IntegerField:IntegerField,ManyToOneField:ManyToOneField,NumberField:NumberField,SelectionField:SelectionField,};});;

/* /web/static/src/js/views/control_panel/search/search_bar_autocomplete_sources_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web.search_bar_autocomplete_sources_registry',function(require){"use strict";var Registry=require('web.Registry');return new Registry();});odoo.define('web._search_bar_autocomplete_sources_registry',function(require){"use strict";var registry=require('web.search_bar_autocomplete_sources_registry');var SearchBarAutoCompleteSources=require('web.SearchBarAutoCompleteSources');registry.add('char',SearchBarAutoCompleteSources.CharField).add('text',SearchBarAutoCompleteSources.CharField).add('html',SearchBarAutoCompleteSources.CharField).add('boolean',SearchBarAutoCompleteSources.BooleanField).add('integer',SearchBarAutoCompleteSources.IntegerField).add('id',SearchBarAutoCompleteSources.IntegerField).add('float',SearchBarAutoCompleteSources.FloatField).add('monetary',SearchBarAutoCompleteSources.FloatField).add('selection',SearchBarAutoCompleteSources.SelectionField).add('datetime',SearchBarAutoCompleteSources.DateTimeField).add('date',SearchBarAutoCompleteSources.DateField).add('many2one',SearchBarAutoCompleteSources.ManyToOneField).add('many2many',SearchBarAutoCompleteSources.CharField).add('one2many',SearchBarAutoCompleteSources.CharField);registry.add('filter',SearchBarAutoCompleteSources.Filter);registry.add('groupby',SearchBarAutoCompleteSources.GroupBy);});;

/* /web/static/src/js/views/control_panel/search/search_facet.js defined in bundle 'web.assets_backend' */
odoo.define('web.SearchFacet',function(require){"use strict";var core=require('web.core');var Widget=require('web.Widget');var _t=core._t;var SearchFacet=Widget.extend({template:'SearchView.SearchFacet',events:_.extend({},Widget.prototype.events,{'click .o_facet_remove':'_onFacetRemove','compositionend':'_onCompositionend','compositionstart':'_onCompositionstart','keydown':'_onKeydown',}),init:function(parent,facet){this._super.apply(this,arguments);var self=this;this.facet=facet;this.facetValues=_.map(this.facet.filters,function(filter){return self._getFilterDescription(filter);});this.separator=this._getSeparator();this.icon=this._getIcon();this._isComposing=false;},_getFilterDescription:function(filter){if(filter.type==='field'){var values=_.pluck(filter.autoCompleteValues,'label');return values.join(_t(' or '));}
var description=filter.description;if(filter.hasOptions){if(filter.type==='filter'){const optionDescriptions=[];const sortFunction=(o1,o2)=>filter.options.findIndex(o=>o.optionId===o1)-filter.options.findIndex(o=>o.optionId===o2);const p=_.partition([...filter.currentOptionIds],optionId=>filter.options.find(o=>o.optionId===optionId).groupId===1);const yearIds=p[1].sort(sortFunction);const otherOptionIds=p[0].sort(sortFunction);if(otherOptionIds.length===0){yearIds.forEach(yearId=>{const d=filter.basicDomains[yearId];optionDescriptions.push(d.description);});}else{otherOptionIds.forEach(optionId=>{yearIds.forEach(yearId=>{const d=filter.basicDomains[yearId+'__'+optionId];optionDescriptions.push(d.description);});});}
description+=': '+optionDescriptions.join('/');}else{description=description+=': '+
filter.options.find(o=>o.optionId===filter.optionId).description;}}
if(filter.type==='timeRange'){var timeRangeValue=_.findWhere(filter.timeRangeOptions,{optionId:filter.timeRangeId,});description+=': '+timeRangeValue.description;if(filter.comparisonTimeRangeId){var comparisonTimeRangeValue=_.findWhere(filter.comparisonTimeRangeOptions,{optionId:filter.comparisonTimeRangeId,});description+=' / '+comparisonTimeRangeValue.description;}}
return description;},_getIcon:function(){var icon;if(this.facet.type==='filter'){icon='fa-filter';}else if(this.facet.type==='groupBy'){icon='fa-bars';}else if(this.facet.type==='favorite'){icon='fa-star';}else if(this.facet.type==='timeRange'){icon='fa-calendar';}
return icon;},_getSeparator:function(){var separator;if(this.facet.type==='filter'){separator=_t('or');}else if(this.facet.type==='field'){separator=_t('or');}else if(this.facet.type==='groupBy'){separator='>';}
return separator;},_onCompositionend:function(ev){this._isComposing=false;},_onCompositionstart:function(ev){this._isComposing=true;},_onFacetRemove:function(){this.trigger_up('facet_removed',{group:this.facet});},_onKeydown:function(ev){if(this._isComposing){return;}
switch(ev.which){case $.ui.keyCode.BACKSPACE:this.trigger_up('facet_removed',{group:this.facet});break;}},});return SearchFacet;});;

/* /web/static/src/js/views/control_panel/search/search_bar.js defined in bundle 'web.assets_backend' */
odoo.define('web.SearchBar',function(require){"use strict";var AutoComplete=require('web.AutoComplete');var searchBarAutocompleteRegistry=require('web.search_bar_autocomplete_sources_registry');var SearchFacet=require('web.SearchFacet');var Widget=require('web.Widget');var SearchBar=Widget.extend({template:'SearchView.SearchBar',events:_.extend({},Widget.prototype.events,{'compositionend .o_searchview_input':'_onCompositionendInput','compositionstart .o_searchview_input':'_onCompositionstartInput','keydown':'_onKeydown',}),init:function(parent,params){this._super.apply(this,arguments);this.context=params.context;this.facets=params.facets;this.fields=params.fields;this.filterFields=params.filterFields;this.autoCompleteSources=[];this.searchFacets=[];this._isInputComposing=false;},start:function(){this.$input=this.$('input');var self=this;var defs=[this._super.apply(this,arguments)];_.each(this.facets,function(facet){defs.push(self._renderFacet(facet));});defs.push(this._setupAutoCompletion());return Promise.all(defs);},focus:function(){this.$input.focus();},_focusFollowing:function(){var focusedIndex=this._getFocusedFacetIndex();var $toFocus;if(focusedIndex===this.searchFacets.length-1){$toFocus=this.$input;}else{$toFocus=this.searchFacets.length&&this.searchFacets[focusedIndex+1].$el;}
if($toFocus.length){$toFocus.focus();}},_focusPreceding:function(){var focusedIndex=this._getFocusedFacetIndex();var $toFocus;if(focusedIndex===-1){$toFocus=this.searchFacets.length&&_.last(this.searchFacets).$el;}else if(focusedIndex===0){$toFocus=this.$input;}else{$toFocus=this.searchFacets.length&&this.searchFacets[focusedIndex-1].$el;}
if($toFocus.length){$toFocus.focus();}},_getFocusedFacetIndex:function(){return _.findIndex(this.searchFacets,function(searchFacet){return searchFacet.$el[0]===document.activeElement;});},_getAutoCompleteSources:function(req,callback){var defs=this.autoCompleteSources.map(function(source){return source.getAutocompletionValues(req.term);});Promise.all(defs).then(function(result){var resultCleaned=_(result).chain().compact().flatten(true).value();callback(resultCleaned);});},_renderFacet:function(facet){var searchFacet=new SearchFacet(this,facet);this.searchFacets.push(searchFacet);return searchFacet.insertBefore(this.$('input'));},_setupAutoCompletion:function(){var self=this;this._setupAutoCompletionWidgets();this.autoComplete=new AutoComplete(this,{$input:this.$('input'),source:this._getAutoCompleteSources.bind(this),select:this._onAutoCompleteSelected.bind(this),get_search_string:function(){return self.$input.val().trim();},});return this.autoComplete.appendTo(this.$el);},_setupAutoCompletionWidgets:function(){var self=this;var registry=searchBarAutocompleteRegistry;_.each(this.filterFields,function(filter){var field=self.fields[filter.attrs.name];var Obj=registry.getAny([filter.attrs.widget,field.type]);if(Obj){self.autoCompleteSources.push(new(Obj)(self,filter,field,self.context));}});},_onAutoCompleteSelected:function(e,ui){e.preventDefault();var facet=ui.item.facet;if(!facet){this.trigger_up('reset');return;}
var filter=facet.filter;if(filter.type==='field'){var values=filter.autoCompleteValues;values.push(facet.values[0]);this.trigger_up('autocompletion_filter',{filterId:filter.id,autoCompleteValues:values,});}else{this.trigger_up('autocompletion_filter',{filterId:filter.id,});}},_onCompositionendInput:function(){this._isInputComposing=false;},_onCompositionstartInput:function(){this._isInputComposing=true;},_onKeydown:function(e){if(this._isInputComposing){return;}
switch(e.which){case $.ui.keyCode.LEFT:this._focusPreceding();e.preventDefault();break;case $.ui.keyCode.RIGHT:this._focusFollowing();e.preventDefault();break;case $.ui.keyCode.DOWN:const $dropdown=this.$('.o_searchview_autocomplete:visible');if(!$dropdown.length){this.trigger_up('navigation_move',{direction:'down'});e.preventDefault();}
break;case $.ui.keyCode.BACKSPACE:if(this.$input.val()===''){this.trigger_up('facet_removed');}
break;case $.ui.keyCode.ENTER:if(this.$input.val()===''){this.trigger_up('reload');}
break;}},});return SearchBar;});;

/* /web/static/src/js/views/control_panel/search/filter_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.FilterMenu',function(require){"use strict";var config=require('web.config');var core=require('web.core');var Domain=require('web.Domain');var DropdownMenu=require('web.DropdownMenu');var search_filters=require('web.search_filters');var _t=core._t;var QWeb=core.qweb;var FilterMenu=DropdownMenu.extend({custom_events:{confirm_proposition:'_onConfirmProposition',remove_proposition:'_onRemoveProposition',},events:_.extend({},DropdownMenu.prototype.events,{'click .o_add_custom_filter':'_onAddCustomFilterClick','click .o_add_condition':'_onAddCondition','click .o_apply_filter':'_onApplyClick',}),init:function(parent,filters,fields){this._super(parent,filters);this.isMobile=config.device.isMobile;this.generatorMenuIsOpen=false;this.propositions=[];this.fields=_.pick(fields,function(field,name){return field.selectable!==false&&name!=='id';});this.fields.id={string:'ID',type:'id',searchable:true};this.dropdownCategory='filter';this.dropdownTitle=_t('Filters');this.dropdownIcon='fa fa-filter';this.dropdownSymbol=this.isMobile?'fa fa-chevron-right float-right mt4':false;this.dropdownStyle.mainButton.class='o_filters_menu_button '+
this.dropdownStyle.mainButton.class;},start:function(){this.$menu=this.$('.o_dropdown_menu');this.$menu.addClass('o_filters_menu');this._renderGeneratorMenu();return this._super.apply(this,arguments);},_appendProposition:function(){var prop=new search_filters.ExtendedSearchProposition(this,this.fields);this.propositions.push(prop);this.$('.o_apply_filter').prop('disabled',false);return prop.insertBefore(this.$addFilterMenu);},_commitSearch:function(){var filters=_.invoke(this.propositions,'get_filter').map(function(preFilter){return{type:'filter',description:preFilter.attrs.string,domain:Domain.prototype.arrayToString(preFilter.attrs.domain),};});this.trigger_up('new_filters',{filters:filters});_.invoke(this.propositions,'destroy');this.propositions=[];this._toggleCustomFilterMenu();},_renderGeneratorMenu:function(){this.$el.find('.o_generator_menu').remove();if(!this.generatorMenuIsOpen){_.invoke(this.propositions,'destroy');this.propositions=[];}
var $generatorMenu=QWeb.render('FilterMenuGenerator',{widget:this});this.$menu.append($generatorMenu);this.$addFilterMenu=this.$menu.find('.o_add_filter_menu');if(this.generatorMenuIsOpen&&!this.propositions.length){this._appendProposition();}},_toggleCustomFilterMenu:function(){this.generatorMenuIsOpen=!this.generatorMenuIsOpen;this._renderGeneratorMenu();},_onAddCondition:function(ev){ev.stopPropagation();this._appendProposition();},_onAddCustomFilterClick:function(ev){ev.preventDefault();ev.stopPropagation();this._toggleCustomFilterMenu();},_onApplyClick:function(ev){ev.stopPropagation();this._commitSearch();},_onBootstrapClose:function(){this._super.apply(this,arguments);this.generatorMenuIsOpen=false;this._renderGeneratorMenu();},_onConfirmProposition:function(ev){ev.stopPropagation();this._commitSearch();},_onRemoveProposition:function(ev){ev.stopPropagation();this.propositions=_.without(this.propositions,ev.target);if(!this.propositions.length){this.$('.o_apply_filter').prop('disabled',true);}
ev.target.destroy();},});return FilterMenu;});;

/* /web/static/src/js/views/control_panel/search/groupby_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.GroupByMenu',function(require){"use strict";var config=require('web.config');var controlPanelViewParameters=require('web.controlPanelViewParameters');var core=require('web.core');var DropdownMenu=require('web.DropdownMenu');var _t=core._t;var QWeb=core.qweb;var DEFAULT_INTERVAL=controlPanelViewParameters.DEFAULT_INTERVAL;var GROUPABLE_TYPES=controlPanelViewParameters.GROUPABLE_TYPES;var INTERVAL_OPTIONS=controlPanelViewParameters.INTERVAL_OPTIONS;var GroupByMenu=DropdownMenu.extend({events:_.extend({},DropdownMenu.prototype.events,{'click .o_add_custom_group':'_onAddCustomGroupClick','click button.o_apply_group':'_onButtonApplyClick','click .o_group_selector':'_onGroupSelectorClick',}),init:function(parent,groupBys,fields,options){var self=this;options=options||{};this._super(parent,groupBys);this.fields=fields;this.generatorMenuIsOpen=false;this.groupableFields=[];_.each(fields,function(field,name){if(field.sortable&&name!=="id"&&_.contains(GROUPABLE_TYPES,field.type)){self.groupableFields.push(_.extend({},field,{name:name,}));}});this.groupableFields=_.sortBy(this.groupableFields,'string');this.presentedFields=this._setPresentedFields(groupBys);this.isMobile=config.device.isMobile;this.dropdownCategory='groupby';this.dropdownTitle=_t('Group By');this.dropdownIcon='fa fa-bars';this.dropdownSymbol=this.isMobile&&!options.noSymbol?'fa fa-chevron-right float-right mt4':false;if(options.headerStyle==='primary'){this.dropdownStyle={el:{class:'btn-group o_group_by_menu o_dropdown',attrs:{'role':'group'}},mainButton:{class:'btn btn-primary dropdown-toggle'},};}
INTERVAL_OPTIONS=INTERVAL_OPTIONS.map(function(option){return _.extend(option,{description:option.description.toString()});});},start:function(){this.$menu=this.$('.o_dropdown_menu');this.$menu.addClass('o_group_by_menu');this._renderGeneratorMenu();return this._super.apply(this,arguments);},update:function(groupBys){this._super.apply(this,arguments);this.presentedFields=this._setPresentedFields(groupBys);this._renderGeneratorMenu();},_addGroupby:function(fieldName){var field=this.presentedFields.find(function(field){return field.name===fieldName;});var groupBy={type:'groupBy',description:field.string,fieldName:fieldName,fieldType:field.type,};if(_.contains(['date','datetime'],field.type)){groupBy.hasOptions=true;groupBy.options=INTERVAL_OPTIONS;groupBy.defaultOptionId=DEFAULT_INTERVAL;groupBy.currentOptionIds=new Set([]);}
this.trigger_up('new_groupBy',groupBy);},_renderGeneratorMenu:function(){this.$el.find('.o_generator_menu').remove();var $generatorMenu=QWeb.render('GroupByMenuGenerator',{widget:this});this.$menu.append($generatorMenu);this.$addCustomGroup=this.$menu.find('.o_add_custom_group');this.$groupSelector=this.$menu.find('.o_group_selector');},_setPresentedFields:function(groupBys){return this.groupableFields.filter(function(field){var groupByFields=_.pluck(groupBys,'fieldName');return!_.contains(groupByFields,field.name);});},_toggleCustomGroupMenu:function(){this.generatorMenuIsOpen=!this.generatorMenuIsOpen;this._renderGeneratorMenu();if(this.generatorMenuIsOpen){this.$groupSelector.focus();}},_onAddCustomGroupClick:function(ev){ev.preventDefault();ev.stopPropagation();this._toggleCustomGroupMenu();},_onBootstrapClose:function(){this._super.apply(this,arguments);this.generatorMenuIsOpen=false;this._renderGeneratorMenu();},_onButtonApplyClick:function(ev){ev.stopPropagation();var fieldName=this.$groupSelector.val();this.generatorMenuIsOpen=false;this._addGroupby(fieldName);},_onGroupSelectorClick:function(ev){ev.stopPropagation();},});return GroupByMenu;});;

/* /web/static/src/js/views/control_panel/search/groupby_menu_mixin.js defined in bundle 'web.assets_backend' */
odoo.define('web.GroupByMenuMixin',function(require){"use strict";var GroupByMenu=require('web.GroupByMenu');var controlPanelViewParameters=require('web.controlPanelViewParameters');var GroupByMenuMixin={init:function(){this.custom_events=_.extend({},this.custom_events,{menu_item_clicked:'_onMenuItemClicked',item_option_clicked:'_onItemOptionClicked',});},_addGroupByMenu:function($node,groupableFields){this.sortedFieldNames=Object.keys(groupableFields).sort();this.groupableFields=groupableFields;const groupBys=this._getGroupBys(this.model.get().groupBy);this.groupByMenu=new GroupByMenu(this,groupBys,this.groupableFields,{noSymbol:true});return this.groupByMenu.insertAfter($node.find('div:first'));},_normalizeActiveGroupBys:function(activeGroupBys){return activeGroupBys.map(gb=>{const fieldName=gb.split(':')[0];const field=this.groupableFields[fieldName];const ngb={fieldName:fieldName};if(_.contains(['date','datetime'],field.type)){ngb.interval=gb.split(':')[1]||controlPanelViewParameters.DEFAULT_INTERVAL;}
return ngb;});},_setGroupby:function(groupBys){},_getGroupBys:function(activeGroupBys){const groupBysNormalized=this._normalizeActiveGroupBys(activeGroupBys);return this.sortedFieldNames.map(fieldName=>{const field=this.groupableFields[fieldName];const groupByActivity=groupBysNormalized.filter(gb=>(gb.fieldName===fieldName));const groupBy={id:fieldName,isActive:groupByActivity.length?true:false,description:field.string,};if(_.contains(['date','datetime'],field.type)){groupBy.hasOptions=true;groupBy.options=controlPanelViewParameters.INTERVAL_OPTIONS;groupBy.currentOptionIds=groupByActivity.length?new Set(groupByActivity.map(gb=>gb.interval)):new Set([]);}
return groupBy;});},_onItemOptionClicked:function(ev){const fieldName=ev.data.id;const optionId=ev.data.optionId;const activeGroupBys=this.model.get().groupBy;const groupBysNormalized=this._normalizeActiveGroupBys(activeGroupBys);const index=groupBysNormalized.findIndex(ngb=>ngb.fieldName===fieldName&&ngb.interval===optionId);if(index===-1){activeGroupBys.push(fieldName+':'+optionId);}else{activeGroupBys.splice(index,1);}
this._setGroupby(activeGroupBys);this.groupByMenu.update(this._getGroupBys(activeGroupBys));},_onMenuItemClicked:function(ev){const fieldName=ev.data.id;const activeGroupBys=this.model.get().groupBy;const groupByFieldNames=activeGroupBys.map(gb=>gb.split(':')[0]);const indexOfGroupby=groupByFieldNames.indexOf(fieldName);if(indexOfGroupby===-1){activeGroupBys.push(fieldName);}else{activeGroupBys.splice(indexOfGroupby,1);}
this._setGroupby(activeGroupBys);this.groupByMenu.update(this._getGroupBys(activeGroupBys));},};return GroupByMenuMixin;});;

/* /web/static/src/js/views/control_panel/search/time_range_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.TimeRangeMenu',function(require){"use strict";var config=require('web.config');var controlPanelViewParameters=require('web.controlPanelViewParameters');var Widget=require('web.Widget');var COMPARISON_TIME_RANGE_OPTIONS=controlPanelViewParameters.COMPARISON_TIME_RANGE_OPTIONS;var PERIOD_OPTIONS=controlPanelViewParameters.PERIOD_OPTIONS;var TimeRangeMenu=Widget.extend({template:'web.TimeRangeMenu',events:{'click .o_apply_range':'_onApplyButtonClick','click .o_comparison_checkbox':'_onCheckBoxClick',},init:function(parent,timeRanges){this._super.apply(this,arguments);this.isMobile=config.device.isMobile;this.symbol=this.isMobile?'fa fa-chevron-right float-right mt4':'caret';this.periodOptions=PERIOD_OPTIONS;this.comparisonTimeRangeOptions=COMPARISON_TIME_RANGE_OPTIONS;this.periodGroups=_.uniq(PERIOD_OPTIONS.map(function(option){return option.groupId;}));this.timeRanges=timeRanges;this.configuration={comparisonIsSelected:false,comparisonTimeRangeId:false,id:false,timeRangeId:false,};this._configure();},update:function(timeRanges){this.timeRanges=timeRanges;this._configure();this.renderElement();},_configure:function(){this.configuration=this.timeRanges.find(function(timeRange){return timeRange.isActive;})||this.configuration;this.configuration.comparisonIsSelected=!!this.configuration.comparisonTimeRangeId;},_onApplyButtonClick:function(){var id=this.$('.o_date_field_selector').val();var timeRangeId=this.$('.o_time_range_selector').val();var comparisonTimeRangeId=false;if(this.configuration.comparisonIsSelected){comparisonTimeRangeId=this.$('.o_comparison_time_range_selector').val();}
this.trigger_up('activate_time_range',{id:id,timeRangeId:timeRangeId,comparisonTimeRangeId:comparisonTimeRangeId});},_onCheckBoxClick:function(ev){ev.stopPropagation();this.configuration.comparisonIsSelected=this.$('.o_comparison_checkbox').prop('checked');this.$('.o_comparison_time_range_selector').toggleClass('o_hidden');this.$el.addClass('open');}});return TimeRangeMenu;});;

/* /web/static/src/js/views/control_panel/search/favorite_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.FavoriteMenu',function(require){"use strict";var config=require('web.config');var core=require('web.core');var Dialog=require('web.Dialog');var DropdownMenu=require('web.DropdownMenu');var favorites_submenus_registry=require('web.favorites_submenus_registry');var _t=core._t;var FavoriteMenu=DropdownMenu.extend({init:function(parent,favorites,action){this._super(parent,favorites);this.action=action;this.isMobile=config.device.isMobile;this.dropdownCategory='favorite';this.dropdownTitle=_t('Favorites');this.dropdownIcon='fa fa-star';this.dropdownSymbol=this.isMobile?'fa fa-chevron-right float-right mt4':false;this.dropdownStyle.mainButton.class='o_favorites_menu_button '+
this.dropdownStyle.mainButton.class;},start:function(){var self=this;var params={favorites:this.items,action:this.action,};this.$menu=this.$('.o_dropdown_menu');this.$menu.addClass('o_favorites_menu');this.subMenus=[];favorites_submenus_registry.values().forEach(function(SubMenu){var subMenu=new SubMenu(self,params);subMenu.appendTo(self.$menu);self.subMenus.push(subMenu);});},update:function(items){this._super.apply(this,arguments);_.invoke(this.subMenus,'update',{favorites:this.items});},_closeSubMenus:function(){_.invoke(this.subMenus,'closeMenu');},_onBootstrapClose:function(){this._super.apply(this,arguments);this._closeSubMenus();},_onTrashButtonClick:function(event){event.preventDefault();event.stopPropagation();var self=this;var id=$(event.currentTarget).data('id');var favorite=this.items.find(function(favorite){return favorite.id===id;});var globalWarning=_t("This filter is global and will be removed for everybody if you continue.");var warning=_t("Are you sure that you want to remove this filter?");var message=favorite.userId?warning:globalWarning;Dialog.confirm(self,message,{title:_t("Warning"),confirm_callback:function(){self.trigger_up('item_trashed',{id:id});},});},});return FavoriteMenu;});;

/* /web/static/src/js/views/control_panel/search/add_new_favorite_menu.js defined in bundle 'web.assets_backend' */
odoo.define('web.AddNewFavoriteMenu',function(require){"use strict";var core=require('web.core');var favoritesSubmenusRegistry=require('web.favorites_submenus_registry');var Widget=require('web.Widget');var _t=core._t;var AddNewFavoriteMenu=Widget.extend({template:'AddNewFavoriteMenu',events:_.extend({},Widget.prototype.events,{'click .o_save_favorite':'_onSaveFavoriteClick','click .o_add_favorite.o_menu_header':'_onMenuHeaderClick','click input[type="checkbox"]':'_onCheckboxClick','keyup .o_save_name input':'_onKeyUp',}),init:function(parent,params){this._super(parent);this.favorites=params.favorites;this.action=params.action;this.isOpen=false;},start:function(){this._render();return this._super.apply(this,arguments);},update:function(params){this.favorites=params.favorites;},closeMenu:function(){this.isOpen=false;this._render();},_render:function(){this.renderElement();if(this.isOpen){var $input=this.$('.o_favorite_name input.o_input');$input.val(this.action.name);$input.focus();}},_saveFavorite:function(){var self=this;var $inputs=this.$('input');var description=$inputs[0].value;var isDefault=$inputs[1].checked;var isShared=$inputs[2].checked;if(!description.length){this.do_warn(_t("Error"),_t("A name for your favorite is required."));$inputs[0].focus();return;}
var descriptionAlreadyExists=!!this.favorites.find(function(favorite){return favorite.description===description;});if(descriptionAlreadyExists){this.do_warn(_t("Error"),_t("Filter with same name already exists."));$inputs[0].focus();return;}
this.trigger_up('new_favorite',{type:'favorite',description:description,isDefault:isDefault,isShared:isShared,on_success:function(){self.generatorMenuIsOpen=false;},});this.closeMenu();},_toggleMenu:function(){this.isOpen=!this.isOpen;this._render();},_onCheckboxClick:function(ev){function mutuallyExclusive(elem){if(!elem.id)return false;return['use_by_default','share_all_users'].some(function(str){return elem.id.indexOf(str);});}
var $checkboxes=this.$('input[type="checkbox"]');var currentCheckBox=ev.target;if(mutuallyExclusive(currentCheckBox)){for(var i=0;i<$checkboxes.length;i++){var checkbox=$checkboxes[i];if(checkbox!==currentCheckBox&&mutuallyExclusive(checkbox)){checkbox.checked=false;}}}},_onKeyUp:function(ev){if(ev.which===$.ui.keyCode.ENTER){this._saveFavorite();}},_onMenuHeaderClick:function(ev){ev.preventDefault();ev.stopPropagation();this._toggleMenu();},_onSaveFavoriteClick:function(ev){ev.stopPropagation();this._saveFavorite();},});favoritesSubmenusRegistry.add('add_new_favorite_menu',AddNewFavoriteMenu,0);return AddNewFavoriteMenu;});;

/* /web/static/src/js/views/control_panel/search/control_panel_view_parameters.js defined in bundle 'web.assets_backend' */
odoo.define('web.controlPanelViewParameters',function(require){"use strict";var core=require('web.core');var _lt=core._lt;const DEFAULT_PERIOD='this_month';const PERIOD_OPTIONS=[{description:_lt('Last 7 Days'),optionId:'last_7_days',groupId:1},{description:_lt('Last 30 Days'),optionId:'last_30_days',groupId:1},{description:_lt('Last 365 Days'),optionId:'last_365_days',groupId:1},{description:_lt('Last 5 Years'),optionId:'last_5_years',groupId:1},{description:_lt('Today'),optionId:'today',groupId:2},{description:_lt('This Week'),optionId:'this_week',groupId:2},{description:_lt('This Month'),optionId:'this_month',groupId:2},{description:_lt('This Quarter'),optionId:'this_quarter',groupId:2},{description:_lt('This Year'),optionId:'this_year',groupId:2},{description:_lt('Yesterday'),optionId:'yesterday',groupId:3},{description:_lt('Last Week'),optionId:'last_week',groupId:3},{description:_lt('Last Month'),optionId:'last_month',groupId:3},{description:_lt('Last Quarter'),optionId:'last_quarter',groupId:3},{description:_lt('Last Year'),optionId:'last_year',groupId:3},];const MONTH_OPTIONS=[{optionId:'this_month',groupId:1,format:'MMMM',addParam:{},setParam:{},granularity:'month'},{optionId:'last_month',groupId:1,format:'MMMM',addParam:{months:-1},setParam:{},granularity:'month'},{optionId:'antepenultimate_month',groupId:1,format:'MMMM',addParam:{months:-2},setParam:{},granularity:'month'}]
const QUARTER_OPTIONS=[{optionId:'fourth_quarter',groupId:1,description:_lt("Q4"),addParam:{},setParam:{quarter:4},granularity:'quarter'},{optionId:'third_quarter',groupId:1,description:_lt("Q3"),addParam:{},setParam:{quarter:3},granularity:'quarter'},{optionId:'second_quarter',groupId:1,description:_lt("Q2"),addParam:{},setParam:{quarter:2},granularity:'quarter'},{optionId:'first_quarter',groupId:1,description:_lt("Q1"),addParam:{},setParam:{quarter:1},granularity:'quarter'}]
const YEAR_OPTIONS=[{optionId:'this_year',groupId:2,format:'YYYY',addParam:{},setParam:{},granularity:'year'},{optionId:'last_year',groupId:2,format:'YYYY',addParam:{years:-1},setParam:{},granularity:'year'},{optionId:'antepenultimate_year',groupId:2,format:'YYYY',addParam:{years:-2},setParam:{},granularity:'year'},];const OPTION_GENERATORS=[...MONTH_OPTIONS,...QUARTER_OPTIONS,...YEAR_OPTIONS];const GROUPABLE_TYPES=['many2one','char','boolean','selection','date','datetime','integer'];const DEFAULT_INTERVAL='month';const INTERVAL_OPTIONS=[{description:_lt('Year'),optionId:'year',groupId:1},{description:_lt('Quarter'),optionId:'quarter',groupId:1},{description:_lt('Month'),optionId:'month',groupId:1},{description:_lt('Week'),optionId:'week',groupId:1},{description:_lt('Day'),optionId:'day',groupId:1},];const DEFAULT_TIMERANGE=DEFAULT_PERIOD;const TIME_RANGE_OPTIONS=PERIOD_OPTIONS;const COMPARISON_TIME_RANGE_OPTIONS=[{description:_lt('Previous Period'),optionId:'previous_period'},{description:_lt('Previous Year'),optionId:'previous_year'}];return{COMPARISON_TIME_RANGE_OPTIONS:COMPARISON_TIME_RANGE_OPTIONS,DEFAULT_INTERVAL:DEFAULT_INTERVAL,DEFAULT_PERIOD:DEFAULT_PERIOD,DEFAULT_TIMERANGE:DEFAULT_TIMERANGE,GROUPABLE_TYPES:GROUPABLE_TYPES,INTERVAL_OPTIONS:INTERVAL_OPTIONS,OPTION_GENERATORS:OPTION_GENERATORS,PERIOD_OPTIONS:PERIOD_OPTIONS,TIME_RANGE_OPTIONS:TIME_RANGE_OPTIONS,YEAR_OPTIONS:YEAR_OPTIONS,};});;

/* /web/static/src/js/views/control_panel/search/favorites_submenus_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web.favorites_submenus_registry',function(require){"use strict";var Registry=require('web.Registry');return new Registry();});;

/* /web/static/src/js/views/control_panel/search/search_filters.js defined in bundle 'web.assets_backend' */
odoo.define('web.search_filters',function(require){"use strict";var core=require('web.core');var datepicker=require('web.datepicker');var field_utils=require('web.field_utils');var search_filters_registry=require('web.search_filters_registry');var Widget=require('web.Widget');var _t=core._t;var _lt=core._lt;var ExtendedSearchProposition=Widget.extend({template:'SearchView.extended_search.proposition',events:{'change .o_searchview_extended_prop_field':'changed','change .o_searchview_extended_prop_op':'operator_changed','click .o_searchview_extended_delete_prop':function(e){e.stopPropagation();this.trigger_up('remove_proposition');},'keyup .o_searchview_extended_prop_value':function(ev){if(ev.which===$.ui.keyCode.ENTER){this.trigger_up('confirm_proposition');}},},init:function(parent,fields){this._super(parent);this.fields=_(fields).chain().map(function(val,key){return _.extend({},val,{'name':key});}).filter(function(field){return!field.deprecated&&field.searchable;}).sortBy(function(field){return field.string;}).value();this.attrs={_:_,fields:this.fields,selected:null};this.value=null;},start:function(){var parent=this._super();parent.then(this.proxy('changed'));return parent;},changed:function(){var nval=this.$(".o_searchview_extended_prop_field").val();if(this.attrs.selected===null||this.attrs.selected===undefined||nval!==this.attrs.selected.name){this.select_field(_.detect(this.fields,function(x){return x.name===nval;}));}},operator_changed:function(e){this.value.show_inputs($(e.target));},select_field:function(field){var self=this;if(this.attrs.selected!==null&&this.attrs.selected!==undefined){this.value.destroy();this.value=null;this.$('.o_searchview_extended_prop_op').html('');}
this.attrs.selected=field;if(field===null||field===undefined){return;}
var type=field.type;var Field=search_filters_registry.getAny([type,"char"]);this.value=new Field(this,field);_.each(this.value.operators,function(operator){$('<option>',{value:operator.value}).text(String(operator.text)).appendTo(self.$('.o_searchview_extended_prop_op'));});var $value_loc=this.$('.o_searchview_extended_prop_value').show().empty();this.value.appendTo($value_loc);},get_filter:function(){if(this.attrs.selected===null||this.attrs.selected===undefined){return null;}
var field=this.attrs.selected,op_select=this.$('.o_searchview_extended_prop_op')[0],operator=op_select.options[op_select.selectedIndex];return{attrs:{domain:this.value.get_domain(field,operator),string:this.value.get_label(field,operator),},children:[],tag:'filter',};},});var Field=Widget.extend({init:function(parent,field){this._super(parent);this.field=field;},get_label:function(field,operator){var format;switch(operator.value){case'∃':case'∄':format=_t('%(field)s %(operator)s');break;default:format=_t('%(field)s %(operator)s "%(value)s"');break;}
return this.format_label(format,field,operator);},format_label:function(format,field,operator){return _.str.sprintf(format,{field:field.string,operator:operator.label||operator.text,value:this});},get_domain:function(field,operator){switch(operator.value){case'∃':return[[field.name,'!=',false]];case'∄':return[[field.name,'=',false]];default:return[[field.name,operator.value,this.get_value()]];}},show_inputs:function($operator){var $value=this.$el.parent();switch($operator.val()){case'∃':case'∄':$value.hide();break;default:$value.show();}},toString:function(){return this.get_value();}});var Char=Field.extend({tagName:'input',className:'o_input',attributes:{type:'text'},operators:[{value:"ilike",text:_lt("contains")},{value:"not ilike",text:_lt("doesn't contain")},{value:"=",text:_lt("is equal to")},{value:"!=",text:_lt("is not equal to")},{value:"∃",text:_lt("is set")},{value:"∄",text:_lt("is not set")}],get_value:function(){return this.$el.val();}});var DateTime=Field.extend({tagName:'span',attributes:{type:'datetime'},operators:[{value:"between",text:_lt("is between")},{value:"=",text:_lt("is equal to")},{value:"!=",text:_lt("is not equal to")},{value:">",text:_lt("is after")},{value:"<",text:_lt("is before")},{value:">=",text:_lt("is after or equal to")},{value:"<=",text:_lt("is before or equal to")},{value:"∃",text:_lt("is set")},{value:"∄",text:_lt("is not set")}],get_value:function(index){var value=this["datewidget_"+(index||0)].getValue();return value.add(-this.getSession().getTZOffset(value),'minutes');},get_domain:function(field,operator){switch(operator.value){case'∃':return[[field.name,'!=',false]];case'∄':return[[field.name,'=',false]];case'between':return[[field.name,'>=',this.get_value()],[field.name,'<=',this.get_value(1)]];default:return[[field.name,operator.value,this.get_value()]];}},show_inputs:function($operator){this._super.apply(this,arguments);if($operator.val()==="between"){this.datewidget_1.do_show();}else{this.datewidget_1.do_hide();}},toString:function(){var str=field_utils.format[this.attributes.type](this.get_value(),{type:this.attributes.type});var date_1_value=this.datewidget_1&&this.get_value(1);if(date_1_value){str+=_lt(" and ")+field_utils.format[this.attributes.type](date_1_value,{type:this.attributes.type});}
return str;},start:function(){return Promise.all([this._super.apply(this,arguments),this._create_new_widget("datewidget_0",'00:00:00','hh:mm:ss'),this._create_new_widget("datewidget_1",'23:59:59','hh:mm:ss'),]).then(()=>{if(this.operators[0].value!=="between"){this.datewidget_1.do_hide();}});},_create_new_widget:function(name,...time){this[name]=new(this._get_widget_class())(this);return this[name].appendTo(this.$el).then((function(){this[name].setValue(moment(...time));}).bind(this));},_get_widget_class:function(){return datepicker.DateTimeWidget;},});var Date=DateTime.extend({attributes:{type:'date'},operators:[{value:"=",text:_lt("is equal to")},{value:"!=",text:_lt("is not equal to")},{value:">",text:_lt("is after")},{value:"<",text:_lt("is before")},{value:">=",text:_lt("is after or equal to")},{value:"<=",text:_lt("is before or equal to")},{value:"between",text:_lt("is between")},{value:"∃",text:_lt("is set")},{value:"∄",text:_lt("is not set")}],get_value:function(index){return this["datewidget_"+(index||0)].getValue();},_get_widget_class:function(){return datepicker.DateWidget;},});var Integer=Field.extend({tagName:'input',className:'o_input',attributes:{type:'number',value:'0',},operators:[{value:"=",text:_lt("is equal to")},{value:"!=",text:_lt("is not equal to")},{value:">",text:_lt("greater than")},{value:"<",text:_lt("less than")},{value:">=",text:_lt("greater than or equal to")},{value:"<=",text:_lt("less than or equal to")},{value:"∃",text:_lt("is set")},{value:"∄",text:_lt("is not set")}],toString:function(){return this.$el.val();},get_value:function(){try{var val=this.$el.val();return field_utils.parse.integer(val===""?0:val);}catch(e){return"";}}});var Id=Integer.extend({operators:[{value:"=",text:_lt("is")}]});var Float=Field.extend({template:'SearchView.extended_search.proposition.float',operators:[{value:"=",text:_lt("is equal to")},{value:"!=",text:_lt("is not equal to")},{value:">",text:_lt("greater than")},{value:"<",text:_lt("less than")},{value:">=",text:_lt("greater than or equal to")},{value:"<=",text:_lt("less than or equal to")},{value:"∃",text:_lt("is set")},{value:"∄",text:_lt("is not set")}],init:function(parent){this._super(parent);this.decimal_point=_t.database.parameters.decimal_point;},toString:function(){return this.$el.val();},get_value:function(){try{var val=this.$el.val();return field_utils.parse.float(val===""?0.0:val);}catch(e){return"";}}});var Selection=Field.extend({template:'SearchView.extended_search.proposition.selection',operators:[{value:"=",text:_lt("is")},{value:"!=",text:_lt("is not")},{value:"∃",text:_lt("is set")},{value:"∄",text:_lt("is not set")}],toString:function(){var select=this.$el[0];var option=select.options[select.selectedIndex];return option.label||option.text;},get_value:function(){return this.$el.val();}});var Boolean=Field.extend({tagName:'span',operators:[{value:"=",text:_lt("is true")},{value:"!=",text:_lt("is false")}],get_label:function(field,operator){return this.format_label(_t('%(field)s %(operator)s'),field,operator);},get_value:function(){return true;}});return{Boolean:Boolean,Char:Char,Date:Date,DateTime:DateTime,ExtendedSearchProposition:ExtendedSearchProposition,Field:Field,Float:Float,Id:Id,Integer:Integer,Selection:Selection,};});;

/* /web/static/src/js/views/control_panel/search/search_filters_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web.search_filters_registry',function(require){"use strict";var Registry=require('web.Registry');return new Registry();});odoo.define('web._search_filters_registry',function(require){"use strict";var registry=require('web.search_filters_registry');var search_filters=require('web.search_filters');registry.add('boolean',search_filters.Boolean).add('char',search_filters.Char).add('date',search_filters.Date).add('datetime',search_filters.DateTime).add('float',search_filters.Float).add('id',search_filters.Id).add('integer',search_filters.Integer).add('many2many',search_filters.Char).add('many2one',search_filters.Char).add('monetary',search_filters.Float).add('one2many',search_filters.Char).add('text',search_filters.Char).add('selection',search_filters.Selection);});;

/* /web/static/src/js/views/search_panel.js defined in bundle 'web.assets_backend' */
odoo.define('web.SearchPanel',function(require){"use strict";var core=require('web.core');var Domain=require('web.Domain');var pyUtils=require('web.py_utils');var viewUtils=require('web.viewUtils');var Widget=require('web.Widget');var qweb=core.qweb;var defaultViewTypes=['kanban','tree'];function _processSearchPanelNode(node,fields){var sections={};node.children.forEach((childNode,index)=>{if(childNode.tag!=='field'){return;}
if(childNode.attrs.invisible==="1"){return;}
var fieldName=childNode.attrs.name;var type=childNode.attrs.select==='multi'?'filter':'category';var sectionId=_.uniqueId('section_');var section={color:childNode.attrs.color,description:childNode.attrs.string||fields[fieldName].string,fieldName:fieldName,icon:childNode.attrs.icon,id:sectionId,index:index,type:type,};if(section.type==='category'){section.icon=section.icon||'fa-folder';}else if(section.type==='filter'){section.disableCounters=!!pyUtils.py_eval(childNode.attrs.disable_counters||'0');section.domain=childNode.attrs.domain||'[]';section.groupBy=childNode.attrs.groupby;section.icon=section.icon||'fa-filter';}
sections[sectionId]=section;});return sections;}
var SearchPanel=Widget.extend({className:'o_search_panel',events:{'click .o_search_panel_category_value header':'_onCategoryValueClicked','click .o_search_panel_category_value .o_toggle_fold':'_onToggleFoldCategory','click .o_search_panel_filter_group .o_toggle_fold':'_onToggleFoldFilterGroup','change .o_search_panel_filter_value > div > input':'_onFilterValueChanged','change .o_search_panel_filter_group > div > input':'_onFilterGroupChanged',},init:function(parent,params){this._super.apply(this,arguments);this.categories=_.pick(params.sections,function(section){return section.type==='category';});this.filters=_.pick(params.sections,function(section){return section.type==='filter';});this.initialState=params.state;this.scrollTop=this.initialState&&this.initialState.scrollTop||null;this.defaultValues=params.defaultValues||{};if(params.defaultNoFilter){Object.keys(this.categories).forEach((categoryId)=>{var fieldName=this.categories[categoryId].fieldName;this.defaultValues[fieldName]=this.defaultValues[fieldName]||false;});}
this.fields=params.fields;this.model=params.model;this.className=params.classes.concat(['o_search_panel']).join(' ');this.searchDomain=params.searchDomain;},willStart:function(){var self=this;var loadCategoriesProm;if(this.initialState){this.filters=this.initialState.filters;this.categories=this.initialState.categories;}else{loadCategoriesProm=this._fetchCategories().then(function(){return self._fetchFilters().then(self._applyDefaultFilterValues.bind(self));});}
return Promise.all([loadCategoriesProm,this._super.apply(this,arguments)]);},start:function(){this._render();return this._super.apply(this,arguments);},on_attach_callback:function(){if(this.scrollTop!==null){this.el.scrollTop=this.scrollTop;}},computeSearchPanelParams:function(viewInfo,viewType){var searchPanelSections;var classes;if(viewInfo){var arch=viewUtils.parseArch(viewInfo.arch);viewType=viewType==='list'?'tree':viewType;arch.children.forEach(function(node){if(node.tag==='searchpanel'){var attrs=node.attrs;var viewTypes=defaultViewTypes;if(attrs.view_types){viewTypes=attrs.view_types.split(',');}
if(attrs.class){classes=attrs.class.split(' ');}
if(viewTypes.indexOf(viewType)!==-1){searchPanelSections=_processSearchPanelNode(node,viewInfo.fields);}}});}
return{sections:searchPanelSections,classes:classes,};},exportState:function(){return{categories:this.categories,filters:this.filters,scrollTop:this.el?this.el.scrollTop:null,};},getDomain:function(){return this._getCategoryDomain().concat(this._getFilterDomain());},importState:function(state){this.categories=state.categories||this.categories;this.filters=state.filters||this.filters;this.scrollTop=state.scrollTop;this._render();},update:function(params){var currentSearchDomainStr=JSON.stringify(this.searchDomain);var newSearchDomainStr=JSON.stringify(params.searchDomain);var filtersProm;if(this.needReload||(currentSearchDomainStr!==newSearchDomainStr)){this.needReload=false;this.searchDomain=params.searchDomain;filtersProm=this._fetchFilters();}
return Promise.resolve(filtersProm).then(this._render.bind(this));},_applyDefaultFilterValues:function(){var self=this;Object.keys(this.filters).forEach(function(filterId){var filter=self.filters[filterId];var defaultValues=self.defaultValues[filter.fieldName]||[];defaultValues.forEach(function(value){if(filter.values[value]){filter.values[value].checked=true;}});Object.keys(filter.groups||[]).forEach(function(groupId){self._updateFilterGroupState(filter.groups[groupId]);});});},_createCategoryTree:function(categoryId,values){var category=this.categories[categoryId];var parentField=category.parentField;category.values={};_.each(values,function(value){category.values[value.id]=_.extend({},value,{childrenIds:[],folded:true,parentId:value[parentField]&&value[parentField][0]||false,});});_.map(values,function(value){var value=category.values[value.id];var parentCategoryId=value.parentId;if(parentCategoryId&&parentCategoryId in category.values){category.values[parentCategoryId].childrenIds.push(value.id);}});category.rootIds=_.filter(_.map(values,function(value){return value.id;}),function(valueId){var value=category.values[valueId];return value.parentId===false;});var validValues=_.pluck(category.values,'id').concat([false]);var value=this._getCategoryDefaultValue(category,validValues);category.activeValueId=_.contains(validValues,value)?value:false;if(category.activeValueId){var parentValueIds=this._getAncestorValueIds(category,category.activeValueId);parentValueIds.forEach(function(parentValue){category.values[parentValue].folded=false;});}},_createFilterTree:function(filterId,values){var filter=this.filters[filterId];values.forEach(function(value){var oldValue=filter.values&&filter.values[value.id];value.checked=oldValue&&oldValue.checked||false;});filter.values={};var groupIds=[];if(filter.groupBy){var groups={};values.forEach(function(value){var groupId=value.group_id;if(!groups[groupId]){if(groupId){groupIds.push(groupId);}
groups[groupId]={folded:false,id:groupId,name:value.group_name,values:{},tooltip:value.group_tooltip,sequence:value.group_sequence,hex_color:value.group_hex_color,sortedValueIds:[],};var oldGroup=filter.groups&&filter.groups[groupId];groups[groupId].state=oldGroup&&oldGroup.state||false;groups[groupId].folded=oldGroup&&oldGroup.folded||false;}
groups[groupId].values[value.id]=value;groups[groupId].sortedValueIds.push(value.id);});filter.groups=groups;filter.sortedGroupIds=_.sortBy(groupIds,function(groupId){return groups[groupId].sequence||groups[groupId].name;});Object.keys(filter.groups).forEach(function(groupId){filter.values=_.extend(filter.values,filter.groups[groupId].values);});}else{values.forEach(function(value){filter.values[value.id]=value;});filter.sortedValueIds=values.map(function(value){return value.id;});}},_fetchCategories:function(){var self=this;var proms=Object.keys(this.categories).map(function(categoryId){var category=self.categories[categoryId];var field=self.fields[category.fieldName];var categoriesProm;if(field.type==='selection'){var values=field.selection.map(function(value){return{id:value[0],display_name:value[1]};});categoriesProm=Promise.resolve(values);}else{categoriesProm=self._rpc({method:'search_panel_select_range',model:self.model,args:[category.fieldName],}).then(function(result){category.parentField=result.parent_field;return result.values;});}
return categoriesProm.then(function(values){self._createCategoryTree(categoryId,values);});});return Promise.all(proms);},_fetchFilters:function(){var self=this;var evalContext={};Object.keys(this.categories).forEach(function(categoryId){var category=self.categories[categoryId];evalContext[category.fieldName]=category.activeValueId;});var categoryDomain=this._getCategoryDomain();var filterDomain=this._getFilterDomain();var proms=Object.keys(this.filters).map(function(filterId){var filter=self.filters[filterId];return self._rpc({method:'search_panel_select_multi_range',model:self.model,args:[filter.fieldName],kwargs:{category_domain:categoryDomain,comodel_domain:Domain.prototype.stringToArray(filter.domain,evalContext),disable_counters:filter.disableCounters,filter_domain:filterDomain,group_by:filter.groupBy||false,search_domain:self.searchDomain,},}).then(function(values){self._createFilterTree(filterId,values);});});return Promise.all(proms);},_getCategoryDefaultValue:function(category,validValues){var value=this.defaultValues[category.fieldName];if(!_.contains(validValues,value)){var storageKey=this._getLocalStorageKey(category);return this.call('local_storage','getItem',storageKey);}
return value;},_getCategoryDomain:function(){var self=this;function categoryToDomain(domain,categoryId){var category=self.categories[categoryId];if(category.activeValueId){var field=self.fields[category.fieldName];var op=(field.type==='many2one'&&category.parentField)?'child_of':'=';domain.push([category.fieldName,op,category.activeValueId]);}
return domain;}
return Object.keys(this.categories).reduce(categoryToDomain,[]);},_getFilterDomain:function(){var self=this;function getCheckedValueIds(values){return Object.keys(values).reduce(function(checkedValues,valueId){if(values[valueId].checked){checkedValues.push(values[valueId].id);}
return checkedValues;},[]);}
function filterToDomain(domain,filterId){var filter=self.filters[filterId];if(filter.groups){Object.keys(filter.groups).forEach(function(groupId){var group=filter.groups[groupId];var checkedValues=getCheckedValueIds(group.values);if(checkedValues.length){domain.push([filter.fieldName,'in',checkedValues]);}});}else if(filter.values){var checkedValues=getCheckedValueIds(filter.values);if(checkedValues.length){domain.push([filter.fieldName,'in',checkedValues]);}}
return domain;}
return Object.keys(this.filters).reduce(filterToDomain,[]);},_getLocalStorageKey:function(category){return'searchpanel_'+this.model+'_'+category.fieldName;},_getAncestorValueIds:function(category,categoryValueId){var categoryValue=category.values[categoryValueId];var parentId=categoryValue.parentId;if(parentId){return[parentId].concat(this._getAncestorValueIds(category,parentId));}
return[];},_notifyDomainUpdated:function(){this.needReload=true;this.trigger_up('search_panel_domain_updated',{domain:this.getDomain(),});},_render:function(){var self=this;this.$el.empty();var categories=Object.keys(this.categories).map(function(categoryId){return self.categories[categoryId];});var filters=Object.keys(this.filters).map(function(filterId){return self.filters[filterId];});var sections=categories.concat(filters).sort(function(s1,s2){return s1.index-s2.index;});sections.forEach(function(section){if(Object.keys(section.values).length){if(section.type==='category'){self.$el.append(self._renderCategory(section));}else{self.$el.append(self._renderFilter(section));}}});},_renderCategory:function(category){return qweb.render('SearchPanel.Category',{category:category});},_renderFilter:function(filter){var $filter=$(qweb.render('SearchPanel.Filter',{filter:filter}));Object.keys(filter.groups||{}).forEach(function(groupId){var state=filter.groups[groupId].state;if(groupId!=='false'&&state==='indeterminate'){$filter.find('.o_search_panel_filter_group[data-group-id='+groupId+'] input').get(0).indeterminate=true;}});return $filter;},_updateFilterGroupState:function(group){var valuePartition=_.partition(Object.keys(group.values),function(valueId){return group.values[valueId].checked;});if(valuePartition[0].length&&valuePartition[1].length){group.state='indeterminate';}else if(valuePartition[0].length){group.state='checked';}else{group.state='unchecked';}},_onCategoryValueClicked:function(ev){ev.stopPropagation();var $item=$(ev.currentTarget).closest('.o_search_panel_category_value');var category=this.categories[$item.data('categoryId')];var valueId=$item.data('id')||false;category.activeValueId=valueId;if(category.values[valueId]){category.values[valueId].folded=!category.values[valueId].folded;}
var storageKey=this._getLocalStorageKey(category);this.call('local_storage','setItem',storageKey,valueId);this._notifyDomainUpdated();},_onFilterGroupChanged:function(ev){ev.stopPropagation();var $item=$(ev.target).closest('.o_search_panel_filter_group');var filter=this.filters[$item.data('filterId')];var groupId=$item.data('groupId');var group=filter.groups[groupId];group.state=group.state==='checked'?'unchecked':'checked';Object.keys(group.values).forEach(function(valueId){group.values[valueId].checked=group.state==='checked';});this._notifyDomainUpdated();},_onFilterValueChanged:function(ev){ev.stopPropagation();var $item=$(ev.target).closest('.o_search_panel_filter_value');var valueId=$item.data('valueId');var filter=this.filters[$item.data('filterId')];var value=filter.values[valueId];value.checked=!value.checked;var group=filter.groups&&filter.groups[value.group_id];if(group){this._updateFilterGroupState(group);}
this._notifyDomainUpdated();},_onToggleFoldCategory:function(ev){ev.preventDefault();ev.stopPropagation();var $item=$(ev.currentTarget).closest('.o_search_panel_category_value');var category=this.categories[$item.data('categoryId')];var valueId=$item.data('id');category.values[valueId].folded=!category.values[valueId].folded;this._render();},_onToggleFoldFilterGroup:function(ev){ev.preventDefault();ev.stopPropagation();var $item=$(ev.currentTarget).closest('.o_search_panel_filter_group');var filter=this.filters[$item.data('filterId')];var groupId=$item.data('groupId');filter.groups[groupId].folded=!filter.groups[groupId].folded;this._render();},});return SearchPanel;});;

/* /web/static/src/js/views/field_manager_mixin.js defined in bundle 'web.assets_backend' */
odoo.define('web.FieldManagerMixin',function(require){"use strict";var BasicModel=require('web.BasicModel');var concurrency=require('web.concurrency');var FieldManagerMixin={custom_events:{field_changed:'_onFieldChanged',load:'_onLoad',mutexify:'_onMutexify',},init:function(model){this.model=model||new BasicModel(this);this.mutex=new concurrency.Mutex();},_applyChanges:function(dataPointID,changes,event){var self=this;var options=_.pick(event.data,'context','doNotSetDirty','notifyChange','viewType','allowWarning');return this.model.notifyChanges(dataPointID,changes,options).then(function(result){if(event.data.force_save){return self.model.save(dataPointID).then(function(){return self._confirmSave(dataPointID);}).guardedCatch(function(){return self._rejectSave(dataPointID);});}else if(options.notifyChange!==false){return self._confirmChange(dataPointID,result,event);}});},_confirmChange:function(id,fields,event){return Promise.resolve();},_confirmSave:function(id){return Promise.resolve();},_rejectSave:function(id){return Promise.resolve();},_onFieldChanged:function(event){event.stopPropagation();return this._applyChanges(event.data.dataPointID,event.data.changes,event).then(event.data.onSuccess||function(){}).guardedCatch(event.data.onFailure||function(){});},_onLoad:function(event){var self=this;event.stopPropagation();var data=event.data;if(!data.on_success){return;}
var params={};if('limit'in data){params.limit=data.limit;}
if('offset'in data){params.offset=data.offset;}
this.mutex.exec(function(){return self.model.reload(data.id,params).then(function(db_id){data.on_success(self.model.get(db_id));});});},_onMutexify:function(ev){ev.stopPropagation();this.mutex.exec(ev.data.action);},};return FieldManagerMixin;});;

/* /web/static/src/js/views/select_create_controllers_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web.select_create_controllers_registry',function(require){"use strict";return{};});odoo.define('web._select_create_controllers_registry',function(require){"use strict";var KanbanController=require('web.KanbanController');var ListController=require('web.ListController');var select_create_controllers_registry=require('web.select_create_controllers_registry');var SelectCreateKanbanController=KanbanController.extend({_onOpenRecord:function(ev){var selectedRecord=this.model.get(ev.data.id);this.trigger_up('select_record',{id:selectedRecord.res_id,display_name:selectedRecord.data.display_name,});},});var SelectCreateListController=ListController.extend({_onOpenRecord:function(ev){var selectedRecord=this.model.get(ev.data.id);this.trigger_up('select_record',{id:selectedRecord.res_id,display_name:selectedRecord.data.display_name,});},});_.extend(select_create_controllers_registry,{SelectCreateListController:SelectCreateListController,SelectCreateKanbanController:SelectCreateKanbanController,});});;

/* /web/static/src/js/views/standalone_field_manager_mixin.js defined in bundle 'web.assets_backend' */
odoo.define('web.StandaloneFieldManagerMixin',function(require){"use strict";var FieldManagerMixin=require('web.FieldManagerMixin');var StandaloneFieldManagerMixin=_.extend({},FieldManagerMixin,{init:function(){FieldManagerMixin.init.apply(this,arguments);this.registeredWidgets={};},_confirmChange:function(id,fields,event){var result=FieldManagerMixin._confirmChange.apply(this,arguments);var record=this.model.get(id);_.each(this.registeredWidgets[id],function(widget,fieldName){if(_.contains(fields,fieldName)){widget.reset(record,event);}});return result;},_registerWidget:function(datapointID,fieldName,widget){if(!this.registeredWidgets[datapointID]){this.registeredWidgets[datapointID]={};}
this.registeredWidgets[datapointID][fieldName]=widget;},});return StandaloneFieldManagerMixin;});;

/* /web/static/src/js/views/view_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web.view_registry',function(require){"use strict";var Registry=require('web.Registry');return new Registry();});odoo.define('web._view_registry',function(require){"use strict";var FormView=require('web.FormView');var GraphView=require('web.GraphView');var KanbanView=require('web.KanbanView');var ListView=require('web.ListView');var PivotView=require('web.PivotView');var CalendarView=require('web.CalendarView');var view_registry=require('web.view_registry');view_registry.add('form',FormView).add('list',ListView).add('kanban',KanbanView).add('graph',GraphView).add('pivot',PivotView).add('calendar',CalendarView);});;

/* /web/static/src/js/views/view_dialogs.js defined in bundle 'web.assets_backend' */
odoo.define('web.view_dialogs',function(require){"use strict";var config=require('web.config');var core=require('web.core');var Dialog=require('web.Dialog');var dom=require('web.dom');var view_registry=require('web.view_registry');var select_create_controllers_registry=require('web.select_create_controllers_registry');var _t=core._t;var ViewDialog=Dialog.extend({custom_events:_.extend({},Dialog.prototype.custom_events,{push_state:'_onPushState',}),init:function(parent,options){options=options||{};options.fullscreen=config.device.isMobile;options.dialogClass=options.dialogClass||''+' o_act_window';this._super(parent,$.extend(true,{},options));this.res_model=options.res_model||null;this.domain=options.domain||[];this.context=options.context||{};this.options=_.extend(this.options||{},options||{});},_onPushState:function(event){event.stopPropagation();},});var FormViewDialog=ViewDialog.extend({init:function(parent,options){var self=this;options=options||{};this.res_id=options.res_id||null;this.on_saved=options.on_saved||(function(){});this.on_remove=options.on_remove||(function(){});this.context=options.context;this.model=options.model;this.parentID=options.parentID;this.recordID=options.recordID;this.shouldSaveLocally=options.shouldSaveLocally;this.readonly=options.readonly;this.deletable=options.deletable;this.disable_multiple_selection=options.disable_multiple_selection;var oBtnRemove='o_btn_remove';var multi_select=!_.isNumber(options.res_id)&&!options.disable_multiple_selection;var readonly=_.isNumber(options.res_id)&&options.readonly;if(!options.buttons){options.buttons=[{text:(readonly?_t("Close"):_t("Discard")),classes:"btn-secondary o_form_button_cancel",close:true,click:function(){if(!readonly){self.form_view.model.discardChanges(self.form_view.handle,{rollback:self.shouldSaveLocally,});}},}];if(!readonly){options.buttons.unshift({text:(multi_select?_t("Save & Close"):_t("Save")),classes:"btn-primary",click:function(){self._save().then(self.close.bind(self));}});if(multi_select){options.buttons.splice(1,0,{text:_t("Save & New"),classes:"btn-primary",click:function(){self._save().then(self.form_view.createRecord.bind(self.form_view,self.parentID)).then(function(){if(!self.deletable){return;}
self.deletable=false;self.buttons=self.buttons.filter(function(button){return button.classes.split(' ').indexOf(oBtnRemove)<0;});self.set_buttons(self.buttons);self.set_title(_t("Create ")+_.str.strRight(self.title,_t("Open: ")));});},});}
var multi=options.disable_multiple_selection;if(!multi&&this.deletable){this._setRemoveButtonOption(options,oBtnRemove);}}}
this._super(parent,options);},open:function(){var self=this;var _super=this._super.bind(this);var FormView=view_registry.get('form');var fields_view_def;if(this.options.fields_view){fields_view_def=Promise.resolve(this.options.fields_view);}else{fields_view_def=this.loadFieldView(this.res_model,this.context,this.options.view_id,'form');}
fields_view_def.then(function(viewInfo){var refinedContext=_.pick(self.context,function(value,key){return key.indexOf('_view_ref')===-1;});var formview=new FormView(viewInfo,{modelName:self.res_model,context:refinedContext,ids:self.res_id?[self.res_id]:[],currentId:self.res_id||undefined,index:0,mode:self.res_id&&self.options.readonly?'readonly':'edit',footerToButtons:true,default_buttons:false,withControlPanel:false,model:self.model,parentID:self.parentID,recordID:self.recordID,});return formview.getController(self);}).then(function(formView){self.form_view=formView;var fragment=document.createDocumentFragment();if(self.recordID&&self.shouldSaveLocally){self.model.save(self.recordID,{savePoint:true});}
return self.form_view.appendTo(fragment).then(function(){self.opened().then(function(){var $buttons=$('<div>');self.form_view.renderButtons($buttons);if($buttons.children().length){self.$footer.empty().append($buttons.contents());}
dom.append(self.$el,fragment,{callbacks:[{widget:self.form_view}],in_DOM:true,});});return _super();});});return this;},_focusOnClose:function(){var isFocusSet=false;this.trigger_up('form_dialog_discarded',{callback:function(isFocused){isFocusSet=isFocused;},});return isFocusSet;},_remove:function(){return Promise.resolve(this.on_remove());},_save:function(){var self=this;return this.form_view.saveRecord(this.form_view.handle,{stayInEdit:true,reload:false,savePoint:this.shouldSaveLocally,viewType:'form',}).then(function(changedFields){var record=self.form_view.model.get(self.form_view.handle);return self.on_saved(record,!!changedFields.length);});},_setRemoveButtonOption(options,btnClasses){const self=this;options.buttons.push({text:_t("Remove"),classes:'btn-secondary '+btnClasses,click:function(){self._remove().then(self.close.bind(self));}});},});var SelectCreateDialog=ViewDialog.extend({custom_events:_.extend({},ViewDialog.prototype.custom_events,{select_record:function(event){if(!this.options.readonly){this.on_selected([event.data]);this.close();}},selection_changed:function(event){event.stopPropagation();this.$footer.find(".o_select_button").prop('disabled',!event.data.selection.length);},}),init:function(){this._super.apply(this,arguments);_.defaults(this.options,{initial_view:'search'});this.on_selected=this.options.on_selected||(function(){});this.on_closed=this.options.on_closed||(function(){});this.initialIDs=this.options.initial_ids;this.viewType='list';},open:function(){if(this.options.initial_view!=="search"){return this.create_edit_record();}
var self=this;var _super=this._super.bind(this);var viewRefID=this.viewType==='kanban'?(this.options.kanban_view_ref&&JSON.parse(this.options.kanban_view_ref)||false):false;return this.loadViews(this.res_model,this.context,[[viewRefID,this.viewType],[false,'search']],{}).then(this.setup.bind(this)).then(function(fragment){self.opened().then(function(){dom.append(self.$el,fragment,{callbacks:[{widget:self.viewController}],in_DOM:true,});self.set_buttons(self.__buttons);});return _super();});},setup:function(fieldsViews){var self=this;var fragment=document.createDocumentFragment();var domain=this.domain;if(this.initialIDs){domain=domain.concat([['id','in',this.initialIDs]]);}
var ViewClass=view_registry.get(this.viewType);var viewOptions={};var selectCreateController;if(this.viewType==='list'){_.extend(viewOptions,{hasSelectors:!this.options.disable_multiple_selection,readonly:true,},this.options.list_view_options);selectCreateController=select_create_controllers_registry.SelectCreateListController;}
if(this.viewType==='kanban'){_.extend(viewOptions,{noDefaultGroupby:true,selectionMode:this.options.selectionMode||false,});selectCreateController=select_create_controllers_registry.SelectCreateKanbanController;}
var view=new ViewClass(fieldsViews[this.viewType],_.extend(viewOptions,{action:{controlPanelFieldsView:fieldsViews.search,help:_.str.sprintf("<p>%s</p>",_t("No records found!")),},action_buttons:false,dynamicFilters:this.options.dynamicFilters,context:this.context,domain:domain,modelName:this.res_model,withBreadcrumbs:false,withSearchPanel:false,}));view.setController(selectCreateController);return view.getController(this).then(function(controller){self.viewController=controller;self._prepareButtons();return self.viewController.appendTo(fragment);}).then(function(){return fragment;});},close:function(){this._super.apply(this,arguments);this.on_closed();},create_edit_record:function(){var self=this;var dialog=new FormViewDialog(this,_.extend({},this.options,{on_saved:function(record){var values=[{id:record.res_id,display_name:record.data.display_name||record.data.name,}];self.on_selected(values);},})).open();dialog.on('closed',this,this.close);return dialog;},_focusOnClose:function(){var isFocusSet=false;this.trigger_up('form_dialog_discarded',{callback:function(isFocused){isFocusSet=isFocused;},});return isFocusSet;},_prepareButtons:function(){this.__buttons=[{text:_t("Cancel"),classes:'btn-secondary o_form_button_cancel',close:true,}];if(!this.options.no_create){this.__buttons.unshift({text:_t("Create"),classes:'btn-primary',click:this.create_edit_record.bind(this)});}
if(!this.options.disable_multiple_selection){this.__buttons.unshift({text:_t("Select"),classes:'btn-primary o_select_button',disabled:true,close:true,click:function(){var records=this.viewController.getSelectedRecords();var values=_.map(records,function(record){return{id:record.res_id,display_name:record.data.display_name,};});this.on_selected(values);},});}},});return{FormViewDialog:FormViewDialog,SelectCreateDialog:SelectCreateDialog,};});;

/* /web/static/src/js/views/view_utils.js defined in bundle 'web.assets_backend' */
odoo.define('web.viewUtils',function(require){"use strict";var dom=require('web.dom');var utils=require('web.utils');var viewUtils={getGroupValue:function(group,groupByField){var groupedByField=group.fields[groupByField];switch(groupedByField.type){case'many2one':return group.res_id||false;case'selection':var descriptor=_.find(groupedByField.selection,function(option){return option[1]===group.value;});return descriptor&&descriptor[0];case'char':case'boolean':return group.value;default:return false;}},isQuickCreateEnabled:function(list){var groupByField=list.groupedBy[0]&&list.groupedBy[0].split(':')[0];if(!groupByField){return false;}
var availableTypes=['char','boolean','many2one','selection'];if(!_.contains(availableTypes,list.fields[groupByField].type)){return false;}
return true;},parseArch:function(arch){var doc=$.parseXML(arch).documentElement;var stripWhitespaces=doc.nodeName.toLowerCase()!=='kanban';return utils.xml_to_json(doc,stripWhitespaces);},renderButtonFromNode:function(node,options){var btnOptions={attrs:_.omit(node.attrs,'icon','string','type','attrs','modifiers','options','effect'),icon:node.attrs.icon,};if(options&&options.extraClass){var classes=btnOptions.attrs.class?btnOptions.attrs.class.split(' '):[];btnOptions.attrs.class=_.uniq(classes.concat(options.extraClass.split(' '))).join(' ');}
var str=(node.attrs.string||'').replace(/_/g,'');if(str){if(options&&options.textAsTitle){btnOptions.attrs.title=str;}else{btnOptions.text=str;}}
return dom.renderButton(btnOptions);},};return viewUtils;});;

/* /web/static/src/js/views/form/form_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.FormRenderer',function(require){"use strict";var BasicRenderer=require('web.BasicRenderer');var config=require('web.config');var core=require('web.core');var dom=require('web.dom');var viewUtils=require('web.viewUtils');var _t=core._t;var qweb=core.qweb;var FormRenderer=BasicRenderer.extend({className:"o_form_view",events:_.extend({},BasicRenderer.prototype.events,{'click .o_notification_box .oe_field_translate':'_onTranslate','click .o_notification_box .close':'_onTranslateNotificationClose','click .oe_title, .o_inner_group':'_onClick','shown.bs.tab a[data-toggle="tab"]':'_onNotebookTabChanged',}),custom_events:_.extend({},BasicRenderer.prototype.custom_events,{'navigation_move':'_onNavigationMove','activate_next_widget':'_onActivateNextWidget',}),INNER_GROUP_COL:2,OUTER_GROUP_COL:2,init:function(){this._super.apply(this,arguments);this.idsForLabels={};this.lastActivatedFieldIndex=-1;this.alertFields={};},start:function(){if(config.device.size_class<=config.device.SIZES.XS){this.$el.addClass('o_xxs_form_view');}
return this._super.apply(this,arguments);},on_attach_callback:function(){this._isInDom=true;_.forEach(this.allFieldWidgets,function(widgets){_.invoke(widgets,'on_attach_callback');});this._super.apply(this,arguments);},on_detach_callback:function(){this._isInDom=false;this._super.apply(this,arguments);},autofocus:function(){if(this.mode==='readonly'){var firstPrimaryFormButton=this.$el.find('button.btn-primary:enabled:visible:first()');if(firstPrimaryFormButton.length>0){return firstPrimaryFormButton.focus();}else{return;}}
var focusWidget=this.defaultFocusField;if(!focusWidget||!focusWidget.isFocusable()){var widgets=this.allFieldWidgets[this.state.id];for(var i=0;i<(widgets?widgets.length:0);i++){var widget=widgets[i];if(widget.isFocusable()){focusWidget=widget;break;}}}
if(focusWidget){return focusWidget.activate({noselect:true,noAutomaticCreate:true});}},canBeSaved:function(){var self=this;var fieldNames=this._super.apply(this,arguments);var $labels=this.$('label');$labels.removeClass('o_field_invalid');_.each(fieldNames,function(fieldName){var idForLabel=self.idsForLabels[fieldName];if(idForLabel){$labels.filter('[for='+idForLabel+']').addClass('o_field_invalid');}});return fieldNames;},updateAlertFields:function(alertFields){this.alertFields[this.state.res_id]=_.extend(this.alertFields[this.state.res_id]||{},alertFields);this.displayTranslationAlert();},displayTranslationAlert:function(){this.$('.o_notification_box').remove();if(this.alertFields[this.state.res_id]){var $notification=$(qweb.render('notification-box',{type:'info'})).append(qweb.render('translation-alert',{fields:this.alertFields[this.state.res_id],lang:_t.database.parameters.name}));if(this.$('.o_form_statusbar').length){this.$('.o_form_statusbar').after($notification);}else{this.$el.prepend($notification);}}},confirmChange:function(){var self=this;return this._super.apply(this,arguments).then(function(resetWidgets){_.each(resetWidgets,function(widget){self._setIDForLabel(widget,self.idsForLabels[widget.name]);});if(self.$('.o_field_invalid').length){self.canBeSaved(self.state.id);}
return resetWidgets;});},disableButtons:function(){this.$('.o_statusbar_buttons button, .oe_button_box button').attr('disabled',true);},enableButtons:function(){this.$('.o_statusbar_buttons button, .oe_button_box button').removeAttr('disabled');},focusLastActivatedWidget:function(){if(this.lastActivatedFieldIndex!==-1){return this._activateNextFieldWidget(this.state,this.lastActivatedFieldIndex-1,{noAutomaticCreate:true});}
return false;},getLocalState:function(){var state={};this.$('div.o_notebook').each(function(){var $notebook=$(this);var name=$notebook.data('name');var index=-1;$notebook.find('.nav-link').each(function(i){if($(this).hasClass('active')){index=i;}});state[name]=index;});return state;},resetLastActivatedField:function(){this.lastActivatedFieldIndex=-1;},setLocalState:function(state){this.$('div.o_notebook').each(function(){var $notebook=$(this);var name=$notebook.data('name');if(name in state){var $page=$notebook.find('> ul > li').eq(state[name]);if(!$page.hasClass('o_invisible_modifier')){$page.find('a[data-toggle="tab"]').click();}}});},updateState:function(state,params){this.mode=(params&&'mode'in params)?params.mode:this.mode;if(params.fieldNames){return this.confirmChange(state,state.id,params.fieldNames);}
return this._super.apply(this,arguments);},_activateNextFieldWidget:function(record,currentIndex){if((currentIndex+1)>=(this.allFieldWidgets[record.id]||[]).length){this.trigger_up('focus_control_button');this.lastActivatedFieldIndex=-1;}else{var activatedIndex=this._super.apply(this,arguments);if(activatedIndex===-1){this.trigger_up('focus_control_button');this.lastActivatedFieldIndex=-1;}
else{this.lastActivatedFieldIndex=activatedIndex;}}
return this.lastActivatedFieldIndex;},_addButtonTooltip:function(node,$button){var self=this;$button.tooltip({title:function(){return qweb.render('WidgetButton.tooltip',{debug:config.isDebug(),state:self.state,node:node,});},});},_addOnClickAction:function($el,node){if(node.attrs.special||node.attrs.confirm||node.attrs.type||$el.hasClass('oe_stat_button')){var self=this;$el.click(function(){self.trigger_up('button_clicked',{attrs:node.attrs,record:self.state,});});}},_getIDForLabel:function(name){var idForLabel=this.idsForLabels[name];if(!idForLabel){idForLabel=_.uniqueId('o_field_input_');this.idsForLabels[name]=idForLabel;}
return idForLabel;},_getRecord:function(recordId){return this.state.id===recordId?this.state:null;},_postProcessField:function(widget,node){this._super.apply(this,arguments);this._setIDForLabel(widget,this._getIDForLabel(node.attrs.name));if(JSON.parse(node.attrs.default_focus||"0")){this.defaultFocusField=widget;}},_renderButtonBox:function(node){var self=this;var $result=$('<'+node.tag+'>',{class:'o_not_full'});var nextDefIndex=this.defs.length;var buttons=_.map(node.children,function(child){if(child.tag==='button'){return self._renderStatButton(child);}else{return self._renderNode(child);}});var $tempWrapper=$('<div>');_.each(buttons,function($button){$button.appendTo($tempWrapper);});var defs=this.defs.slice(nextDefIndex);Promise.all(defs).then(function(){buttons=$tempWrapper.children();var buttons_partition=_.partition(buttons,function(button){return $(button).is('.o_invisible_modifier');});var invisible_buttons=buttons_partition[0];var visible_buttons=buttons_partition[1];var nb_buttons=self._renderButtonBoxNbButtons();var unfolded_buttons=visible_buttons.slice(0,nb_buttons).concat(invisible_buttons);var folded_buttons=visible_buttons.slice(nb_buttons);if(folded_buttons.length===1){unfolded_buttons=buttons;folded_buttons=[];}
var full=(visible_buttons.length>nb_buttons);$result.toggleClass('o_full',full).toggleClass('o_not_full',!full);_.each(unfolded_buttons,function(button){$(button).appendTo($result);});if(folded_buttons.length){$result.append(dom.renderButton({attrs:{'class':'oe_stat_button o_button_more dropdown-toggle','data-toggle':'dropdown',},text:_t("More"),}));var $dropdown=$("<div>",{class:"dropdown-menu o_dropdown_more",role:"menu"});_.each(folded_buttons,function(button){$(button).addClass('dropdown-item').appendTo($dropdown);});$dropdown.appendTo($result);}});this._handleAttributes($result,node);this._registerModifiers(node,this.state,$result);return $result;},_renderButtonBoxNbButtons:function(){return[2,2,4,6][config.device.size_class]||7;},_renderGenericTag:function(node){var $result=$('<'+node.tag+'>',_.omit(node.attrs,'modifiers'));this._handleAttributes($result,node);this._registerModifiers(node,this.state,$result);$result.append(_.map(node.children,this._renderNode.bind(this)));return $result;},_renderHeaderButton:function(node){var $button=viewUtils.renderButtonFromNode(node);if($button.not('.btn-primary, .btn-secondary, .btn-link, .btn-success, .btn-info, .btn-warning, .btn-danger').length){$button.addClass('btn-secondary');}
this._addOnClickAction($button,node);this._handleAttributes($button,node);this._registerModifiers(node,this.state,$button);if(config.isDebug()||node.attrs.help){this._addButtonTooltip(node,$button);}
return $button;},_renderHeaderButtons:function(node){var self=this;var $buttons=$('<div>',{class:'o_statusbar_buttons'});_.each(node.children,function(child){if(child.tag==='button'){$buttons.append(self._renderHeaderButton(child));}
if(child.tag==='widget'){$buttons.append(self._renderTagWidget(child));}});return $buttons;},_renderInnerGroup:function(node){var self=this;var $result=$('<table/>',{class:'o_group o_inner_group'});var $tbody=$('<tbody />').appendTo($result);this._handleAttributes($result,node);this._registerModifiers(node,this.state,$result);var col=parseInt(node.attrs.col,10)||this.INNER_GROUP_COL;if(node.attrs.string){var $sep=$('<tr><td colspan="'+col+'" style="width: 100%;"><div class="o_horizontal_separator">'+node.attrs.string+'</div></td></tr>');$result.append($sep);}
var rows=[];var $currentRow=$('<tr/>');var currentColspan=0;node.children.forEach(function(child){if(child.tag==='newline'){rows.push($currentRow);$currentRow=$('<tr/>');currentColspan=0;return;}
var colspan=parseInt(child.attrs.colspan,10);var isLabeledField=(child.tag==='field'&&child.attrs.nolabel!=='1');if(!colspan){if(isLabeledField){colspan=2;}else{colspan=1;}}
var finalColspan=colspan-(isLabeledField?1:0);currentColspan+=colspan;if(currentColspan>col){rows.push($currentRow);$currentRow=$('<tr/>');currentColspan=colspan;}
var $tds;if(child.tag==='field'){$tds=self._renderInnerGroupField(child);}else if(child.tag==='label'){$tds=self._renderInnerGroupLabel(child);}else{if(child.tag==='div'&&child.attrs.class!==undefined&&child.attrs.class.includes('o_td_label'))
$tds=$('<td class="o_td_label"/>').append(self._renderNode(child));else
$tds=$('<td/>').append(self._renderNode(child));}
if(finalColspan>1){$tds.last().attr('colspan',finalColspan);}
$currentRow.append($tds);});rows.push($currentRow);_.each(rows,function($tr){var nonLabelColSize=100/(col-$tr.children('.o_td_label').length);_.each($tr.children(':not(.o_td_label)'),function(el){var $el=$(el);$el.css('width',((parseInt($el.attr('colspan'),10)||1)*nonLabelColSize)+'%');});$tbody.append($tr);});return $result;},_renderInnerGroupField:function(node){var $el=this._renderFieldWidget(node,this.state);var $tds=$('<td/>').append($el);if(node.attrs.nolabel!=='1'){var $labelTd=this._renderInnerGroupLabel(node);$tds=$labelTd.add($tds);}
return $tds;},_renderInnerGroupLabel:function(label){return $('<td/>',{class:'o_td_label'}).append(this._renderTagLabel(label));},_renderNode:function(node){var renderer=this['_renderTag'+_.str.capitalize(node.tag)];if(renderer){return renderer.call(this,node);}
if(node.tag==='div'&&node.attrs.name==='button_box'){return this._renderButtonBox(node);}
if(_.isString(node)){return node;}
return this._renderGenericTag(node);},_renderOuterGroup:function(node){var self=this;var $result=$('<div/>',{class:'o_group'});var nbCols=parseInt(node.attrs.col,10)||this.OUTER_GROUP_COL;var colSize=Math.max(1,Math.round(12/nbCols));if(node.attrs.string){var $sep=$('<div/>',{class:'o_horizontal_separator'}).text(node.attrs.string);$result.append($sep);}
$result.append(_.map(node.children,function(child){if(child.tag==='newline'){return $('<br/>');}
var $child=self._renderNode(child);$child.addClass('o_group_col_'+(colSize*(parseInt(child.attrs.colspan,10)||1)));return $child;}));this._handleAttributes($result,node);this._registerModifiers(node,this.state,$result);return $result;},_renderStatButton:function(node){var $button=viewUtils.renderButtonFromNode(node,{extraClass:'oe_stat_button',});$button.append(_.map(node.children,this._renderNode.bind(this)));if(node.attrs.help){this._addButtonTooltip(node,$button);}
this._addOnClickAction($button,node);this._handleAttributes($button,node);this._registerModifiers(node,this.state,$button);return $button;},_renderTabHeader:function(page,page_id){var $a=$('<a>',{'data-toggle':'tab',disable_anchor:'true',href:'#'+page_id,class:'nav-link',role:'tab',text:page.attrs.string,});return $('<li>',{class:'nav-item'}).append($a);},_renderTabPage:function(page,page_id){var $result=$('<div class="tab-pane" id="'+page_id+'">');$result.append(_.map(page.children,this._renderNode.bind(this)));return $result;},_renderTagButton:function(node){var $button=viewUtils.renderButtonFromNode(node);$button.append(_.map(node.children,this._renderNode.bind(this)));this._addOnClickAction($button,node);this._handleAttributes($button,node);this._registerModifiers(node,this.state,$button);if(config.isDebug()||node.attrs.help){this._addButtonTooltip(node,$button);}
return $button;},_renderTagField:function(node){return this._renderFieldWidget(node,this.state);},_renderTagForm:function(node){var $result=$('<div/>');if(node.attrs.class){$result.addClass(node.attrs.class);}
var allNodes=node.children.map(this._renderNode.bind(this));$result.append(allNodes);return $result;},_renderTagGroup:function(node){var isOuterGroup=_.some(node.children,function(child){return child.tag==='group';});if(!isOuterGroup){return this._renderInnerGroup(node);}
return this._renderOuterGroup(node);},_renderTagHeader:function(node){var self=this;var $statusbar=$('<div>',{class:'o_form_statusbar'});$statusbar.append(this._renderHeaderButtons(node));_.each(node.children,function(child){if(child.tag==='field'){var $el=self._renderFieldWidget(child,self.state);$statusbar.append($el);}});this._handleAttributes($statusbar,node);this._registerModifiers(node,this.state,$statusbar);return $statusbar;},_renderTagLabel:function(node){var self=this;var text;var fieldName=node.tag==='label'?node.attrs.for:node.attrs.name;if('string'in node.attrs){text=node.attrs.string;}else if(fieldName){text=this.state.fields[fieldName].string;}else{return this._renderGenericTag(node);}
var $result=$('<label>',{class:'o_form_label',for:this._getIDForLabel(fieldName),text:text,});if(node.tag==='label'){this._handleAttributes($result,node);}
var modifiersOptions;if(fieldName){modifiersOptions={callback:function(element,modifiers,record){var widgets=self.allFieldWidgets[record.id];var widget=_.findWhere(widgets,{name:fieldName});if(!widget){return;}
element.$el.toggleClass('o_form_label_empty',!!(record.data.id&&(modifiers.readonly||self.mode==='readonly')&&!widget.isSet()));},};}
this._registerModifiers(node,this.state,$result,modifiersOptions);return $result;},_renderTagNotebook:function(node){var self=this;var $headers=$('<ul class="nav nav-tabs">');var $pages=$('<div class="tab-content">');var autofocusTab=-1;var renderedTabs=_.map(node.children,function(child,index){var pageID=_.uniqueId('notebook_page_');var $header=self._renderTabHeader(child,pageID);var $page=self._renderTabPage(child,pageID);if(autofocusTab===-1&&child.attrs.autofocus==='autofocus'){autofocusTab=index;}
self._handleAttributes($header,child);$headers.append($header);$pages.append($page);return{$header:$header,$page:$page,node:child,};});if(renderedTabs.length){var tabToFocus=renderedTabs[Math.max(0,autofocusTab)];tabToFocus.$header.find('.nav-link').addClass('active');tabToFocus.$page.addClass('active');}
_.each(renderedTabs,function(tab){self._registerModifiers(tab.node,self.state,tab.$header,{callback:function(element,modifiers){var $link=element.$el.find('.nav-link');if(modifiers.invisible&&$link.hasClass('active')){$link.removeClass('active');tab.$page.removeClass('active');var $firstVisibleTab=$headers.find('li:not(.o_invisible_modifier):first() > a');$firstVisibleTab.addClass('active');$pages.find($firstVisibleTab.attr('href')).addClass('active');}},});});var $notebook=$('<div class="o_notebook">').data('name',node.attrs.name||'_default_').append($headers,$pages);this._registerModifiers(node,this.state,$notebook);this._handleAttributes($notebook,node);return $notebook;},_renderTagSeparator:function(node){var $separator=$('<div/>').addClass('o_horizontal_separator').text(node.attrs.string);this._handleAttributes($separator,node);this._registerModifiers(node,this.state,$separator);return $separator;},_renderTagSheet:function(node){this.has_sheet=true;var $sheet=$('<div>',{class:'clearfix position-relative o_form_sheet'});$sheet.append(node.children.map(this._renderNode.bind(this)));return $sheet;},_renderTagWidget:function(node){return this._renderWidget(this.state,node);},_renderView:function(){var self=this;var defs=[];this.defs=defs;var $form=this._renderNode(this.arch).addClass(this.className);delete this.defs;return Promise.all(defs).then(function(){self._updateView($form.contents());if(self.state.res_id in self.alertFields){self.displayTranslationAlert();}}).then(function(){if(self.lastActivatedFieldIndex>=0){self._activateNextFieldWidget(self.state,self.lastActivatedFieldIndex);}
if(self._isInDom){_.forEach(self.allFieldWidgets,function(widgets){_.invoke(widgets,'on_attach_callback');});}}).guardedCatch(function(){$form.remove();});},_updateView:function($newContent){var self=this;this.$el.html($newContent);this.$el.toggleClass('o_form_nosheet',!this.has_sheet);if(this.has_sheet){this.$el.children().not('.oe_chatter').wrapAll($('<div/>',{class:'o_form_sheet_bg'}));}
this.$el.toggleClass('o_form_editable',this.mode==='edit');this.$el.toggleClass('o_form_readonly',this.mode==='readonly');_.each(this.allFieldWidgets[this.state.id],function(widget){var idForLabel=self.idsForLabels[widget.name];var $widgets=self.$('.o_field_widget[name='+widget.name+']');var $label=idForLabel?self.$('.o_form_label[for='+idForLabel+']'):$();$label=$label.eq($widgets.index(widget.$el));if(config.isDebug()||widget.attrs.help||widget.field.help){self._addFieldTooltip(widget,$label);}
if(widget.attrs.widget==='upgrade_boolean'){widget.renderWithLabel($label);}});},_setIDForLabel:function(widget,idForLabel){widget.setIDForLabel(idForLabel);},_onActivateNextWidget:function(ev){ev.stopPropagation();var index=this.allFieldWidgets[this.state.id].indexOf(ev.data.target);this._activateNextFieldWidget(this.state,index);},_onClick:function(){if(this.mode==='readonly'){this.trigger_up('bounce_edit');}},_onNavigationMove:function(ev){ev.stopPropagation();var index;if(ev.data.direction==="next"){index=this.allFieldWidgets[this.state.id].indexOf(ev.data.target||ev.target);this._activateNextFieldWidget(this.state,index);}else if(ev.data.direction==="previous"){index=this.allFieldWidgets[this.state.id].indexOf(ev.data.target);this._activatePreviousFieldWidget(this.state,index);}},_onNotebookTabChanged:function(){core.bus.trigger('DOM_updated');},_onTranslate:function(ev){ev.preventDefault();this.trigger_up('translate',{fieldName:ev.target.name,id:this.state.id,isComingFromTranslationAlert:true,});},_onTranslateNotificationClose:function(ev){delete this.alertFields[this.state.res_id];},});return FormRenderer;});;

/* /web/static/src/js/views/form/form_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.FormController',function(require){"use strict";var BasicController=require('web.BasicController');var core=require('web.core');var Dialog=require('web.Dialog');var dialogs=require('web.view_dialogs');var Sidebar=require('web.Sidebar');var _t=core._t;var qweb=core.qweb;var FormController=BasicController.extend({custom_events:_.extend({},BasicController.prototype.custom_events,{bounce_edit:'_onBounceEdit',button_clicked:'_onButtonClicked',edited_list:'_onEditedList',open_one2many_record:'_onOpenOne2ManyRecord',open_record:'_onOpenRecord',toggle_column_order:'_onToggleColumnOrder',focus_control_button:'_onFocusControlButton',form_dialog_discarded:'_onFormDialogDiscarded',}),init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.actionButtons=params.actionButtons;this.disableAutofocus=params.disableAutofocus;this.footerToButtons=params.footerToButtons;this.defaultButtons=params.defaultButtons;this.hasSidebar=params.hasSidebar;this.toolbarActions=params.toolbarActions||{};},on_attach_callback:function(){this._super.apply(this,arguments);this.autofocus();},willRestore:function(){this.mode=this.model.isNew(this.handle)?'edit':'readonly';},autofocus:function(){if(!this.disableAutofocus){var isControlActivted=this.renderer.autofocus();if(!isControlActivted){if(this.$buttons&&this.mode==='readonly'){return this.$buttons.find('.o_form_button_edit').focus();}}}},createRecord:function(parentID){var self=this;var record=this.model.get(this.handle,{raw:true});return this.model.load({context:record.getContext(),fields:record.fields,fieldsInfo:record.fieldsInfo,modelName:this.modelName,parentID:parentID,res_ids:record.res_ids,type:'record',viewType:'form',}).then(function(handle){self.handle=handle;self._updateEnv();return self._setMode('edit');});},getSelectedIds:function(){var env=this.model.get(this.handle,{env:true});return env.currentId?[env.currentId]:[];},getTitle:function(){return this.model.getName(this.handle);},renderButtons:function($node){var $footer=this.footerToButtons?this.renderer.$('footer'):null;var mustRenderFooterButtons=$footer&&$footer.length;if(!this.defaultButtons&&!mustRenderFooterButtons){return;}
this.$buttons=$('<div/>');if(mustRenderFooterButtons){this.$buttons.append($footer);}else{this.$buttons.append(qweb.render("FormView.buttons",{widget:this}));this.$buttons.on('click','.o_form_button_edit',this._onEdit.bind(this));this.$buttons.on('click','.o_form_button_create',this._onCreate.bind(this));this.$buttons.on('click','.o_form_button_save',this._onSave.bind(this));this.$buttons.on('click','.o_form_button_cancel',this._onDiscard.bind(this));this._assignSaveCancelKeyboardBehavior(this.$buttons.find('.o_form_buttons_edit'));this.$buttons.find('.o_form_buttons_edit').tooltip({delay:{show:200,hide:0},title:function(){return qweb.render('SaveCancelButton.tooltip');},trigger:'manual',});this._updateButtons();}
this.$buttons.appendTo($node);},renderPager:function($node,options){options=_.extend({},options,{validate:this.canBeDiscarded.bind(this),});return this._super($node,options);},renderSidebar:function($node){var self=this;if(this.hasSidebar){var otherItems=[];if(this.archiveEnabled&&this.initialState.data.active!==undefined){var classname="o_sidebar_item_archive"+(this.initialState.data.active?"":" o_hidden")
otherItems.push({label:_t("Archive"),callback:function(){Dialog.confirm(self,_t("Are you sure that you want to archive this record?"),{confirm_callback:self._toggleArchiveState.bind(self,true),});},classname:classname,});classname="o_sidebar_item_unarchive"+(this.initialState.data.active?" o_hidden":"")
otherItems.push({label:_t("Unarchive"),callback:this._toggleArchiveState.bind(this,false),classname:classname,});}
if(this.is_action_enabled('delete')){otherItems.push({label:_t('Delete'),callback:this._onDeleteRecord.bind(this),});}
if(this.is_action_enabled('create')&&this.is_action_enabled('duplicate')){otherItems.push({label:_t('Duplicate'),callback:this._onDuplicateRecord.bind(this),});}
this.sidebar=new Sidebar(this,{editable:this.is_action_enabled('edit'),viewType:'form',env:{context:this.model.get(this.handle).getContext(),activeIds:this.getSelectedIds(),model:this.modelName,},actions:_.extend(this.toolbarActions,{other:otherItems}),});return this.sidebar.appendTo($node).then(function(){self._updateSidebar();});}
return Promise.resolve();},saveRecord:function(){var self=this;return this._super.apply(this,arguments).then(function(changedFields){self._setTitle(self.getTitle());self._updateEnv();if(_t.database.multi_lang&&changedFields.length){var fields=self.renderer.state.fields;var data=self.renderer.state.data;var alertFields={};for(var k=0;k<changedFields.length;k++){var field=fields[changedFields[k]];var fieldData=data[changedFields[k]];if(field.translate&&fieldData){alertFields[changedFields[k]]=field;}}
if(!_.isEmpty(alertFields)){self.renderer.updateAlertFields(alertFields);}}
return changedFields;});},update:function(params,options){if('currentId'in params&&!params.currentId){this.mode='edit';}
params=_.extend({viewType:'form',mode:this.mode},params);return this._super(params,options);},_archive:function(ids,archive){if(ids.length===0){return Promise.resolve();}
if(archive){return this.model.actionArchive(ids,this.handle).then(this.update.bind(this,{},{reload:false}));}else{return this.model.actionUnarchive(ids,this.handle).then(this.update.bind(this,{},{reload:false}));}},_assignSaveCancelKeyboardBehavior:function($saveCancelButtonContainer){var self=this;$saveCancelButtonContainer.children().on('keydown',function(e){switch(e.which){case $.ui.keyCode.ENTER:e.preventDefault();self.saveRecord();break;case $.ui.keyCode.ESCAPE:e.preventDefault();self._discardChanges();break;case $.ui.keyCode.TAB:if(!e.shiftKey&&e.target.classList.contains('btn-primary')){$saveCancelButtonContainer.tooltip('show');e.preventDefault();}
break;}});},_confirmSave:function(id){if(id===this.handle){if(this.mode==='readonly'){return this.reload();}else{return this._setMode('readonly');}}else{var record=this.model.get(this.handle);var containsChangedRecord=function(value){return _.isObject(value)&&(value.id===id||_.find(value.data,containsChangedRecord));};var changedFields=_.findKey(record.data,containsChangedRecord);return this.renderer.confirmChange(record,record.id,[changedFields]);}},_disableButtons:function(){this._super.apply(this,arguments);this.renderer.disableButtons();},_enableButtons:function(){this._super.apply(this,arguments);this.renderer.enableButtons();},_isPagerVisible:function(){return!this.model.isNew(this.handle);},_onDeletedRecords:function(){var state=this.model.get(this.handle,{raw:true});if(!state.res_ids.length){this.trigger_up('history_back');}else{this._super.apply(this,arguments);}},_pushState:function(state){state=state||{};var env=this.model.get(this.handle,{env:true});state.id=env.currentId;this._super(state);},_rejectSave:function(){if(this.mode==='readonly'){return this.reload();}
return this._super.apply(this,arguments);},_setMode:function(mode,recordID){if((recordID||this.handle)===this.handle){this.model.unfreezeOrder(this.handle);}
if(this.mode!==mode){this.renderer.resetLastActivatedField();}
return this._super.apply(this,arguments);},_update:function(){var self=this;return this._super.apply(this,arguments).then(function(){var title=self.getTitle();self._setTitle(title);self._updateButtons();self._updateSidebar();self.autofocus();});},_updateButtons:function(){if(this.$buttons){if(this.footerToButtons){var $footer=this.renderer.$('footer');if($footer.length){this.$buttons.empty().append($footer);}}
var edit_mode=(this.mode==='edit');this.$buttons.find('.o_form_buttons_edit').toggleClass('o_hidden',!edit_mode);this.$buttons.find('.o_form_buttons_view').toggleClass('o_hidden',edit_mode);}},_updateSidebar:function(){if(this.sidebar){this.sidebar.do_toggle(this.mode==='readonly');var archive_item=_.find(this.sidebar.items.other,function(item){return item.classname&&item.classname.includes('o_sidebar_item_archive')})
var unarchive_item=_.find(this.sidebar.items.other,function(item){return item.classname&&item.classname.includes('o_sidebar_item_unarchive')})
if(archive_item&&unarchive_item){if(this.renderer.state.data.active){archive_item.classname='o_sidebar_item_archive';unarchive_item.classname='o_sidebar_item_unarchive o_hidden';}else{archive_item.classname='o_sidebar_item_archive o_hidden';unarchive_item.classname='o_sidebar_item_unarchive';}}}},_onBounceEdit:function(){if(this.$buttons){this.$buttons.find('.o_form_button_edit').odooBounce();}},_onButtonClicked:function(ev){ev.stopPropagation();var self=this;var def;this._disableButtons();function saveAndExecuteAction(){return self.saveRecord(self.handle,{stayInEdit:true,}).then(function(){var record=self.model.get(ev.data.record.id);return self._callButtonAction(attrs,record);});}
var attrs=ev.data.attrs;if(attrs.confirm){def=new Promise(function(resolve,reject){Dialog.confirm(this,attrs.confirm,{confirm_callback:saveAndExecuteAction,}).on("closed",null,resolve);});}else if(attrs.special==='cancel'){def=this._callButtonAction(attrs,ev.data.record);}else if(!attrs.special||attrs.special==='save'){def=saveAndExecuteAction();}else{console.warn('Unhandled button event',ev);return;}
def.then(function(){self._enableButtons();if(attrs.close){self.trigger_up('close_dialog');}}).guardedCatch(this._enableButtons.bind(this));},_onCreate:function(){this.createRecord();},_onDeleteRecord:function(){this._deleteRecords([this.handle]);},_onDiscard:function(){this._discardChanges();},_onDuplicateRecord:function(){var self=this;this.model.duplicateRecord(this.handle).then(function(handle){self.handle=handle;self._updateEnv();self._setMode('edit');});},_onEdit:function(){this.mutex.getUnlockedDef().then(this._setMode.bind(this,'edit'));},_onEditedList:function(ev){ev.stopPropagation();if(ev.data.id){this.model.save(ev.data.id,{savePoint:true});}
this.model.freezeOrder(ev.data.id);},_onFocusControlButton:function(e){if(this.$buttons){e.stopPropagation();this.$buttons.find('.btn-primary:visible:first()').focus();}},_onFormDialogDiscarded:function(ev){ev.stopPropagation();var isFocused=this.renderer.focusLastActivatedWidget();if(ev.data.callback){ev.data.callback(_.str.toBool(isFocused));}},_onOpenOne2ManyRecord:async function(ev){ev.stopPropagation();var data=ev.data;var record;if(data.id){record=this.model.get(data.id,{raw:true});}
await this.model.mutex.getUnlockedDef();new dialogs.FormViewDialog(this,{context:data.context,domain:data.domain,fields_view:data.fields_view,model:this.model,on_saved:data.on_saved,on_remove:data.on_remove,parentID:data.parentID,readonly:data.readonly,deletable:record?data.deletable:false,recordID:record&&record.id,res_id:record&&record.res_id,res_model:data.field.relation,shouldSaveLocally:true,title:(record?_t("Open: "):_t("Create "))+(ev.target.string||data.field.string),}).open();},_onOpenRecord:function(ev){ev.stopPropagation();var self=this;var record=this.model.get(ev.data.id,{raw:true});new dialogs.FormViewDialog(self,{context:ev.data.context,fields_view:ev.data.fields_view,on_saved:ev.data.on_saved,on_remove:ev.data.on_remove,readonly:ev.data.readonly,deletable:ev.data.deletable,res_id:record.res_id,res_model:record.model,title:_t("Open: ")+ev.data.string,}).open();},_onSave:function(ev){ev.stopPropagation();var self=this;this._disableButtons();this.saveRecord().then(this._enableButtons.bind(this)).guardedCatch(this._enableButtons.bind(this));},_onToggleColumnOrder:function(ev){ev.stopPropagation();var self=this;this.model.setSort(ev.data.id,ev.data.name).then(function(){var field=ev.data.field;var state=self.model.get(self.handle);self.renderer.confirmChange(state,state.id,[field]);});},_toggleArchiveState:function(archive){this._archive([this.handle],archive);},});return FormController;});;

/* /web/static/src/js/views/form/form_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.FormView',function(require){"use strict";var BasicView=require('web.BasicView');var config=require('web.config');var Context=require('web.Context');var core=require('web.core');var FormController=require('web.FormController');var FormRenderer=require('web.FormRenderer');var _lt=core._lt;var FormView=BasicView.extend({config:_.extend({},BasicView.prototype.config,{Renderer:FormRenderer,Controller:FormController,}),display_name:_lt('Form'),icon:'fa-edit',multi_record:false,withSearchBar:false,searchMenuTypes:[],viewType:'form',init:function(viewInfo,params){var hasSidebar=params.hasSidebar;this._super.apply(this,arguments);var mode=params.mode||(params.currentId?'readonly':'edit');this.loadParams.type='record';if(hasSidebar===undefined){hasSidebar=params.hasSidebar;}
this.controllerParams.hasSidebar=hasSidebar;this.controllerParams.disableAutofocus=params.disable_autofocus;this.controllerParams.toolbarActions=viewInfo.toolbar;this.controllerParams.footerToButtons=params.footerToButtons;var defaultButtons='default_buttons'in params?params.default_buttons:true;this.controllerParams.defaultButtons=defaultButtons;this.controllerParams.mode=mode;this.rendererParams.mode=mode;},getController:function(parent){return this._loadSubviews(parent).then(this._super.bind(this,parent));},_extractParamsFromAction:function(action){var params=this._super.apply(this,arguments);var inDialog=action.target==='new';var inline=action.target==='inline';var fullscreen=action.target==='fullscreen';params.withControlPanel=!(inDialog||inline);params.footerToButtons=inDialog;params.hasSearchView=inDialog?false:params.hasSearchView;params.hasSidebar=!inDialog&&!inline;params.searchMenuTypes=inDialog?[]:params.searchMenuTypes;if(inDialog||inline||fullscreen){params.mode='edit';}else if(action.context&&action.context.form_view_initial_mode){params.mode=action.context.form_view_initial_mode;}
return params;},_loadSubviews:function(parent){var self=this;var defs=[];if(this.loadParams&&this.loadParams.fieldsInfo){var fields=this.loadParams.fields;_.each(this.loadParams.fieldsInfo.form,function(attrs,fieldName){var field=fields[fieldName];if(!field){return;}
if(field.type!=='one2many'&&field.type!=='many2many'){return;}
if(attrs.Widget.prototype.useSubview&&!attrs.__no_fetch&&!attrs.views[attrs.mode]){var context={};var regex=/'([a-z]*_view_ref)' *: *'(.*?)'/g;var matches;while(matches=regex.exec(attrs.context)){context[matches[1]]=matches[2];}
var refinedContext=_.pick(self.loadParams.context,function(value,key){return key.indexOf('_view_ref')===-1;});refinedContext.base_model_name=self.controllerParams.modelName;defs.push(parent.loadViews(field.relation,new Context(context,self.userContext,refinedContext).eval(),[[null,attrs.mode==='tree'?'list':attrs.mode]]).then(function(views){for(var viewName in views){attrs.views[viewName]=self._processFieldsView(views[viewName],viewName);attrs.views[viewName].fields=attrs.views[viewName].viewFields;self._processSubViewAttrs(attrs.views[viewName],attrs);}
self._setSubViewLimit(attrs);}));}else{self._setSubViewLimit(attrs);}});}
return Promise.all(defs);},_setSubViewLimit:function(attrs){var view=attrs.views&&attrs.views[attrs.mode];var limit=view&&view.arch.attrs.limit&&parseInt(view.arch.attrs.limit);if(!limit&&attrs.widget==='many2many_tags'){limit=1000;}
attrs.limit=limit||40;},});return FormView;});;

/* /web/static/src/js/views/graph/graph_model.js defined in bundle 'web.assets_backend' */
odoo.define('web.GraphModel',function(require){"use strict";var core=require('web.core');var _t=core._t;var AbstractModel=require('web.AbstractModel');return AbstractModel.extend({init:function(){this._super.apply(this,arguments);this.chart=null;},get:function(){var self=this;return _.extend({},this.chart,{comparisonFieldIndex:self._getComparisonFieldIndex(),});},load:function(params){var groupBys=params.context.graph_groupbys||params.groupBys;this.initialGroupBys=groupBys;this.fields=params.fields;this.modelName=params.modelName;this.chart={comparisonField:params.comparisonField,comparisonTimeRange:params.comparisonTimeRange,comparisonTimeRangeDescription:params.comparisonTimeRangeDescription,compare:params.compare,context:params.context,dataPoints:[],domain:params.domain,groupBy:params.groupedBy.length?params.groupedBy:groupBys,measure:params.context.graph_measure||params.measure,mode:params.context.graph_mode||params.mode,origins:[],stacked:params.stacked,timeRange:params.timeRange,timeRangeDescription:params.timeRangeDescription,};return this._loadGraph(this._getDomains());},reload:function(handle,params){if('context'in params){this.chart.context=params.context;this.chart.groupBy=params.context.graph_groupbys||this.chart.groupBy;this.chart.measure=params.context.graph_measure||this.chart.measure;this.chart.mode=params.context.graph_mode||this.chart.mode;var timeRangeMenuData=params.context.timeRangeMenuData;if(timeRangeMenuData){this.chart.comparisonField=timeRangeMenuData.comparisonField||undefined;this.chart.comparisonTimeRange=timeRangeMenuData.comparisonTimeRange||[];this.chart.compare=this.chart.comparisonTimeRange.length>0;this.chart.comparisonTimeRangeDescription=timeRangeMenuData.comparisonTimeRangeDescription;this.chart.timeRange=timeRangeMenuData.timeRange||[];this.chart.timeRangeDescription=timeRangeMenuData.timeRangeDescription;}else{this.chart.comparisonField=undefined;this.chart.comparisonTimeRange=[];this.chart.compare=false;this.chart.comparisonTimeRangeDescription=undefined;this.chart.timeRange=[];this.chart.timeRangeDescription=undefined;}}
if('domain'in params){this.chart.domain=params.domain;}
if('groupBy'in params){this.chart.groupBy=params.groupBy.length?params.groupBy:this.initialGroupBys;}
if('measure'in params){this.chart.measure=params.measure;}
if('mode'in params){this.chart.mode=params.mode;return Promise.resolve();}
if('stacked'in params){this.chart.stacked=params.stacked;return Promise.resolve();}
return this._loadGraph(this._getDomains());},_getComparisonFieldIndex:function(){var groupBys=this.chart.groupBy.map(function(gb){return gb.split(":")[0];});return groupBys.indexOf(this.chart.comparisonField);},_getDomains:function(){var domains=[this.chart.domain.concat(this.chart.timeRange)];this.chart.origins=[this.chart.timeRangeDescription||""];if(this.chart.compare){domains.push(this.chart.domain.concat(this.chart.comparisonTimeRange));this.chart.origins.push(this.chart.comparisonTimeRangeDescription);}
return domains;},_loadGraph:function(domains){var self=this;this.chart.dataPoints=[];var groupBy=this.chart.groupBy;var fields=_.map(groupBy,function(groupBy){return groupBy.split(':')[0];});if(this.chart.measure!=='__count__'){if(this.fields[this.chart.measure].type==='many2one'){fields=fields.concat(this.chart.measure+":count_distinct");}
else{fields=fields.concat(this.chart.measure);}}
var context=_.extend({fill_temporal:true},this.chart.context);var defs=[];domains.forEach(function(domain,originIndex){defs.push(self._rpc({model:self.modelName,method:'read_group',context:context,domain:domain,fields:fields,groupBy:groupBy,lazy:false,}).then(self._processData.bind(self,originIndex)));});return Promise.all(defs);},_processData:function(originIndex,rawData){var self=this;var isCount=this.chart.measure==='__count__';var labels;function getLabels(dataPt){return self.chart.groupBy.map(function(field){return self._sanitizeValue(dataPt[field],field.split(":")[0]);});}
rawData.forEach(function(dataPt){labels=getLabels(dataPt);var count=dataPt.__count||dataPt[self.chart.groupBy[0]+'_count']||0;var value=isCount?count:dataPt[self.chart.measure];if(value instanceof Array){value=1;}
self.chart.dataPoints.push({count:count,value:value,labels:labels,originIndex:originIndex,});});},_sanitizeValue:function(value,fieldName){if(value===false&&this.fields[fieldName].type!=='boolean'){return _t("Undefined");}
if(value instanceof Array){return value[1];}
if(fieldName&&(this.fields[fieldName].type==='selection')){var selected=_.where(this.fields[fieldName].selection,{0:value})[0];return selected?selected[1]:value;}
return value;},});});;

/* /web/static/src/js/views/graph/graph_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.GraphController',function(require){"use strict";var core=require('web.core');var AbstractController=require('web.AbstractController');var GroupByMenuMixin=require('web.GroupByMenuMixin');var qweb=core.qweb;var GraphController=AbstractController.extend(GroupByMenuMixin,{init:function(parent,model,renderer,params){GroupByMenuMixin.init.call(this);this._super.apply(this,arguments);this.measures=params.measures;this.isEmbedded=params.isEmbedded;this.groupableFields=params.groupableFields;},start:function(){this.$el.addClass('o_graph_controller');return this._super.apply(this,arguments);},destroy:function(){if(this.$buttons){this.$buttons.find('button').off().tooltip('dispose');}
this._super.apply(this,arguments);},getOwnedQueryParams:function(){var state=this.model.get();return{context:{graph_measure:state.measure,graph_mode:state.mode,graph_groupbys:state.groupBy,}};},renderButtons:function($node){if($node){var context={measures:_.sortBy(_.pairs(_.omit(this.measures,'__count__')),function(x){return x[1].string.toLowerCase();}),};this.$buttons=$(qweb.render('GraphView.buttons',context));this.$measureList=this.$buttons.find('.o_graph_measures_list');this.$buttons.find('button').tooltip();this.$buttons.click(this._onButtonClick.bind(this));this._updateButtons();this.$buttons.appendTo($node);if(this.isEmbedded){this._addGroupByMenu($node,this.groupableFields).then(function(){var groupByButton=$node.find('.o_dropdown_toggler_btn');groupByButton.removeClass("o_dropdown_toggler_btn btn btn-secondary dropdown-toggle");groupByButton.addClass("btn dropdown-toggle btn-outline-secondary");});}}},_setGroupby:function(groupBy){this.update({groupBy:groupBy});},_setMode:function(mode){this.update({mode:mode});this._updateButtons();},_setMeasure:function(measure){var self=this;this.update({measure:measure}).then(function(){self._updateButtons();});},_toggleStackMode:function(stacked){this.update({stacked:stacked});this._updateButtons();},_update:function(){this._updateButtons();return this._super.apply(this,arguments);},_updateButtons:function(){if(!this.$buttons){return;}
var state=this.model.get();this.$buttons.find('.o_graph_button').removeClass('active');this.$buttons.find('.o_graph_button[data-mode="'+state.mode+'"]').addClass('active');this.$buttons.find('.o_graph_button[data-mode="stack"]').data('stacked',state.stacked).toggleClass('active',state.stacked).toggleClass('o_hidden',state.mode!=='bar');_.each(this.$measureList.find('.dropdown-item'),function(item){var $item=$(item);$item.toggleClass('selected',$item.data('field')===state.measure);});},_onButtonClick:function(ev){var $target=$(ev.target);var field;if($target.hasClass('o_graph_button')){if(_.contains(['bar','line','pie'],$target.data('mode'))){this._setMode($target.data('mode'));}else if($target.data('mode')==='stack'){this._toggleStackMode(!$target.data('stacked'));}}else if($target.parents('.o_graph_measures_list').length){ev.preventDefault();ev.stopPropagation();field=$target.data('field');this._setMeasure(field);}},});return GraphController;});;

/* /web/static/src/js/views/graph/graph_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.GraphRenderer',function(require){"use strict";var AbstractRenderer=require('web.AbstractRenderer');var config=require('web.config');var core=require('web.core');var dataComparisonUtils=require('web.dataComparisonUtils');var fieldUtils=require('web.field_utils');var _t=core._t;var DateClasses=dataComparisonUtils.DateClasses;var qweb=core.qweb;var CHART_TYPES=['pie','bar','line'];var COLORS=["#1f77b4","#ff7f0e","#aec7e8","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5"];var COLOR_NB=COLORS.length;function hexToRGBA(hex,opacity){var result=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);var rgb=result.slice(1,4).map(function(n){return parseInt(n,16);}).join(',');return'rgba('+rgb+','+opacity+')';}
var FORMAT_OPTIONS={humanReadable:function(value){return Math.abs(value)>=1000;},minDigits:1,decimals:2,formatterCallback:function(str){return str;},};var NO_DATA=[_t('No data')];NO_DATA.isNoData=true;var MAX_LEGEND_LENGTH=4*(Math.max(1,config.device.size_class));return AbstractRenderer.extend({className:"o_graph_renderer",init:function(parent,state,params){this._super.apply(this,arguments);this.isEmbedded=params.isEmbedded||false;this.title=params.title||'';this.fields=params.fields||{};this.chart=null;this.chartId=_.uniqueId('chart');this.$legendTooltip=null;this.$tooltip=null;},updateState:function(){return this._super.apply(this,arguments);},on_attach_callback:function(){this._super.apply(this,arguments);this.isInDOM=true;this._render();},on_detach_callback:function(){this._super.apply(this,arguments);this.isInDOM=false;},_adjustTooltipHeight:function(maxTooltipHeight){var sizeOneLine=this.$tooltip.find('tbody tr')[0].clientHeight;var tbodySize=this.$tooltip.find('tbody')[0].clientHeight;var toKeep=Math.floor((maxTooltipHeight-(this.$tooltip[0].clientHeight-tbodySize))/sizeOneLine)-1;var $lines=this.$tooltip.find('tbody tr');var toRemove=$lines.length-toKeep;if(toRemove>0){$lines.slice(toKeep).remove();var tr=document.createElement('tr');var td=document.createElement('td');tr.classList.add('o_show_more');td.innerHTML=_t("...");tr.appendChild(td);this.$tooltip.find('tbody').append(tr);}},_customTooltip:function(tooltipModel){if(this.$tooltip){this.$tooltip.remove();}
if(tooltipModel.opacity===0){return;}
if(tooltipModel.dataPoints.length===0){return;}
const chartArea=this.chart.chartArea;const chartAreaLeft=chartArea.left;const chartAreaRight=chartArea.right;const chartAreaTop=chartArea.top;const rendererTop=this.$el[0].getBoundingClientRect().top;const maxTooltipLabelWidth=Math.floor((chartAreaRight-chartAreaLeft)/1.68)+'px';const tooltipItems=this._getTooltipItems(tooltipModel);this.$tooltip=$(qweb.render('GraphView.CustomTooltip',{measure:this.fields[this.state.measure].string,tooltipItems:tooltipItems,maxWidth:maxTooltipLabelWidth,})).css({top:'2px',left:'2px'});const $container=this.$el.find('.o_graph_canvas_container');$container.append(this.$tooltip);let top;const tooltipHeight=this.$tooltip[0].clientHeight;const minTopAllowed=Math.floor(chartAreaTop);const maxTopAllowed=Math.floor(window.innerHeight-rendererTop-tooltipHeight)-2;const y=Math.floor(tooltipModel.y);if(minTopAllowed<=maxTopAllowed){if(y<=maxTopAllowed){if(y>=minTopAllowed){top=y;}else{top=minTopAllowed;}}else{top=maxTopAllowed;}}else{top=minTopAllowed;const maxTooltipHeight=window.innerHeight-(rendererTop+chartAreaTop)-2;this._adjustTooltipHeight(maxTooltipHeight);}
this.$tooltip[0].style.top=Math.floor(top)+'px';this._fixTooltipLeftPosition(this.$tooltip[0],tooltipModel.x);},_filterDataPoints:function(){var dataPoints=[];if(_.contains(['bar','pie'],this.state.mode)){dataPoints=this.state.dataPoints.filter(function(dataPt){return dataPt.count>0;});}else if(this.state.mode==='line'){var counts=0;this.state.dataPoints.forEach(function(dataPt){if(dataPt.labels[0]!==_t("Undefined")){dataPoints.push(dataPt);}
counts+=dataPt.count;});if(counts===0){dataPoints=[];}}
return dataPoints;},_fixTooltipLeftPosition:function(tooltip,x){let left;const tooltipWidth=tooltip.clientWidth;const minLeftAllowed=Math.floor(this.chart.chartArea.left+2);const maxLeftAllowed=Math.floor(this.chart.chartArea.right-tooltipWidth-2);x=Math.floor(x);if(x<=maxLeftAllowed){if(x>=minLeftAllowed){left=x;}else{left=minLeftAllowed;}}else{left=maxLeftAllowed;}
tooltip.style.left=left+'px';},_formatValue:function(value){var measureField=this.fields[this.state.measure];var formatter=fieldUtils.format.float;var formatedValue=formatter(value,measureField,FORMAT_OPTIONS);return formatedValue;},_getColor:function(index){return COLORS[index%COLOR_NB];},_getDatasetDataLength:function(originIndex,defaultLength){if(_.contains(['bar','line'],this.state.mode)&&this.state.comparisonFieldIndex===0){return this.dateClasses.dateSets[originIndex].length;}
return defaultLength;},_getDatasetLabel:function(dataPt){if(_.contains(['bar','line'],this.state.mode)){var datasetLabel=dataPt.labels.slice(1).join("/");if(this.state.origins.length>1){datasetLabel=this.state.origins[dataPt.originIndex]+
(datasetLabel?('/'+datasetLabel):'');}
datasetLabel=datasetLabel||this.fields[this.state.measure].string;return datasetLabel;}
return this.state.origins[dataPt.originIndex];},_getElementOptions:function(){var elementOptions={};if(this.state.mode==='bar'){elementOptions.rectangle={borderWidth:1};}else if(this.state.mode==='line'){elementOptions.line={tension:0,fill:false,};}
return elementOptions;},_getDateClasses:function(dataPoints){var self=this;var dateSets=this.state.origins.map(function(){return[];});dataPoints.forEach(function(dataPt){dateSets[dataPt.originIndex].push(dataPt.labels[self.state.comparisonFieldIndex]);});dateSets=dateSets.map(function(dateSet){return _.uniq(dateSet);});return new DateClasses(dateSets);},_getLabel:function(dataPt){var i=this.state.comparisonFieldIndex;if(_.contains(['bar','line'],this.state.mode)){if(i===0){return[this.dateClasses.dateClass(dataPt.originIndex,dataPt.labels[i])];}else{return dataPt.labels.slice(0,1);}}else if(i===0){return Array.prototype.concat.apply([],[this.dateClasses.dateClass(dataPt.originIndex,dataPt.labels[i]),dataPt.labels.slice(i+1)]);}else{return dataPt.labels;}},_getLegendOptions:function(datasetsCount){var legendOptions={display:datasetsCount<=MAX_LEGEND_LENGTH,position:'top',onHover:this._onlegendTooltipHover.bind(this),onLeave:this._onLegendTootipLeave.bind(this),};var self=this;if(_.contains(['bar','line'],this.state.mode)){var referenceColor;if(this.state.mode==='bar'){referenceColor='backgroundColor';}else{referenceColor='borderColor';}
legendOptions.labels={generateLabels:function(chart){var data=chart.data;return data.datasets.map(function(dataset,i){return{text:self._shortenLabel(dataset.label),fullText:dataset.label,fillStyle:dataset[referenceColor],hidden:!chart.isDatasetVisible(i),lineCap:dataset.borderCapStyle,lineDash:dataset.borderDash,lineDashOffset:dataset.borderDashOffset,lineJoin:dataset.borderJoinStyle,lineWidth:dataset.borderWidth,strokeStyle:dataset[referenceColor],pointStyle:dataset.pointStyle,datasetIndex:i,};});},};}else{legendOptions.labels={generateLabels:function(chart){var data=chart.data;var metaData=data.datasets.map(function(dataset,index){return chart.getDatasetMeta(index).data;});return data.labels.map(function(label,i){var hidden=metaData.reduce(function(hidden,data){if(data[i]){hidden=hidden||data[i].hidden;}
return hidden;},false);var fullText=self._relabelling(label);var text=self._shortenLabel(fullText);return{text:text,fullText:fullText,fillStyle:label.isNoData?'#d3d3d3':self._getColor(i),hidden:hidden,index:i,};});},};}
return legendOptions;},_getScaleOptions:function(){var self=this;if(_.contains(['bar','line'],this.state.mode)){return{xAxes:[{type:'category',scaleLabel:{display:this.state.groupBy.length&&!this.isEmbedded,labelString:this.state.groupBy.length?this.fields[this.state.groupBy[0].split(':')[0]].string:'',},ticks:{callback:function(label){return self._relabelling(label);},},}],yAxes:[{type:'linear',scaleLabel:{display:!this.isEmbedded,labelString:this.fields[this.state.measure].string,},ticks:{callback:this._formatValue.bind(this),suggestedMax:0,suggestedMin:0,}}],};}
return{};},_getTooltipItemContent:function(item,data){var dataset=data.datasets[item.datasetIndex];var label=data.labels[item.index];var value;var boxColor;if(this.state.mode==='bar'){label=this._relabelling(label,dataset.originIndex);if(this.state.groupBy.length>1||this.state.origins.length>1){label=label+"/"+dataset.label;}
value=this._formatValue(item.yLabel);boxColor=dataset.backgroundColor;}else if(this.state.mode==='line'){label=this._relabelling(label,dataset.originIndex);if(this.state.groupBy.length>1||this.state.origins.length>1){label=label+"/"+dataset.label;}
value=this._formatValue(item.yLabel);boxColor=dataset.borderColor;}else{if(label.isNoData){value=this._formatValue(0);}else{value=this._formatValue(dataset.data[item.index]);}
label=this._relabelling(label,dataset.originIndex);if(this.state.origins.length>1){label=dataset.label+"/"+label;}
boxColor=dataset.backgroundColor[item.index];}
return{label:label,value:value,boxColor:boxColor,};},_getTooltipItems:function(tooltipModel){var self=this;var data=this.chart.config.data;var orderedItems=tooltipModel.dataPoints.sort(function(dPt1,dPt2){return dPt2.yLabel-dPt1.yLabel;});return orderedItems.reduce(function(acc,item){acc.push(self._getTooltipItemContent(item,data));return acc;},[]);},_getTooltipOptions:function(){var tooltipOptions={enabled:false,custom:this._customTooltip.bind(this),};if(this.state.mode==='line'){tooltipOptions.mode='index';tooltipOptions.intersect=false;}
return tooltipOptions;},_indexOf:function(list,label){var index=-1;for(var j=0;j<list.length;j++){var otherLabel=list[j];if(label.length===otherLabel.length){var equal=true;for(var i=0;i<label.length;i++){if(label[i]!==otherLabel[i]){equal=false;}}
if(equal){index=j;break;}}}
return index;},_prepareData:function(dataPoints){var self=this;var labels=dataPoints.reduce(function(acc,dataPt){var label=self._getLabel(dataPt);var index=self._indexOf(acc,label);if(index===-1){acc.push(label);}
return acc;},[]);var newDataset=function(datasetLabel,originIndex){var data=new Array(self._getDatasetDataLength(originIndex,labels.length)).fill(0);return{label:datasetLabel,data:data,originIndex:originIndex,};};var datasets=_.values(dataPoints.reduce(function(acc,dataPt){var datasetLabel=self._getDatasetLabel(dataPt);if(!(datasetLabel in acc)){acc[datasetLabel]=newDataset(datasetLabel,dataPt.originIndex);}
var label=self._getLabel(dataPt);var labelIndex=self._indexOf(labels,label);acc[datasetLabel].data[labelIndex]=dataPt.value;return acc;},{}));datasets=datasets.sort(function(dataset1,dataset2){return dataset1.originIndex-dataset2.originIndex;});return{datasets:datasets,labels:labels,};},_prepareOptions:function(datasetsCount){return{maintainAspectRatio:false,scales:this._getScaleOptions(),legend:this._getLegendOptions(datasetsCount),tooltips:this._getTooltipOptions(),elements:this._getElementOptions(),};},_relabelling:function(label,originIndex){if(label.isNoData){return label[0];}
var i=this.state.comparisonFieldIndex;if(_.contains(['bar','line'],this.state.mode)&&i===0){return this.dateClasses.representative(label,originIndex)||'';}else if(this.state.mode==='pie'&&i===0){var labelCopy=label.slice(0);if(originIndex!==undefined){labelCopy.splice(i,1,this.dateClasses.representative(label[i],originIndex));}else{labelCopy.splice(i,1,this.dateClasses.dateClassMembers(label[i]));}
return labelCopy.join('/');}
return label.join('/')||_t('Total');},_render:function(){if(this.chart){this.chart.destroy();}
this.$el.empty();if(!_.contains(CHART_TYPES,this.state.mode)){this.trigger_up('warning',{title:_t('Invalid mode for chart'),message:_t('Cannot render chart with mode : ')+this.state.mode});}
var dataPoints=this._filterDataPoints();if(!dataPoints.length&&this.state.mode!=='pie'){this.$el.append(qweb.render('View.NoContentHelper'));}else if(this.isInDOM){var $canvasContainer=$('<div/>',{class:'o_graph_canvas_container'});var $canvas=$('<canvas/>').attr('id',this.chartId);$canvasContainer.append($canvas);this.$el.append($canvasContainer);var i=this.state.comparisonFieldIndex;if(i===0){this.dateClasses=this._getDateClasses(dataPoints);}
if(this.state.mode==='bar'){this._renderBarChart(dataPoints);}else if(this.state.mode==='line'){this._renderLineChart(dataPoints);}else if(this.state.mode==='pie'){this._renderPieChart(dataPoints);}
this._renderTitle();}
return this._super.apply(this,arguments);},_renderBarChart:function(dataPoints){var self=this;var data=this._prepareData(dataPoints);data.datasets.forEach(function(dataset,index){dataset.stack=self.state.stacked?self.state.origins[dataset.originIndex]:undefined;var color=self._getColor(index);dataset.backgroundColor=color;});var options=this._prepareOptions(data.datasets.length);var ctx=document.getElementById(this.chartId);this.chart=new Chart(ctx,{type:'bar',data:data,options:options,});},_renderLineChart:function(dataPoints){var self=this;var data=this._prepareData(dataPoints);data.datasets.forEach(function(dataset,index){if(self.state.groupBy.length<=1&&self.state.origins.length>1){if(dataset.originIndex===0){dataset.fill='origin';dataset.backgroundColor=hexToRGBA(COLORS[0],0.4);dataset.borderColor=hexToRGBA(COLORS[0],1);}else if(dataset.originIndex===1){dataset.borderColor=hexToRGBA(COLORS[1],1);}else{dataset.borderColor=self._getColor(index);}}else{dataset.borderColor=self._getColor(index);}
if(data.labels.length===1){dataset.data.unshift(undefined);}
dataset.pointBackgroundColor=dataset.borderColor;dataset.pointBorderColor='rgba(0,0,0,0.2)';});if(data.datasets.length===1){const dataset=data.datasets[0];dataset.fill='origin';dataset.backgroundColor=hexToRGBA(COLORS[0],0.4);}
data.labels=data.labels.length>1?data.labels:Array.prototype.concat.apply([],[[['']],data.labels,[['']]]);var options=this._prepareOptions(data.datasets.length);var ctx=document.getElementById(this.chartId);this.chart=new Chart(ctx,{type:'line',data:data,options:options,});},_renderPieChart:function(dataPoints){var self=this;var allNegative=true;var someNegative=false;var allZero=true;dataPoints.forEach(function(datapt){allNegative=allNegative&&(datapt.value<0);someNegative=someNegative||(datapt.value<0);allZero=allZero&&(datapt.value===0);});if(someNegative&&!allNegative){this.$el.empty();this.$el.append(qweb.render('View.NoContentHelper',{title:_t("Invalid data"),description:_t("Pie chart cannot mix positive and negative numbers. "+"Try to change your domain to only display positive results"),}));return;}
if(allZero&&!this.isEmbedded&&this.state.origins.length===1){this.$el.empty();this.$el.append(qweb.render('View.NoContentHelper',{title:_t("Invalid data"),description:_t("Pie chart cannot display all zero numbers.. "+"Try to change your domain to display positive results"),}));return;}
var data={};var colors=[];if(allZero){data.labels=[NO_DATA];data.datasets=this.state.origins.map(function(origin){return{label:origin,data:[1],backgroundColor:['#d3d3d3'],};});}else{data=this._prepareData(dataPoints);colors=data.labels.map(function(label,index){return self._getColor(index);});data.datasets.forEach(function(dataset){dataset.backgroundColor=colors;dataset.borderColor='rgba(255,255,255,0.6)';});var representedOriginIndexes=data.datasets.map(function(dataset){return dataset.originIndex;});var addNoDataToLegend=false;var fakeData=(new Array(data.labels.length)).concat([1]);this.state.origins.forEach(function(origin,originIndex){if(!_.contains(representedOriginIndexes,originIndex)){data.datasets.splice(originIndex,0,{label:origin,data:fakeData,backgroundColor:colors.concat(['#d3d3d3']),});addNoDataToLegend=true;}});if(addNoDataToLegend){data.labels.push(NO_DATA);}}
var options=this._prepareOptions(data.datasets.length);var ctx=document.getElementById(this.chartId);this.chart=new Chart(ctx,{type:'pie',data:data,options:options,});},_renderTitle:function(){if(this.title){this.$el.prepend($('<label/>',{text:this.title,}));}},_shortenLabel:function(label){var groups=label.split("/");var shortLabel=groups.slice(0,3).join("/");if(shortLabel.length>30){shortLabel=shortLabel.slice(0,30)+'...';}else if(groups.length>3){shortLabel=shortLabel+'/...';}
return shortLabel;},_onlegendTooltipHover:function(e,legendItem){if(legendItem.text===legendItem.fullText||this.$legendTooltip){return;}
const chartAreaLeft=this.chart.chartArea.left;const chartAreaRight=this.chart.chartArea.right;const rendererTop=this.$el[0].getBoundingClientRect().top;this.$legendTooltip=$('<div>',{class:"o_tooltip_legend",text:legendItem.fullText,css:{maxWidth:Math.floor((chartAreaRight-chartAreaLeft)/1.68)+'px',top:(e.clientY-rendererTop)+'px',}});const $container=this.$el.find('.o_graph_canvas_container');$container.append(this.$legendTooltip);this._fixTooltipLeftPosition(this.$legendTooltip[0],e.clientX);},_onLegendTootipLeave:function(){if(this.$legendTooltip){this.$legendTooltip.remove();this.$legendTooltip=null;}},});});;

/* /web/static/src/js/views/graph/graph_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.GraphView',function(require){"use strict";var AbstractView=require('web.AbstractView');var core=require('web.core');var GraphModel=require('web.GraphModel');var Controller=require('web.GraphController');var GraphRenderer=require('web.GraphRenderer');var _t=core._t;var _lt=core._lt;var controlPanelViewParameters=require('web.controlPanelViewParameters');var GROUPABLE_TYPES=controlPanelViewParameters.GROUPABLE_TYPES;var GraphView=AbstractView.extend({display_name:_lt('Graph'),icon:'fa-bar-chart',jsLibs:['/web/static/lib/Chart/Chart.js',],config:_.extend({},AbstractView.prototype.config,{Model:GraphModel,Controller:Controller,Renderer:GraphRenderer,}),viewType:'graph',searchMenuTypes:['filter','groupBy','timeRange','favorite'],init:function(viewInfo,params){this._super.apply(this,arguments);var self=this;var measure;var groupBys=[];var measures={__count__:{string:_t("Count"),type:"integer"}};var groupableFields={};this.fields.__count__={string:_t("Count"),type:"integer"};this.arch.children.forEach(function(field){var fieldName=field.attrs.name;if(fieldName==="id"){return;}
var interval=field.attrs.interval;if(interval){fieldName=fieldName+':'+interval;}
if(field.attrs.type==='measure'){measure=fieldName;measures[fieldName]=self.fields[fieldName];}else{groupBys.push(fieldName);}});_.each(this.fields,function(field,name){if(name!=='id'&&field.store===true){if(_.contains(['integer','float','monetary'],field.type)||_.contains(params.additionalMeasures,name)){measures[name]=field;}
if(_.contains(GROUPABLE_TYPES,field.type)){groupableFields[name]=field;}}});this.controllerParams.measures=measures;this.controllerParams.groupableFields=groupableFields;this.rendererParams.fields=this.fields;this.rendererParams.title=this.arch.attrs.title;this.loadParams.mode=this.arch.attrs.type||'bar';this.loadParams.measure=measure||'__count__';this.loadParams.groupBys=groupBys;this.loadParams.fields=this.fields;this.loadParams.comparisonDomain=params.comparisonDomain;this.loadParams.stacked=this.arch.attrs.stacked!=="False";},});return GraphView;});;

/* /web/static/src/js/views/kanban/kanban_column.js defined in bundle 'web.assets_backend' */
odoo.define('web.KanbanColumn',function(require){"use strict";var config=require('web.config');var core=require('web.core');var Dialog=require('web.Dialog');var KanbanRecord=require('web.KanbanRecord');var RecordQuickCreate=require('web.kanban_record_quick_create');var view_dialogs=require('web.view_dialogs');var viewUtils=require('web.viewUtils');var Widget=require('web.Widget');var KanbanColumnProgressBar=require('web.KanbanColumnProgressBar');var _t=core._t;var QWeb=core.qweb;var KanbanColumn=Widget.extend({template:'KanbanView.Group',custom_events:{cancel_quick_create:'_onCancelQuickCreate',quick_create_add_record:'_onQuickCreateAddRecord',tweak_column:'_onTweakColumn',tweak_column_records:'_onTweakColumnRecords',},events:{'click .o_column_edit':'_onEditColumn','click .o_column_delete':'_onDeleteColumn','click .o_kanban_quick_add':'_onAddQuickCreate','click .o_kanban_load_more':'_onLoadMore','click .o_kanban_toggle_fold':'_onToggleFold','click .o_column_archive_records':'_onArchiveRecords','click .o_column_unarchive_records':'_onUnarchiveRecords'},init:function(parent,data,options,recordOptions){this._super(parent);this.db_id=data.id;this.data_records=data.data;this.data=data;var value=data.value;this.id=data.res_id;this.folded=!data.isOpen;this.has_active_field='active'in data.fields;this.fields=data.fields;this.records=[];this.modelName=data.model;this.quick_create=options.quick_create;this.quickCreateView=options.quickCreateView;this.groupedBy=options.groupedBy;this.grouped_by_m2o=options.grouped_by_m2o;this.editable=options.editable;this.deletable=options.deletable;this.archivable=options.archivable;this.draggable=options.draggable;this.KanbanRecord=options.KanbanRecord||KanbanRecord;this.records_editable=options.records_editable;this.records_deletable=options.records_deletable;this.recordsDraggable=options.recordsDraggable;this.relation=options.relation;this.offset=0;this.remaining=data.count-this.data_records.length;if(options.hasProgressBar){this.barOptions={columnID:this.db_id,progressBarStates:options.progressBarStates,};}
this.record_options=_.clone(recordOptions);if(options.grouped_by_m2o){this.title=value?value:_t('Undefined');}else{this.title=value===undefined?_t('Undefined'):value;}
if(options.group_by_tooltip){this.tooltipInfo=_.compact(_.map(options.group_by_tooltip,function(help,field){help=help?help+"</br>":'';return(data.tooltipData&&data.tooltipData[field]&&"<div>"+help+data.tooltipData[field]+"</div>")||'';}));this.tooltipInfo=this.tooltipInfo.join("<div class='dropdown-divider' role='separator' />");}},start:function(){var self=this;var defs=[this._super.apply(this,arguments)];this.$header=this.$('.o_kanban_header');for(var i=0;i<this.data_records.length;i++){defs.push(this._addRecord(this.data_records[i]));}
if(this.recordsDraggable&&!config.device.isMobile){this.$el.sortable({connectWith:'.o_kanban_group',containment:this.draggable?false:'parent',revert:0,delay:0,items:'> .o_kanban_record:not(.o_updating)',cursor:'move',over:function(){self.$el.addClass('o_kanban_hover');},out:function(){self.$el.removeClass('o_kanban_hover');},start:function(event,ui){ui.item.addClass('o_currently_dragged');},stop:function(event,ui){var item=ui.item;setTimeout(function(){item.removeClass('o_currently_dragged');});},update:function(event,ui){var record=ui.item.data('record');var index=self.records.indexOf(record);record.$el.removeAttr('style');if(index>=0){if($.contains(self.$el[0],record.$el[0])){self.trigger_up('kanban_column_resequence',{ids:self._getIDs()});}}else{ui.item.addClass('o_updating');self.trigger_up('kanban_column_add_record',{record:record,ids:self._getIDs()});}}});}
this.$el.click(function(event){if(self.folded){self._onToggleFold(event);}});if(this.barOptions){this.$el.addClass('o_kanban_has_progressbar');this.progressBar=new KanbanColumnProgressBar(this,this.barOptions,this.data);defs.push(this.progressBar.appendTo(this.$header));}
var title=this.folded?this.title+' ('+this.data.count+')':this.title;this.$header.find('.o_column_title').text(title);this.$el.toggleClass('o_column_folded',this.folded&&!config.device.isMobile);if(this.tooltipInfo){this.$header.find('.o_kanban_header_title').tooltip({}).attr('data-original-title',this.tooltipInfo);}
if(!this.remaining){this.$('.o_kanban_load_more').remove();}else{this.$('.o_kanban_load_more').html(QWeb.render('KanbanView.LoadMore',{widget:this}));}
return Promise.all(defs);},on_attach_callback:function(){_.invoke(this.records,'on_attach_callback');if(this.quickCreateWidget){this.quickCreateWidget.on_attach_callback();}},addQuickCreate:function(){if(this.folded){this.trigger_up('column_toggle_fold',{openQuickCreate:true,});return;}
if(this.quickCreateWidget){return Promise.reject();}
this.trigger_up('close_quick_create');this.trigger_up('start_quick_create');var context=this.data.getContext();context['default_'+this.groupedBy]=viewUtils.getGroupValue(this.data,this.groupedBy);this.quickCreateWidget=new RecordQuickCreate(this,{context:context,formViewRef:this.quickCreateView,model:this.modelName,});return this.quickCreateWidget.insertAfter(this.$header);},cancelQuickCreate:function(){if(this.quickCreateWidget){this.quickCreateWidget.cancel();}},isEmpty:function(){return!this.records.length;},_addRecord:function(recordState,options){var record=new this.KanbanRecord(this,recordState,this.record_options);this.records.push(record);if(options&&options.position==='before'){return record.insertAfter(this.quickCreateWidget?this.quickCreateWidget.$el:this.$header);}else{var $load_more=this.$('.o_kanban_load_more');if($load_more.length){return record.insertBefore($load_more);}else{return record.appendTo(this.$el);}}},_cancelQuickCreate:function(){this.quickCreateWidget.destroy();this.quickCreateWidget=undefined;},_getIDs:function(){var ids=[];this.$('.o_kanban_record').each(function(index,r){ids.push($(r).data('record').id);});return ids;},_onAddQuickCreate:function(){this.addQuickCreate();},_onCancelQuickCreate:function(){this._cancelQuickCreate();},_onDeleteColumn:function(event){event.preventDefault();var buttons=[{text:_t("Ok"),classes:'btn-primary',close:true,click:this.trigger_up.bind(this,'kanban_column_delete'),},{text:_t("Cancel"),close:true}];new Dialog(this,{size:'medium',buttons:buttons,$content:$('<div>',{text:_t("Are you sure that you want to remove this column ?")}),}).open();},_onEditColumn:function(event){event.preventDefault();new view_dialogs.FormViewDialog(this,{res_model:this.relation,res_id:this.id,title:_t("Edit Column"),on_saved:this.trigger_up.bind(this,'reload'),}).open();},_onLoadMore:function(event){event.preventDefault();this.trigger_up('kanban_load_more');},_onQuickCreateAddRecord:function(event){this.trigger_up('quick_create_record',event.data);},_onToggleFold:function(event){event.preventDefault();this.trigger_up('column_toggle_fold');},_onTweakColumn:function(ev){ev.data.callback(this.$el);},_onTweakColumnRecords:function(ev){_.each(this.records,function(record){ev.data.callback(record.$el,record.state.data);});},_onArchiveRecords:function(event){event.preventDefault();Dialog.confirm(this,_t("Are you sure that you want to archive all the records from this column?"),{confirm_callback:this.trigger_up.bind(this,'kanban_column_records_toggle_active',{archive:true,}),});},_onUnarchiveRecords:function(event){event.preventDefault();this.trigger_up('kanban_column_records_toggle_active',{archive:false,});}});return KanbanColumn;});;

/* /web/static/src/js/views/kanban/kanban_column_progressbar.js defined in bundle 'web.assets_backend' */
odoo.define('web.KanbanColumnProgressBar',function(require){'use strict';const core=require('web.core');var session=require('web.session');var utils=require('web.utils');var Widget=require('web.Widget');const _t=core._t;var KanbanColumnProgressBar=Widget.extend({template:'KanbanView.ColumnProgressBar',events:{'click .o_kanban_counter_progress':'_onProgressBarParentClick','click .progress-bar':'_onProgressBarClick',},ANIMATE:true,init:function(parent,options,columnState){this._super.apply(this,arguments);this.columnID=options.columnID;this.columnState=columnState;this.fieldName=columnState.progressBarValues.field;this.colors=_.extend({},columnState.progressBarValues.colors,{__false:'muted',});this.sumField=columnState.progressBarValues.sum_field;var state=options.progressBarStates[this.columnID];if(state){this.groupCount=state.groupCount;this.subgroupCounts=state.subgroupCounts;this.totalCounterValue=state.totalCounterValue;this.activeFilter=state.activeFilter;}
var sumFieldInfo=this.sumField&&columnState.fieldsInfo.kanban[this.sumField];var currencyField=sumFieldInfo&&sumFieldInfo.options&&sumFieldInfo.options.currency_field;if(currencyField&&columnState.data.length){this.currency=session.currencies[columnState.data[0].data[currencyField].res_id];}},start:function(){var self=this;this.$bars={};_.each(this.colors,function(val,key){self.$bars[key]=self.$(`.progress-bar[data-filter=${key}]`);});this.$counter=this.$('.o_kanban_counter_side');this.$number=this.$counter.find('b');if(this.currency){var $currency=$('<span/>',{text:this.currency.symbol,});if(this.currency.position==='before'){$currency.prependTo(this.$counter);}else{$currency.appendTo(this.$counter);}}
return this._super.apply(this,arguments).then(function(){var subgroupCounts={};let allSubgroupCount=0;_.each(self.colors,function(val,key){var subgroupCount=self.columnState.progressBarValues.counts[key]||0;if(self.activeFilter===key&&subgroupCount===0){self.activeFilter=false;}
subgroupCounts[key]=subgroupCount;allSubgroupCount+=subgroupCount;});subgroupCounts.__false=self.columnState.count-allSubgroupCount;self.groupCount=self.columnState.count;self.subgroupCounts=subgroupCounts;self.prevTotalCounterValue=self.totalCounterValue;self.totalCounterValue=self.sumField?(self.columnState.aggregateValues[self.sumField]||0):self.columnState.count;self._notifyState();self._render();});},_render:function(){var self=this;this.trigger_up('tweak_column',{callback:function($el){$el.removeClass('o_kanban_group_show');_.each(self.colors,function(val,key){$el.removeClass('o_kanban_group_show_'+val);});if(self.activeFilter){$el.addClass('o_kanban_group_show o_kanban_group_show_'+self.colors[self.activeFilter]);}},});this.trigger_up('tweak_column_records',{callback:function($el,recordData){var categoryValue=recordData[self.fieldName]?recordData[self.fieldName]:'__false';_.each(self.colors,function(val,key){$el.removeClass('oe_kanban_card_'+val);});if(self.colors[categoryValue]){$el.addClass('oe_kanban_card_'+self.colors[categoryValue]);}},});var barNumber=0;var barMinWidth=6;const selection=self.columnState.fields[self.fieldName].selection;_.each(self.colors,function(val,key){var $bar=self.$bars[key];var count=self.subgroupCounts&&self.subgroupCounts[key]||0;if(!$bar){return;}
let value;if(selection){const option=selection.find(option=>option[0]===key);value=option&&option[1]||_t('Other');}else{value=key;}
$bar.attr('data-original-title',count+' '+value);$bar.tooltip({delay:0,trigger:'hover',});$bar.toggleClass('progress-bar-animated progress-bar-striped',key===self.activeFilter);$bar.removeClass('o_bar_has_records transition-off');window.getComputedStyle($bar[0]).getPropertyValue('width');if(count>0){$bar.addClass('o_bar_has_records');var maxWidth=100-barMinWidth*barNumber;self.$('.progress-bar.o_bar_has_records').css('max-width',maxWidth+'%');$bar.css('width',(count*100/self.groupCount)+'%');barNumber++;$bar.attr('aria-valuemin',0);$bar.attr('aria-valuemax',self.groupCount);$bar.attr('aria-valuenow',count);}else{$bar.css('width','');}});this.$('.progress-bar.o_bar_has_records').css('min-width',barMinWidth+'%');var start=this.prevTotalCounterValue;var end=this.totalCounterValue;if(this.activeFilter){if(this.sumField){end=0;_.each(self.columnState.data,function(record){var recordData=record.data;if(self.activeFilter===recordData[self.fieldName]||(self.activeFilter==='__false'&&!recordData[self.fieldName])){end+=parseFloat(recordData[self.sumField]);}});}else{end=this.subgroupCounts[this.activeFilter];}}
this.prevTotalCounterValue=end;var animationClass=start>999?'o_kanban_grow':'o_kanban_grow_huge';if(start!==undefined&&(end>start||this.activeFilter)&&this.ANIMATE){$({currentValue:start}).animate({currentValue:end},{duration:1000,start:function(){self.$counter.addClass(animationClass);},step:function(){self.$number.html(_getCounterHTML(this.currentValue));},complete:function(){self.$number.html(_getCounterHTML(this.currentValue));self.$counter.removeClass(animationClass);},});}else{this.$number.html(_getCounterHTML(end));}
function _getCounterHTML(value){return utils.human_number(value,0,3);}},_notifyState:function(){this.trigger_up('set_progress_bar_state',{columnID:this.columnID,values:{groupCount:this.groupCount,subgroupCounts:this.subgroupCounts,totalCounterValue:this.totalCounterValue,activeFilter:this.activeFilter,},});},_onProgressBarClick:function(ev){this.$clickedBar=$(ev.currentTarget);var filter=this.$clickedBar.data('filter');this.activeFilter=(this.activeFilter===filter?false:filter);this._notifyState();this._render();},_onProgressBarParentClick:function(ev){if(ev.target!==ev.currentTarget){return;}
this.activeFilter=false;this._notifyState();this._render();},});return KanbanColumnProgressBar;});;

/* /web/static/src/js/views/kanban/kanban_column_quick_create.js defined in bundle 'web.assets_backend' */
odoo.define('web.kanban_column_quick_create',function(require){"use strict";var core=require('web.core');var Dialog=require('web.Dialog');var Widget=require('web.Widget');var _t=core._t;var QWeb=core.qweb;var ColumnQuickCreate=Widget.extend({template:'KanbanView.ColumnQuickCreate',events:{'click .o_quick_create_folded':'_onUnfold','click .o_kanban_add':'_onAddClicked','click .o_kanban_examples':'_onShowExamples','keydown':'_onKeydown','keypress input':'_onKeypress','blur input':'_onInputBlur','focus input':'_onInputFocus',},init:function(parent,options){this._super.apply(this,arguments);this.examples=options.examples;this.folded=true;},start:function(){this.$quickCreateFolded=this.$('.o_quick_create_folded');this.$quickCreateUnfolded=this.$('.o_quick_create_unfolded');this.$input=this.$('input');core.bus.on('click',this,this._onWindowClicked);this._update();return this._super.apply(this,arguments);},on_attach_callback:function(){if(!this.folded){this.$input.focus();}},toggleFold:function(){this.folded=!this.folded;this._update();if(!this.folded){this.$input.focus();this.trigger_up('scrollTo',{selector:'.o_column_quick_create'});}},_add:function(){var value=this.$input.val().trim();if(!value.length){this._cancel();return;}
this.$input.val('');this.trigger_up('quick_create_add_column',{value:value});this.$input.focus();},_cancel:function(){if(!this.folded){this.folded=true;this.$input.val('');this._update();}},_update:function(){this.$quickCreateFolded.toggle(this.folded);this.$quickCreateUnfolded.toggle(!this.folded);this.trigger_up('quick_create_column_updated');},_onAddClicked:function(event){event.stopPropagation();this._add();},_onInputBlur:function(){this.$('.o_discard_msg').hide();},_onInputFocus:function(){this.$('.o_discard_msg').show();},_onKeydown:function(event){if(event.keyCode===$.ui.keyCode.ESCAPE){this._cancel();}},_onKeypress:function(event){if(event.keyCode===$.ui.keyCode.ENTER){this._add();}},_onShowExamples:function(){var self=this;var dialog=new Dialog(this,{$content:$(QWeb.render('KanbanView.ExamplesDialog',{examples:this.examples,})),buttons:[{classes:'btn-primary float-right',close:true,text:_t('Got it'),}],size:"large",title:"Kanban Examples",}).open();dialog.on('closed',this,function(){self.$input.focus();});},_onUnfold:function(){if(this.folded){this.toggleFold();}},_onWindowClicked:function(event){if(!document.contains(this.el)){return;}
if($(event.target).closest('.modal').length){return;}
if(this.el.contains(event.target)){return;}
this._cancel();},});return ColumnQuickCreate;});;

/* /web/static/src/js/views/kanban/kanban_model.js defined in bundle 'web.assets_backend' */
odoo.define('web.KanbanModel',function(require){"use strict";var BasicModel=require('web.BasicModel');var viewUtils=require('web.viewUtils');var KanbanModel=BasicModel.extend({addRecordToGroup:function(groupID,resId){var self=this;var group=this.localData[groupID];var new_record=this._makeDataPoint({res_id:resId,modelName:group.model,fields:group.fields,fieldsInfo:group.fieldsInfo,viewType:group.viewType,parentID:groupID,});var def=this._fetchRecord(new_record).then(function(result){group.data.unshift(new_record.id);group.res_ids.unshift(resId);group.count++;self.localData[group.parentID].count++;self._updateParentResIDs(group);return result.id;});return this._reloadProgressBarGroupFromRecord(new_record.id,def);},createGroup:function(name,parentID){var self=this;var parent=this.localData[parentID];var groupBy=parent.groupedBy[0];var groupByField=parent.fields[groupBy];if(!groupByField||groupByField.type!=='many2one'){return Promise.reject();}
return this._rpc({model:groupByField.relation,method:'name_create',args:[name],context:parent.context,}).then(function(result){var newGroup=self._makeDataPoint({modelName:parent.model,context:parent.context,domain:parent.domain.concat([[groupBy,"=",result[0]]]),fields:parent.fields,fieldsInfo:parent.fieldsInfo,isOpen:true,limit:parent.limit,parentID:parent.id,openGroupByDefault:true,orderedBy:parent.orderedBy,value:result,viewType:parent.viewType,});if(parent.progressBar){newGroup.progressBarValues=_.extend({counts:{},},parent.progressBar);}
parent.data.push(newGroup.id);return newGroup.id;});},createRecordInGroup:function(groupID,values){var self=this;var group=this.localData[groupID];var context=this._getContext(group);var parent=this.localData[group.parentID];var groupedBy=parent.groupedBy;context['default_'+groupedBy]=viewUtils.getGroupValue(group,groupedBy);var def;if(Object.keys(values).length===1&&'display_name'in values){def=this._rpc({model:parent.model,method:'name_create',args:[values.display_name],context:context,}).then(function(records){return records[0];});}else{def=this._rpc({model:parent.model,method:'create',args:[values],context:context,});}
return def.then(function(resID){return self.addRecordToGroup(group.id,resID);});},get:function(){var result=this._super.apply(this,arguments);var dp=result&&this.localData[result.id];if(dp){if(dp.tooltipData){result.tooltipData=$.extend(true,{},dp.tooltipData);}
if(dp.progressBarValues){result.progressBarValues=$.extend(true,{},dp.progressBarValues);}
if(dp.fields[dp.groupedBy[0]]){var groupedByM2O=dp.fields[dp.groupedBy[0]].type==='many2one';result.isGroupedByM2ONoColumn=!dp.data.length&&groupedByM2O;}else{result.isGroupedByM2ONoColumn=false;}}
return result;},getColumn:function(id){var element=this.localData[id];if(element){return this.get(element.parentID);}
return null;},load:function(params){this.defaultGroupedBy=params.groupBy;params.groupedBy=(params.groupedBy&&params.groupedBy.length)?params.groupedBy:this.defaultGroupedBy;return this._super(params);},loadColumnRecords:function(groupID){var dataPoint=this.localData[groupID];dataPoint.isOpen=true;return this.reload(groupID);},loadMore:function(groupID){var group=this.localData[groupID];var offset=group.loadMoreOffset+group.limit;return this.reload(group.id,{loadMoreOffset:offset,});},moveRecord:function(recordID,groupID,parentID){var self=this;var parent=this.localData[parentID];var new_group=this.localData[groupID];var changes={};var groupedFieldName=parent.groupedBy[0];var groupedField=parent.fields[groupedFieldName];if(groupedField.type==='many2one'){changes[groupedFieldName]={id:new_group.res_id,display_name:new_group.value,};}else if(groupedField.type==='selection'){var value=_.findWhere(groupedField.selection,{1:new_group.value});changes[groupedFieldName]=value&&value[0]||false;}else{changes[groupedFieldName]=new_group.value;}
var record=self.localData[recordID];var resID=record.res_id;var old_group;for(var i=0;i<parent.data.length;i++){old_group=self.localData[parent.data[i]];var index=_.indexOf(old_group.data,recordID);if(index>=0){old_group.data.splice(index,1);old_group.count--;old_group.res_ids=_.without(old_group.res_ids,resID);self._updateParentResIDs(old_group);break;}}
new_group.data.push(recordID);new_group.res_ids.push(resID);new_group.count++;return this.notifyChanges(recordID,changes).then(function(){return self.save(recordID);}).then(function(){record.parentID=new_group.id;return[old_group.id,new_group.id];});},reload:function(id,options){if(options&&options.groupBy&&!options.groupBy.length){options.groupBy=this.defaultGroupedBy;}
var def=this._super(id,options);if(options&&options.loadMoreOffset){return def;}
return this._reloadProgressBarGroupFromRecord(id,def);},save:function(recordID){var def=this._super.apply(this,arguments);return this._reloadProgressBarGroupFromRecord(recordID,def);},_makeDataPoint:function(params){var dataPoint=this._super.apply(this,arguments);if(params.progressBar){dataPoint.progressBar=params.progressBar;}
return dataPoint;},_load:function(dataPoint,options){if(dataPoint.groupedBy.length&&dataPoint.progressBar){return this._readProgressBarGroup(dataPoint,options);}
return this._super.apply(this,arguments);},_readGroup:function(list){var self=this;if(list.groupedBy.length>1){list.groupedBy=[list.groupedBy[0]];}
return this._super.apply(this,arguments).then(function(result){return self._readTooltipFields(list).then(_.constant(result));});},_readProgressBarGroup:function(list,options){var self=this;var groupsDef=this._readGroup(list,options);var progressBarDef=this._rpc({model:list.model,method:'read_progress_bar',kwargs:{domain:list.domain,group_by:list.groupedBy[0],progress_bar:list.progressBar,context:list.context,},});return Promise.all([groupsDef,progressBarDef]).then(function(results){var data=results[1];_.each(list.data,function(groupID){var group=self.localData[groupID];group.progressBarValues=_.extend({counts:data[group.value]||{},},list.progressBar);});return list;});},_readTooltipFields:function(list){var self=this;var groupedByField=list.fields[list.groupedBy[0].split(':')[0]];if(groupedByField.type!=='many2one'){return Promise.resolve();}
var groupIds=_.reduce(list.data,function(groupIds,id){var res_id=self.get(id,{raw:true}).res_id;if(res_id){groupIds.push(res_id);}
return groupIds;},[]);var tooltipFields=[];var groupedByFieldInfo=list.fieldsInfo.kanban[list.groupedBy[0]];if(groupedByFieldInfo&&groupedByFieldInfo.options){tooltipFields=Object.keys(groupedByFieldInfo.options.group_by_tooltip||{});}
if(groupIds.length&&tooltipFields.length){var fieldNames=_.union(['display_name'],tooltipFields);return this._rpc({model:groupedByField.relation,method:'read',args:[groupIds,fieldNames],context:list.context,}).then(function(result){_.each(list.data,function(id){var dp=self.localData[id];dp.tooltipData=_.findWhere(result,{id:dp.res_id});});});}
return Promise.resolve();},_reloadProgressBarGroupFromRecord:function(recordID,def){var element=this.localData[recordID];if(element.type==='list'&&!element.parentID){return def;}
var self=this;while(element){if(element.progressBar){return def.then(function(data){return self._load(element,{keepEmptyGroups:true,onlyGroups:true,}).then(function(){return data;});});}
element=this.localData[element.parentID];}
return def;},});return KanbanModel;});;

/* /web/static/src/js/views/kanban/kanban_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.KanbanController',function(require){"use strict";var BasicController=require('web.BasicController');var Context=require('web.Context');var core=require('web.core');var Dialog=require('web.Dialog');var Domain=require('web.Domain');var view_dialogs=require('web.view_dialogs');var viewUtils=require('web.viewUtils');var _t=core._t;var qweb=core.qweb;var KanbanController=BasicController.extend({buttons_template:'KanbanView.buttons',custom_events:_.extend({},BasicController.prototype.custom_events,{quick_create_add_column:'_onAddColumn',quick_create_record:'_onQuickCreateRecord',resequence_columns:'_onResequenceColumn',button_clicked:'_onButtonClicked',kanban_record_delete:'_onRecordDelete',kanban_record_update:'_onUpdateRecord',kanban_column_delete:'_onDeleteColumn',kanban_column_add_record:'_onAddRecordToColumn',kanban_column_resequence:'_onColumnResequence',kanban_load_more:'_onLoadMore',kanban_load_records:'_onLoadColumnRecords',column_toggle_fold:'_onToggleColumn',kanban_column_records_toggle_active:'_onToggleActiveRecords',}),events:_.extend({},BasicController.prototype.events,{click:'_onClick',}),init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.on_create=params.on_create;this.hasButtons=params.hasButtons;this.quickCreateEnabled=params.quickCreateEnabled;},renderButtons:function($node){if(this.hasButtons&&this.is_action_enabled('create')){this.$buttons=$(qweb.render(this.buttons_template,{btnClass:'btn-primary',widget:this,}));this.$buttons.on('click','button.o-kanban-button-new',this._onButtonNew.bind(this));this.$buttons.on('keydown',this._onButtonsKeyDown.bind(this));this._updateButtons();return Promise.resolve(this.$buttons.appendTo($node));}
return Promise.resolve();},_confirmSave:function(id){var data=this.model.get(this.handle,{raw:true});var grouped=data.groupedBy.length;if(grouped){var columnState=this.model.getColumn(id);return this.renderer.updateColumn(columnState.id,columnState);}
return this.renderer.updateRecord(this.model.get(id));},_isPagerVisible:function(){var state=this.model.get(this.handle,{raw:true});return!!(state.count&&!state.groupedBy.length);},_reloadAfterButtonClick:function(kanbanRecord,params){var self=this;var recordModel=this.model.localData[params.record.id];var group=this.model.localData[recordModel.parentID];var parent=this.model.localData[group.parentID];this.model.reload(params.record.id).then(function(db_id){var data=self.model.get(db_id);kanbanRecord.update(data);var domain=(parent?parent.domain:group.domain)||[];var domInData=_.every(domain,function(d){return d[0]in data.data;});var activeInDomain=_.pluck(domain,0).indexOf('active')!==-1;var activeInData='active'in data.data;if(domInData&&!activeInDomain&&activeInData){domain=domain.concat([['active','=',true]]);}else if(!domInData&&!activeInDomain&&activeInData){domain=[['active','=',true]];}
try{var visible=new Domain(domain).compute(data.evalContext);}catch(e){return;}
if(!visible){kanbanRecord.destroy();}});},_resequenceColumns:function(ids){var state=this.model.get(this.handle,{raw:true});var model=state.fields[state.groupedBy[0]].relation;return this.model.resequence(model,ids,this.handle);},_resequenceRecords:function(column_id,ids){var self=this;return this.model.resequence(this.modelName,ids,column_id).then(function(){self._updateEnv();});},_update:function(){this._updateButtons();return this._super.apply(this,arguments);},_updateButtons:function(){if(this.$buttons){var state=this.model.get(this.handle,{raw:true});var createHidden=this.is_action_enabled('group_create')&&state.isGroupedByM2ONoColumn;this.$buttons.find('.o-kanban-button-new').toggleClass('o_hidden',createHidden);}},_onAddColumn:function(ev){var self=this;this.mutex.exec(function(){return self.model.createGroup(ev.data.value,self.handle).then(function(){var state=self.model.get(self.handle,{raw:true});var ids=_.pluck(state.data,'res_id').filter(_.isNumber);return self._resequenceColumns(ids);}).then(function(){return self.update({},{reload:false});}).then(function(){self._updateButtons();self.renderer.quickCreateToggleFold();});});},_onAddRecordToColumn:function(ev){var self=this;var record=ev.data.record;var column=ev.target;this.alive(this.model.moveRecord(record.db_id,column.db_id,this.handle)).then(function(column_db_ids){return self._resequenceRecords(column.db_id,ev.data.ids).then(function(){_.each(column_db_ids,function(db_id){var data=self.model.get(db_id);self.renderer.updateColumn(db_id,data);});});}).guardedCatch(this.reload.bind(this));},_onButtonClicked:function(ev){var self=this;ev.stopPropagation();var attrs=ev.data.attrs;var record=ev.data.record;var def=Promise.resolve();if(attrs.context){attrs.context=new Context(attrs.context).set_eval_context({active_id:record.res_id,active_ids:[record.res_id],active_model:record.model,});}
if(attrs.confirm){def=new Promise(function(resolve,reject){Dialog.confirm(this,attrs.confirm,{confirm_callback:resolve,cancel_callback:reject,}).on("closed",null,reject);});}
def.then(function(){self.trigger_up('execute_action',{action_data:attrs,env:{context:record.getContext(),currentID:record.res_id,model:record.model,resIDs:record.res_ids,},on_closed:self._reloadAfterButtonClick.bind(self,ev.target,ev.data),});});},_onButtonNew:function(){var self=this;var state=this.model.get(this.handle,{raw:true});var quickCreateEnabled=this.quickCreateEnabled&&viewUtils.isQuickCreateEnabled(state);if(this.on_create==='quick_create'&&quickCreateEnabled&&state.data.length){this.mutex.getUnlockedDef().then(function(){self.renderer.addQuickCreate();});}else if(this.on_create&&this.on_create!=='quick_create'){this.do_action(this.on_create,{on_close:this.reload.bind(this,{}),additional_context:state.context,});}else{this.trigger_up('switch_view',{view_type:'form',res_id:undefined});}},_onButtonsKeyDown:function(ev){switch(ev.keyCode){case $.ui.keyCode.DOWN:this.$('.o_kanban_record:first').focus();}},_onClick:function(ev){var state=this.model.get(this.handle,{raw:true});if(!state.count&&this.buttons){var classesList=['o_kanban_view','o_kanban_group','o_column_quick_create','o_view_nocontent_smiling_face'];var $target=$(ev.target);var hasClassList=_.map(classesList,function(klass){return $target.hasClass(klass)});if(_.some(hasClassList)){this.$buttons.find('.o-kanban-button-new').odooBounce();}}},_onColumnResequence:function(ev){this._resequenceRecords(ev.target.db_id,ev.data.ids);},_onDeleteColumn:function(ev){var self=this;var column=ev.target;var state=this.model.get(this.handle,{raw:true});var relatedModelName=state.fields[state.groupedBy[0]].relation;this.model.deleteRecords([column.db_id],relatedModelName).then(function(){self.update({},{reload:!column.isEmpty()});});},_onLoadColumnRecords:function(ev){var self=this;this.model.loadColumnRecords(ev.data.columnID).then(function(dbID){var data=self.model.get(dbID);return self.renderer.updateColumn(dbID,data).then(function(){self._updateEnv();if(ev.data.onSuccess){ev.data.onSuccess();}});});},_onLoadMore:function(ev){var self=this;var column=ev.target;this.model.loadMore(column.db_id).then(function(db_id){var data=self.model.get(db_id);self.renderer.updateColumn(db_id,data);self._updateEnv();});},_onQuickCreateRecord:function(ev){var self=this;var values=ev.data.values;var column=ev.target;var onFailure=ev.data.onFailure||function(){};var update=function(db_id){self._updateEnv();var columnState=self.model.getColumn(db_id);var state=self.model.get(self.handle);return self.renderer.updateColumn(columnState.id,columnState,{openQuickCreate:true,state:state}).then(function(){if(ev.data.openRecord){self.trigger_up('open_record',{id:db_id,mode:'edit'});}});};this.model.createRecordInGroup(column.db_id,values).then(update).guardedCatch(function(reason){reason.event.preventDefault();var columnState=self.model.get(column.db_id,{raw:true});var context=columnState.getContext();var state=self.model.get(self.handle,{raw:true});var groupedBy=state.groupedBy[0];context['default_'+groupedBy]=viewUtils.getGroupValue(columnState,groupedBy);new view_dialogs.FormViewDialog(self,{res_model:state.model,context:_.extend({default_name:values.name||values.display_name},context),title:_t("Create"),disable_multiple_selection:true,on_saved:function(record){self.model.addRecordToGroup(column.db_id,record.res_id).then(update);},}).open().opened(onFailure);});},_onRecordDelete:function(ev){this._deleteRecords([ev.data.id]);},_onResequenceColumn:function(ev){var self=this;this._resequenceColumns(ev.data.ids).then(function(){self._updateEnv();});},_onToggleColumn:function(ev){var self=this;var column=ev.target;this.model.toggleGroup(column.db_id).then(function(db_id){var data=self.model.get(db_id);var options={openQuickCreate:!!ev.data.openQuickCreate,};self.renderer.updateColumn(db_id,data,options);self._updateEnv();});},_onUpdateRecord:function(ev){var onSuccess=ev.data.onSuccess;delete ev.data.onSuccess;var changes=_.clone(ev.data);ev.data.force_save=true;this._applyChanges(ev.target.db_id,changes,ev).then(onSuccess);},_onToggleActiveRecords:function(ev){var self=this;var column=ev.target;var recordIds=_.pluck(column.records,'db_id');if(recordIds.length){this.model.toggleActive(recordIds,column.db_id).then(function(dbID){var data=self.model.get(dbID);self.renderer.updateColumn(dbID,data);self._updateEnv();});}},});return KanbanController;});;

/* /web/static/src/js/views/kanban/kanban_examples_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web.kanban_examples_registry',function(require){"use strict";var Registry=require('web.Registry');return new Registry();});;

/* /web/static/src/js/views/kanban/kanban_record.js defined in bundle 'web.assets_backend' */
odoo.define('web.KanbanRecord',function(require){"use strict";var config=require('web.config');var core=require('web.core');var Domain=require('web.Domain');var Dialog=require('web.Dialog');var field_utils=require('web.field_utils');var utils=require('web.utils');var Widget=require('web.Widget');var widgetRegistry=require('web.widget_registry');var _t=core._t;var QWeb=core.qweb;var KANBAN_RECORD_COLORS=[_t('No color'),_t('Red'),_t('Orange'),_t('Yellow'),_t('Light blue'),_t('Dark purple'),_t('Salmon pink'),_t('Medium blue'),_t('Dark blue'),_t('Fushia'),_t('Green'),_t('Purple'),];var NB_KANBAN_RECORD_COLORS=KANBAN_RECORD_COLORS.length;var KanbanRecord=Widget.extend({events:{'click .oe_kanban_action':'_onKanbanActionClicked','click .o_kanban_manage_toggle_button':'_onManageTogglerClicked',},init:function(parent,state,options){this._super(parent);this.fields=state.fields;this.fieldsInfo=state.fieldsInfo.kanban;this.modelName=state.model;this.options=options;this.editable=options.editable;this.deletable=options.deletable;this.read_only_mode=options.read_only_mode;this.selectionMode=options.selectionMode;this.qweb=options.qweb;this.subWidgets={};this._setState(state);this._onKanbanActionClicked=_.debounce(this._onKanbanActionClicked,300,true);},start:function(){return Promise.all([this._super.apply(this,arguments),this._render()]);},on_attach_callback:function(){this.isInDOM=true;_.invoke(this.subWidgets,'on_attach_callback');},on_detach_callback:function(){this.isInDOM=false;_.invoke(this.subWidgets,'on_detach_callback');},update:function(state){_.invoke(_.pluck(this.subWidgets,'$el'),'detach');this._setState(state);return this._render();},_attachTooltip:function(){var self=this;this.$('[tooltip]').each(function(){var $el=$(this);var tooltip=$el.attr('tooltip');if(tooltip){$el.tooltip({title:self.qweb.render(tooltip,self.qweb_context)});}});},_computeDomain:function(d){return new Domain(d).compute(this.state.evalContext);},_getColorClassname:function(variable){var color=this._getColorID(variable);return'oe_kanban_color_'+color;},_getColorID:function(variable){if(typeof variable==='number'){return Math.round(variable)%NB_KANBAN_RECORD_COLORS;}
if(typeof variable==='string'){var index=0;for(var i=0;i<variable.length;i++){index+=variable.charCodeAt(i);}
return index%NB_KANBAN_RECORD_COLORS;}
return 0;},_getColorname:function(variable){var colorID=this._getColorID(variable);return KANBAN_RECORD_COLORS[colorID];},file_type_magic_word:{'/':'jpg','R':'gif','i':'png','P':'svg+xml',},_getImageURL:function(model,field,id,placeholder){id=(_.isArray(id)?id[0]:id)||false;placeholder=placeholder||"/web/static/src/img/placeholder.png";var isCurrentRecord=this.modelName===model&&this.recordData.id===id;var url;if(isCurrentRecord&&this.record[field]&&this.record[field].raw_value&&!utils.is_bin_size(this.record[field].raw_value)){url='data:image/'+this.file_type_magic_word[this.record[field].raw_value[0]]+';base64,'+this.record[field].raw_value;}else if(!model||!field||!id||(isCurrentRecord&&this.record[field]&&!this.record[field].raw_value)){url=placeholder;}else{var session=this.getSession();var params={model:model,field:field,id:id};if(isCurrentRecord){params.unique=this.record.__last_update&&this.record.__last_update.value.replace(/[^0-9]/g,'');}
url=session.url('/web/image',params);}
return url;},_openRecord:function(){if(this.$el.hasClass('o_currently_dragged')){return;}
var editMode=this.$el.hasClass('oe_kanban_global_click_edit');this.trigger_up('open_record',{id:this.db_id,mode:editMode?'edit':'readonly',});},_processFields:function(){var self=this;this.$("field").each(function(){var $field=$(this);var field_name=$field.attr("name");var field_widget=$field.attr("widget");if(field_widget||self.fields[field_name].type==='many2many'){var widget=self.subWidgets[field_name];if(!widget){var Widget=self.fieldsInfo[field_name].Widget;if(Widget){widget=self._processWidget($field,field_name,Widget);self.subWidgets[field_name]=widget;}else if(config.isDebug()){$field.replaceWith($('<span>',{text:_.str.sprintf(_t('[No widget %s]'),field_widget),}));}}else{widget.reset(self.state);$field.replaceWith(widget.$el);if(self.isInDOM&&widget.on_attach_callback){widget.on_attach_callback();}}}else{self._processField($field,field_name);}});},_processField:function($field,field_name){var field=this.fields[field_name];var value=this.recordData[field_name];var options={data:this.recordData};var formatted_value=field_utils.format[field.type](value,field,options);var $result=$('<span>',{text:formatted_value,});$field.replaceWith($result);this._setFieldDisplay($result,field_name);return $result;},_processWidget:function($field,field_name,Widget){var self=this;var attrs=Object.create(null);_.each(this.fieldsInfo[field_name],function(value,key){if(_.str.startsWith(key,'t-att-')){key=key.slice(6);value=$field.attr(key);}
attrs[key]=value;});var options=_.extend({},this.options,{attrs:attrs});var widget=new Widget(this,field_name,this.state,options);var def=widget.replace($field);this.defs.push(def);def.then(function(){self._setFieldDisplay(widget.$el,field_name);});return widget;},_processWidgets:function(){var self=this;this.$("widget").each(function(){var $field=$(this);var Widget=widgetRegistry.get($field.attr('name'));var widget=new Widget(self,self.state);var def=widget._widgetRenderAndInsert(function(){});self.defs.push(def);def.then(function(){$field.replaceWith(widget.$el);widget.$el.addClass('o_widget');});});},_render:function(){this.defs=[];_.invoke(this.subWidgets,'on_detach_callback');this._replaceElement(this.qweb.render('kanban-box',this.qweb_context));this.$el.addClass('o_kanban_record').attr("tabindex",0);this.$el.attr('role','article');this.$el.data('record',this);if(this.selectionMode){this.$el.addClass('oe_kanban_global_click');}
if(this.$el.hasClass('oe_kanban_global_click')||this.$el.hasClass('oe_kanban_global_click_edit')){this.$el.on('click',this._onGlobalClick.bind(this));this.$el.on('keydown',this._onKeyDownCard.bind(this));}else{this.$el.on('keydown',this._onKeyDownOpenFirstLink.bind(this));}
this._processFields();this._processWidgets();this._setupColor();this._setupColorPicker();this._attachTooltip();this.$('span.o_tag').tooltip({delay:{'show':50}});return Promise.all(this.defs);},_setCoverImage:function(fieldName){var self=this;this._rpc({model:'ir.attachment',method:'search_read',domain:[['res_model','=',this.modelName],['res_id','=',this.id],['mimetype','ilike','image']],fields:['id','name'],}).then(function(attachmentIds){self.imageUploadID=_.uniqueId('o_cover_image_upload');self.image_only=true;var coverId=self.record[fieldName]&&self.record[fieldName].raw_value;var $content=$(QWeb.render('KanbanView.SetCoverModal',{coverId:coverId,attachmentIds:attachmentIds,widget:self,}));var $imgs=$content.find('.o_kanban_cover_image');var dialog=new Dialog(self,{title:_t("Set a Cover Image"),$content:$content,buttons:[{text:_t("Select"),classes:attachmentIds.length?'btn-primary':'d-none',close:true,disabled:!coverId,click:function(){var $img=$imgs.filter('.o_selected').find('img');var data={};data[fieldName]={id:$img.data('id'),display_name:$img.data('name')};self.trigger_up('kanban_record_update',data);},},{text:_t('Upload and Set'),classes:attachmentIds.length?'':'btn-primary',close:false,click:function(){$content.find('input.o_input_file').click();},},{text:_t("Remove Cover Image"),classes:coverId?'':'d-none',close:true,click:function(){var data={};data[fieldName]=false;self.trigger_up('kanban_record_update',data);},},{text:_t("Discard"),close:true,}],});dialog.opened().then(function(){var $selectBtn=dialog.$footer.find('.btn-primary');$content.on('click','.o_kanban_cover_image',function(ev){$imgs.not(ev.currentTarget).removeClass('o_selected');$selectBtn.prop('disabled',!$(ev.currentTarget).toggleClass('o_selected').hasClass('o_selected'));});$content.on('dblclick','.o_kanban_cover_image',function(ev){var $img=$(ev.currentTarget).find('img');var data={};data[fieldName]={id:$img.data('id'),display_name:$img.data('name')};self.trigger_up('kanban_record_update',data);dialog.close();});$content.on('change','input.o_input_file',function(){$content.find('form.o_form_binary_form').submit();});$(window).on(self.imageUploadID,function(){var images=Array.prototype.slice.call(arguments,1);var data={};data[fieldName]={id:images[0].id,display_name:images[0].filename};self.trigger_up('kanban_record_update',data);dialog.close();});});dialog.open();});},_setFieldDisplay:function($el,fieldName){if(this.fieldsInfo[fieldName].display==='right'){$el.addClass('float-right');}else if(this.fieldsInfo[fieldName].display==='full'){$el.addClass('o_text_block');}
if(this.fieldsInfo[fieldName].bold){$el.addClass('o_text_bold');}},_setState:function(recordState){this.state=recordState;this.id=recordState.res_id;this.db_id=recordState.id;this.recordData=recordState.data;this.record=this._transformRecord(recordState.data);this.qweb_context={context:this.state.getContext(),kanban_image:this._getImageURL.bind(this),kanban_color:this._getColorClassname.bind(this),kanban_getcolor:this._getColorID.bind(this),kanban_getcolorname:this._getColorname.bind(this),kanban_compute_domain:this._computeDomain.bind(this),selection_mode:this.selectionMode,read_only_mode:this.read_only_mode,record:this.record,user_context:this.getSession().user_context,widget:this,};},_setupColor:function(){var color_field=this.$el.attr('color');if(color_field&&color_field in this.fields){var colorHelp=_.str.sprintf(_t("Card color: %s"),this._getColorname(this.recordData[color_field]));var colorClass=this._getColorClassname(this.recordData[color_field]);this.$el.addClass(colorClass);this.$el.prepend('<span title="'+colorHelp+'" aria-label="'+colorHelp+'" role="img" class="oe_kanban_color_help"/>');}},_setupColorPicker:function(){var $colorpicker=this.$('ul.oe_kanban_colorpicker');if(!$colorpicker.length){return;}
$colorpicker.html(QWeb.render('KanbanColorPicker'));$colorpicker.on('click','a',this._onColorChanged.bind(this));},_transformRecord:function(recordData){var self=this;var new_record={};_.each(this.state.getFieldNames(),function(name){var value=recordData[name];var r=_.clone(self.fields[name]||{});if((r.type==='date'||r.type==='datetime')&&value){r.raw_value=value.toDate();}else if(r.type==='one2many'||r.type==='many2many'){r.raw_value=value.count?value.res_ids:[];}else if(r.type==='many2one'){r.raw_value=value&&value.res_id||false;}else{r.raw_value=value;}
if(r.type){var formatter=field_utils.format[r.type];r.value=formatter(value,self.fields[name],recordData,self.state);}else{r.value=value;}
new_record[name]=r;});return new_record;},_updateRecord:function(data){this.trigger_up('kanban_record_update',data);},_onColorChanged:function(event){event.preventDefault();var data={};var color_field=$(event.delegateTarget).data('field')||'color';data[color_field]=$(event.currentTarget).data('color');this.trigger_up('kanban_record_update',data);},_onGlobalClick:function(event){if($(event.target).parents('.o_dropdown_kanban').length){return;}
var trigger=true;var elem=event.target;var ischild=true;var children=[];while(elem){var events=$._data(elem,'events');if(elem===event.currentTarget){ischild=false;}
var test_event=events&&events.click&&(events.click.length>1||events.click[0].namespace!=='bs.tooltip');var testLinkWithHref=elem.nodeName.toLowerCase()==='a'&&elem.href;if(ischild){children.push(elem);if(test_event||testLinkWithHref){trigger=false;}}
if(trigger&&test_event){_.each(events.click,function(click_event){if(click_event.selector){_.each(children,function(child){if($(child).is(click_event.selector)){trigger=false;}});}});}
elem=elem.parentElement;}
if(trigger){this._openRecord();}},_onKanbanActionClicked:function(event){event.preventDefault();var $action=$(event.currentTarget);var type=$action.data('type')||'button';switch(type){case'edit':this.trigger_up('open_record',{id:this.db_id,mode:'edit'});break;case'open':this.trigger_up('open_record',{id:this.db_id});break;case'delete':this.trigger_up('kanban_record_delete',{id:this.db_id,record:this});break;case'action':case'object':var attrs=$action.data();attrs.confirm=$action.attr('confirm');this.trigger_up('button_clicked',{attrs:attrs,record:this.state,});break;case'set_cover':var fieldName=$action.data('field');if(this.fields[fieldName].type==='many2one'&&this.fields[fieldName].relation==='ir.attachment'&&this.fieldsInfo[fieldName].widget==='attachment_image'){this._setCoverImage(fieldName);}else{var warning=_.str.sprintf(_t('Could not set the cover image: incorrect field ("%s") is provided in the view.'),fieldName);this.do_warn(warning);}
break;default:this.do_warn("Kanban: no action for type : "+type);}},_onKeyDownCard:function(event){switch(event.keyCode){case $.ui.keyCode.ENTER:if($(event.target).hasClass('oe_kanban_global_click')){event.preventDefault();this._onGlobalClick(event);break;}}},_onKeyDownOpenFirstLink:function(event){switch(event.keyCode){case $.ui.keyCode.ENTER:event.preventDefault();$(event.target).find('a, button').first().click();break;}},_onManageTogglerClicked:function(event){event.preventDefault();this.$el.toggleClass('o_dropdown_open');var colorClass=this._getColorClassname(this.recordData.color||0);this.$('.o_kanban_manage_button_section').toggleClass(colorClass);},});return KanbanRecord;});;

/* /web/static/src/js/views/kanban/kanban_record_quick_create.js defined in bundle 'web.assets_backend' */
odoo.define('web.kanban_record_quick_create',function(require){"use strict";var core=require('web.core');var QuickCreateFormView=require('web.QuickCreateFormView');var Widget=require('web.Widget');var qweb=core.qweb;var RecordQuickCreate=Widget.extend({className:'o_kanban_quick_create',custom_events:{add:'_onAdd',cancel:'_onCancel',},events:{'click .o_kanban_add':'_onAddClicked','click .o_kanban_edit':'_onEditClicked','click .o_kanban_cancel':'_onCancelClicked',},init:function(parent,options){this._super.apply(this,arguments);this.context=options.context;this.formViewRef=options.formViewRef;this.model=options.model;this._disabled=false;},willStart:function(){var self=this;var superWillStart=this._super.apply(this,arguments);var viewsLoaded;if(this.formViewRef){var views=[[false,'form']];var context=_.extend({},this.context,{form_view_ref:this.formViewRef,});viewsLoaded=this.loadViews(this.model,context,views);}else{var fieldsView={};fieldsView.arch='<form>'+'<field name="display_name" placeholder="Title" modifiers=\'{"required": true}\'/>'+'</form>';var fields={display_name:{string:'Display name',type:'char'},};fieldsView.fields=fields;fieldsView.viewFields=fields;viewsLoaded=Promise.resolve({form:fieldsView});}
viewsLoaded=viewsLoaded.then(function(fieldsViews){var formView=new QuickCreateFormView(fieldsViews.form,{context:self.context,modelName:self.model,userContext:self.getSession().user_context,});return formView.getController(self).then(function(controller){self.controller=controller;return self.controller.appendTo(document.createDocumentFragment());});});return Promise.all([superWillStart,viewsLoaded]);},start:function(){this.$el.append(this.controller.$el);this.$el.append(qweb.render('KanbanView.RecordQuickCreate.buttons'));this.controller.autofocus();core.bus.on('click',this,this._onWindowClicked);return this._super.apply(this,arguments);},on_attach_callback:function(){if(this.controller){this.controller.autofocus();}},cancel:function(){var self=this;return this.controller.commitChanges().then(function(){if(!self.controller.isDirty()){self._cancel();}});},_add:function(options){var self=this;if(this._disabled){return;}
this._disableQuickCreate();this.controller.commitChanges().then(function(){var canBeSaved=self.controller.canBeSaved();if(canBeSaved){self.trigger_up('quick_create_add_record',{openRecord:options&&options.openRecord||false,values:self.controller.getChanges(),onFailure:self._enableQuickCreate.bind(self),});}else{self._enableQuickCreate();}}).guardedCatch(this._enableQuickCreate.bind(this));},_cancel:function(){this.trigger_up('cancel_quick_create');},_disableQuickCreate:function(){this._disabled=true;this.$el.addClass('o_disabled');this.$('input:not(:disabled)').addClass('o_temporarily_disabled').attr('disabled','disabled');},_enableQuickCreate:function(){this._disabled=false;this.$el.removeClass('o_disabled');this.$('input.o_temporarily_disabled').removeClass('o_temporarily_disabled').attr('disabled',false);},_onAdd:function(ev){ev.stopPropagation();this._add();},_onAddClicked:function(ev){ev.stopPropagation();this._add();},_onCancel:function(ev){ev.stopPropagation();this._cancel();},_onCancelClicked:function(ev){ev.stopPropagation();this._cancel();},_onEditClicked:function(ev){ev.stopPropagation();this._add({openRecord:true});},_onWindowClicked:function(ev){if(!document.contains(this.el)){return;}
if($(ev.target).closest('.o-kanban-button-new, .o_kanban_quick_add').length){return;}
if($(ev.target).parents('.ui-autocomplete').length){return;}
if($(ev.target).closest('.modal').length){return;}
if(!document.contains(ev.target)){return;}
if(this.el.contains(ev.target)&&this.el!==ev.target){return;}
this.cancel();},});return RecordQuickCreate;});;

/* /web/static/src/js/views/kanban/kanban_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.KanbanRenderer',function(require){"use strict";var BasicRenderer=require('web.BasicRenderer');var ColumnQuickCreate=require('web.kanban_column_quick_create');var config=require('web.config');var core=require('web.core');var KanbanColumn=require('web.KanbanColumn');var KanbanRecord=require('web.KanbanRecord');var QWeb=require('web.QWeb');var session=require('web.session');var utils=require('web.utils');var viewUtils=require('web.viewUtils');var qweb=core.qweb;var _t=core._t;function findInNode(node,predicate){if(predicate(node)){return node;}
if(!node.children){return undefined;}
for(var i=0;i<node.children.length;i++){if(findInNode(node.children[i],predicate)){return node.children[i];}}}
function qwebAddIf(node,condition){if(node.attrs[qweb.prefix+'-if']){condition=_.str.sprintf("(%s) and (%s)",node.attrs[qweb.prefix+'-if'],condition);}
node.attrs[qweb.prefix+'-if']=condition;}
function transformQwebTemplate(node,fields){if(node.tag&&node.attrs.modifiers){var modifiers=node.attrs.modifiers||{};if(modifiers.invisible){qwebAddIf(node,_.str.sprintf("!kanban_compute_domain(%s)",JSON.stringify(modifiers.invisible)));}}
switch(node.tag){case'button':case'a':var type=node.attrs.type||'';if(_.indexOf('action,object,edit,open,delete,url,set_cover'.split(','),type)!==-1){_.each(node.attrs,function(v,k){if(_.indexOf('icon,type,name,args,string,context,states,kanban_states'.split(','),k)!==-1){node.attrs['data-'+k]=v;delete(node.attrs[k]);}});if(node.attrs['data-string']){node.attrs.title=node.attrs['data-string'];}
if(node.tag==='a'&&node.attrs['data-type']!=="url"){node.attrs.href='#';}else{node.attrs.type='button';}
var action_classes=" oe_kanban_action oe_kanban_action_"+node.tag;if(node.attrs['t-attf-class']){node.attrs['t-attf-class']+=action_classes;}else if(node.attrs['t-att-class']){node.attrs['t-att-class']+=" + '"+action_classes+"'";}else{node.attrs['class']=(node.attrs['class']||'')+action_classes;}}
break;}
if(node.children){for(var i=0,ii=node.children.length;i<ii;i++){transformQwebTemplate(node.children[i],fields);}}}
var KanbanRenderer=BasicRenderer.extend({className:'o_kanban_view',config:{KanbanColumn:KanbanColumn,KanbanRecord:KanbanRecord,},custom_events:_.extend({},BasicRenderer.prototype.custom_events||{},{close_quick_create:'_onCloseQuickCreate',cancel_quick_create:'_onCloseQuickCreate',set_progress_bar_state:'_onSetProgressBarState',start_quick_create:'_onStartQuickCreate',quick_create_column_updated:'_onQuickCreateColumnUpdated',}),events:_.extend({},BasicRenderer.prototype.events||{},{'keydown .o_kanban_record':'_onRecordKeyDown'}),init:function(parent,state,params){this._super.apply(this,arguments);this.widgets=[];this.qweb=new QWeb(config.isDebug(),{_s:session.origin},false);var templates=findInNode(this.arch,function(n){return n.tag==='templates';});transformQwebTemplate(templates,state.fields);this.qweb.add_template(utils.json_node_to_xml(templates));this.examples=params.examples;this.recordOptions=_.extend({},params.record_options,{qweb:this.qweb,viewType:'kanban',});this.columnOptions=_.extend({KanbanRecord:this.config.KanbanRecord},params.column_options);if(this.columnOptions.hasProgressBar){this.columnOptions.progressBarStates={};}
this.quickCreateEnabled=params.quickCreateEnabled;if(!params.readOnlyMode){var handleField=_.findWhere(this.state.fieldsInfo.kanban,{widget:'handle'});this.handleField=handleField&&handleField.name;}
this._setState(state);},on_attach_callback:function(){this._isInDom=true;_.invoke(this.widgets,'on_attach_callback');if(this.quickCreate){this.quickCreate.on_attach_callback();}},on_detach_callback:function(){this._isInDom=false;_.invoke(this.widgets,'on_detach_callback');},addQuickCreate:function(){return this.widgets[0].addQuickCreate();},giveFocus:function(){this.$('.o_kanban_record:first').focus();},quickCreateToggleFold:function(){this.quickCreate.toggleFold();this._toggleNoContentHelper();},updateColumn:function(localID,columnState,options){var self=this;var KanbanColumn=this.config.KanbanColumn;var newColumn=new KanbanColumn(this,columnState,this.columnOptions,this.recordOptions);var index=_.findIndex(this.widgets,{db_id:localID});var column=this.widgets[index];this.widgets[index]=newColumn;if(options&&options.state){this.state=options.state;}
return newColumn.appendTo(document.createDocumentFragment()).then(function(){var def;if(options&&options.openQuickCreate){def=newColumn.addQuickCreate();}
return Promise.resolve(def).then(function(){newColumn.$el.insertAfter(column.$el);self._toggleNoContentHelper();newColumn.on_attach_callback();column.destroy();});});},updateRecord:function(recordState){var isGrouped=!!this.state.groupedBy.length;var record;if(isGrouped){_.each(this.widgets,function(widget){record=record||_.findWhere(widget.records,{db_id:recordState.id,});});}else{record=_.findWhere(this.widgets,{db_id:recordState.id});}
if(record){return record.update(recordState);}
return Promise.resolve();},updateState:function(state){this._setState(state);return this._super.apply(this,arguments);},_focusOnNextCard:function(currentCardElement){var nextCard=currentCardElement.nextElementSibling;if(nextCard){nextCard.focus();}},_focusOnPreviousCard:function(currentCardElement){var previousCard=currentCardElement.previousElementSibling;if(previousCard&&previousCard.classList.contains("o_kanban_record")){previousCard.focus();return true;}},_getGhostColumns:function(){if(this.examples&&this.examples.ghostColumns){return this.examples.ghostColumns;}
return _.map(_.range(1,5),function(num){return _.str.sprintf(_t("Column %s"),num);});},_renderExampleBackground:function(fragment){var $background=$(qweb.render('KanbanView.ExamplesBackground',{ghostColumns:this._getGhostColumns()}));$background.appendTo(fragment);},_renderGhostDivs:function(fragment,nbDivs,options){var ghostDefs=[];for(var $ghost,i=0;i<nbDivs;i++){$ghost=$('<div>').addClass('o_kanban_record o_kanban_ghost');if(options&&options.inlineStyle){$ghost.attr('style',options.inlineStyle);}
var def=$ghost.appendTo(fragment);ghostDefs.push(def);}
return Promise.all(ghostDefs);},_renderGrouped:function(fragment){var self=this;var KanbanColumn=this.config.KanbanColumn;_.each(this.state.data,function(group){var column=new KanbanColumn(self,group,self.columnOptions,self.recordOptions);var def;if(!group.value){def=column.prependTo(fragment);self.widgets.unshift(column);}else{def=column.appendTo(fragment);self.widgets.push(column);}
self.defs.push(def);});if(this.$el.sortable('instance')!==undefined){this.$el.sortable('destroy');}
if(this.groupedByM2O){this.$el.sortable({axis:'x',items:'> .o_kanban_group',handle:'.o_kanban_header_title',cursor:'move',revert:150,delay:100,tolerance:'pointer',forcePlaceholderSize:true,stop:function(){var ids=[];self.$('.o_kanban_group').each(function(index,u){if(_.isNumber($(u).data('id'))){ids.push($(u).data('id'));}});self.trigger_up('resequence_columns',{ids:ids});},});if(this.createColumnEnabled){this.quickCreate=new ColumnQuickCreate(this,{examples:this.examples&&this.examples.examples,});this.defs.push(this.quickCreate.appendTo(fragment).then(function(){if(!self.state.data.length){self.quickCreate.toggleFold();self._renderExampleBackground(fragment);}}));}}},_renderUngrouped:function(fragment){var self=this;var KanbanRecord=this.config.KanbanRecord;var kanbanRecord;_.each(this.state.data,function(record){kanbanRecord=new KanbanRecord(self,record,self.recordOptions);self.widgets.push(kanbanRecord);var def=kanbanRecord.appendTo(fragment);self.defs.push(def);});var orderedBy=this.state.orderedBy;var hasHandle=this.handleField&&(orderedBy.length===0||orderedBy[0].name===this.handleField);if(hasHandle){this.$el.sortable({items:'.o_kanban_record:not(.o_kanban_ghost)',cursor:'move',revert:0,delay:0,tolerance:'pointer',forcePlaceholderSize:true,stop:function(event,ui){self._moveRecord(ui.item.data('record').db_id,ui.item.index());},});}
var prom=Promise.all(self.defs).then(function(){var options={};if(kanbanRecord){options.inlineStyle=kanbanRecord.$el.attr('style');}
return self._renderGhostDivs(fragment,6,options);});this.defs.push(prom);},_renderView:function(){var self=this;var isGrouped=!!this.state.groupedBy.length;var fragment=document.createDocumentFragment();var defs=[];this.defs=defs;if(isGrouped){this._renderGrouped(fragment);}else{this._renderUngrouped(fragment);}
delete this.defs;return this._super.apply(this,arguments).then(function(){return Promise.all(defs).then(function(){self.$el.empty();self.$el.toggleClass('o_kanban_grouped',isGrouped);self.$el.toggleClass('o_kanban_ungrouped',!isGrouped);self.$el.append(fragment);self._toggleNoContentHelper();if(self._isInDom){_.invoke(self.widgets,'on_attach_callback');}});});},_toggleNoContentHelper:function(remove){var displayNoContentHelper=!remove&&!this._hasContent()&&!!this.noContentHelp&&!(this.quickCreate&&!this.quickCreate.folded)&&!this.state.isGroupedByM2ONoColumn;var $noContentHelper=this.$('.o_view_nocontent');if(displayNoContentHelper&&!$noContentHelper.length){this.$el.append(this._renderNoContentHelper());}
if(!displayNoContentHelper&&$noContentHelper.length){$noContentHelper.remove();}},_setState:function(state){this.state=state;var groupByField=state.groupedBy[0];var cleanGroupByField=this._cleanGroupByField(groupByField);var groupByFieldAttrs=state.fields[cleanGroupByField];var groupByFieldInfo=state.fieldsInfo.kanban[cleanGroupByField];var draggable=true;if(groupByFieldAttrs){if(groupByFieldAttrs.type==="date"||groupByFieldAttrs.type==="datetime"){draggable=false;}else if(groupByFieldAttrs.readonly!==undefined){draggable=!(groupByFieldAttrs.readonly);}}
if(groupByFieldInfo){if(draggable&&groupByFieldInfo.readonly!==undefined){draggable=!(groupByFieldInfo.readonly);}}
this.groupedByM2O=groupByFieldAttrs&&(groupByFieldAttrs.type==='many2one');var relation=this.groupedByM2O&&groupByFieldAttrs.relation;var groupByTooltip=groupByFieldInfo&&groupByFieldInfo.options.group_by_tooltip;this.columnOptions=_.extend(this.columnOptions,{draggable:draggable,group_by_tooltip:groupByTooltip,groupedBy:groupByField,grouped_by_m2o:this.groupedByM2O,relation:relation,quick_create:this.quickCreateEnabled&&viewUtils.isQuickCreateEnabled(state),});this.createColumnEnabled=this.groupedByM2O&&this.columnOptions.group_creatable;},_cleanGroupByField:function(groupByField){var cleanGroupByField=groupByField;if(cleanGroupByField&&cleanGroupByField.indexOf(':')>-1){cleanGroupByField=cleanGroupByField.substring(0,cleanGroupByField.indexOf(':'));}
return cleanGroupByField;},_focusOnCardInColumn:function(eventTarget,direction){var currentColumn=eventTarget.parentElement;var hasSelectedACard=false;var cannotSelectAColumn=false;while(!hasSelectedACard&&!cannotSelectAColumn){var candidateColumn=direction==='LEFT'?currentColumn.previousElementSibling:currentColumn.nextElementSibling;currentColumn=candidateColumn;if(candidateColumn){var allCardsOfCandidateColumn=candidateColumn.getElementsByClassName('o_kanban_record');if(allCardsOfCandidateColumn.length){allCardsOfCandidateColumn[0].focus();hasSelectedACard=true;}}
else{direction==='LEFT'?this._focusOnPreviousCard(eventTarget):this._focusOnNextCard(eventTarget);cannotSelectAColumn=true;}}},_onCloseQuickCreate:function(){if(this.state.groupedBy.length){_.invoke(this.widgets,'cancelQuickCreate');}
this._toggleNoContentHelper();},_onQuickCreateColumnUpdated:function(ev){ev.stopPropagation();this._toggleNoContentHelper();this._updateExampleBackground();},_onRecordKeyDown:function(e){switch(e.which){case $.ui.keyCode.DOWN:this._focusOnNextCard(e.currentTarget);e.stopPropagation();e.preventDefault();break;case $.ui.keyCode.UP:const previousFocused=this._focusOnPreviousCard(e.currentTarget);if(!previousFocused){this.trigger_up('navigation_move',{direction:'up'});}
e.stopPropagation();e.preventDefault();break;case $.ui.keyCode.RIGHT:this._focusOnCardInColumn(e.currentTarget,'RIGHT');e.stopPropagation();e.preventDefault();break;case $.ui.keyCode.LEFT:this._focusOnCardInColumn(e.currentTarget,'LEFT');e.stopPropagation();e.preventDefault();break;}},_onSetProgressBarState:function(ev){if(!this.columnOptions.progressBarStates[ev.data.columnID]){this.columnOptions.progressBarStates[ev.data.columnID]={};}
_.extend(this.columnOptions.progressBarStates[ev.data.columnID],ev.data.values);},_onStartQuickCreate:function(){this._toggleNoContentHelper(true);},_updateExampleBackground:function(){var $elem=this.$('.o_kanban_example_background_container');if(!this.state.data.length&&!$elem.length){this._renderExampleBackground(this.$el);}else{$elem.remove();}},});return KanbanRenderer;});;

/* /web/static/src/js/views/kanban/kanban_renderer_mobile.js defined in bundle 'web.assets_backend' */
odoo.define('web.KanbanRendererMobile',function(require){"use strict";var config=require('web.config');var core=require('web.core');var KanbanRenderer=require('web.KanbanRenderer');var _t=core._t;var qweb=core.qweb;if(!config.device.isMobile){return;}
KanbanRenderer.include({events:_.extend({},KanbanRenderer.prototype.events,{'click .o_kanban_mobile_tab':'_onMobileTabClicked',}),ANIMATE:true,init:function(){this._super.apply(this,arguments);this.activeColumnIndex=0;this._scrollPosition=null;},on_attach_callback:function(){if(this._scrollPosition&&this.state.groupedBy.length&&this.widgets.length){var $column=this.widgets[this.activeColumnIndex].$el;$column.scrollLeft(this._scrollPosition.left);$column.scrollTop(this._scrollPosition.top);}
this._computeTabPosition();this._super.apply(this,arguments);},on_detach_callback:function(){if(this.state.groupedBy.length&&this.widgets.length){var $column=this.widgets[this.activeColumnIndex].$el;this._scrollPosition={left:$column.scrollLeft(),top:$column.scrollTop(),};}else{this._scrollPosition=null;}
this._super.apply(this,arguments);},addQuickCreate:function(){return this.widgets[this.activeColumnIndex].addQuickCreate();},updateColumn:function(localID){var self=this;var index=_.findIndex(this.widgets,{db_id:localID});var $column=this.widgets[index].$el;var left=$column.css('left');var right=$column.css('right');var scrollTop=$column.scrollTop();return this._super.apply(this,arguments).then(function(){$column=self.widgets[index].$el;if(_t.database.parameters.direction==='rtl'){$column.css({right:right});}else{$column.css({left:left});}
$column.scrollTop(scrollTop);self._enableSwipe();});},_computeColumnPosition:function(animate){if(this.widgets.length){var self=this;var moveToIndex=this.activeColumnIndex;var updateFunc=animate?'animate':'css';var rtl=_t.database.parameters.direction==='rtl';_.each(this.widgets,function(column,index){var columnID=column.id||column.db_id;var $column=self.$('.o_kanban_group[data-id="'+columnID+'"]');if(index===moveToIndex-1){if(rtl){$column[updateFunc]({right:'-100%'});}else{$column[updateFunc]({left:'-100%'});}}else if(index===moveToIndex+1){if(rtl){$column[updateFunc]({right:'100%'});}else{$column[updateFunc]({left:'100%'});}}else if(index===moveToIndex){if(rtl){$column[updateFunc]({right:'0%'});}else{$column[updateFunc]({left:'0%'});}}else if(index<moveToIndex){if(rtl){$column.css({right:'-100%'});}else{$column.css({left:'-100%'});}}else if(index>moveToIndex){if(rtl){$column.css({right:'100%'});}else{$column.css({left:'100%'});}}});}},_computeCurrentColumn:function(){if(this.widgets.length){var column=this.widgets[this.activeColumnIndex];if(!column){return;}
var columnID=column.id||column.db_id;this.$('.o_kanban_mobile_tab.o_current, .o_kanban_group.o_current').removeClass('o_current');this.$('.o_kanban_group[data-id="'+columnID+'"], '+'.o_kanban_mobile_tab[data-id="'+columnID+'"]').addClass('o_current');}},_computeTabPosition:function(){this._computeTabJustification();this._computeTabScrollPosition();},_computeTabScrollPosition:function(){if(this.widgets.length){var lastItemIndex=this.widgets.length-1;var moveToIndex=this.activeColumnIndex;var scrollToLeft=0;for(var i=0;i<moveToIndex;i++){var columnWidth=this._getTabWidth(this.widgets[i]);if(moveToIndex!==lastItemIndex&&i===moveToIndex-1){var partialWidth=0.75;scrollToLeft+=columnWidth*partialWidth;}else{scrollToLeft+=columnWidth;}}
this.$('.o_kanban_mobile_tabs').scrollLeft(scrollToLeft);}},_computeTabJustification:function(){if(this.widgets.length){var self=this;var widthChilds=this.widgets.reduce(function(total,column){return total+self._getTabWidth(column);},0);var $tabs=this.$('.o_kanban_mobile_tabs');$tabs.toggleClass('justify-content-around',$tabs.outerWidth()>=widthChilds);}},_enableSwipe:function(){var self=this;var step=_t.database.parameters.direction==='rtl'?-1:1;this.$el.swipe({excludedElements:".o_kanban_mobile_tabs",swipeLeft:function(){var moveToIndex=self.activeColumnIndex+step;if(moveToIndex<self.widgets.length){self._moveToGroup(moveToIndex,self.ANIMATE);}},swipeRight:function(){var moveToIndex=self.activeColumnIndex-step;if(moveToIndex>-1){self._moveToGroup(moveToIndex,self.ANIMATE);}}});},_getTabWidth:function(column){var columnID=column.id||column.db_id;return this.$('.o_kanban_mobile_tab[data-id="'+columnID+'"]').outerWidth();},_layoutUpdate:function(animate){this._computeCurrentColumn();this._computeTabPosition();this._computeColumnPosition(animate);},_moveToGroup:function(moveToIndex,animate){var self=this;if(moveToIndex<0||moveToIndex>=this.widgets.length){this._layoutUpdate(animate);return Promise.resolve();}
this.activeColumnIndex=moveToIndex;var column=this.widgets[this.activeColumnIndex];return new Promise(function(resolve){self.trigger_up('kanban_load_records',{columnID:column.db_id,onSuccess:function(){self._layoutUpdate(animate);resolve();},});});},_renderGrouped:function(fragment){var self=this;this._super.apply(this,arguments);this.defs.push(Promise.all(this.defs).then(function(){var data=[];_.each(self.state.data,function(group){if(!group.value){group=_.extend({},group,{value:_t('Undefined')});data.unshift(group);}else{data.push(group);}});$(qweb.render('KanbanView.MobileTabs',{data:data,})).prependTo(fragment);}));},_renderView:function(){var self=this;return this._super.apply(this,arguments).then(function(){if(self.state.groupedBy.length){return self._moveToGroup(0);}});},_onMobileTabClicked:function(event){this._moveToGroup($(event.currentTarget).index(),true);},});});;

/* /web/static/src/js/views/kanban/kanban_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.KanbanView',function(require){"use strict";var BasicView=require('web.BasicView');var config=require('web.config');var core=require('web.core');var KanbanController=require('web.KanbanController');var kanbanExamplesRegistry=require('web.kanban_examples_registry');var KanbanModel=require('web.KanbanModel');var KanbanRenderer=require('web.KanbanRenderer');var utils=require('web.utils');var _lt=core._lt;var KanbanView=BasicView.extend({accesskey:"k",display_name:_lt("Kanban"),icon:'fa-th-large',mobile_friendly:true,config:_.extend({},BasicView.prototype.config,{Model:KanbanModel,Controller:KanbanController,Renderer:KanbanRenderer,}),jsLibs:[],viewType:'kanban',init:function(viewInfo,params){this._super.apply(this,arguments);this.loadParams.limit=this.loadParams.limit||40;this.loadParams.openGroupByDefault=config.device.isMobile?false:true;this.loadParams.type='list';this.noDefaultGroupby=params.noDefaultGroupby;var progressBar;utils.traverse(this.arch,function(n){var isProgressBar=(n.tag==='progressbar');if(isProgressBar){progressBar=_.clone(n.attrs);progressBar.colors=JSON.parse(progressBar.colors);progressBar.sum_field=progressBar.sum_field||false;}
return!isProgressBar;});if(progressBar){this.loadParams.progressBar=progressBar;}
var activeActions=this.controllerParams.activeActions;var archAttrs=this.arch.attrs;activeActions=_.extend(activeActions,{group_create:this.arch.attrs.group_create?!!JSON.parse(archAttrs.group_create):true,group_edit:archAttrs.group_edit?!!JSON.parse(archAttrs.group_edit):true,group_delete:archAttrs.group_delete?!!JSON.parse(archAttrs.group_delete):true,});this.rendererParams.column_options={editable:activeActions.group_edit,deletable:activeActions.group_delete,archivable:archAttrs.archivable?!!JSON.parse(archAttrs.archivable):true,group_creatable:activeActions.group_create&&!config.device.isMobile,quickCreateView:archAttrs.quick_create_view||null,recordsDraggable:archAttrs.records_draggable?!!JSON.parse(archAttrs.records_draggable):true,hasProgressBar:!!progressBar,};this.rendererParams.record_options={editable:activeActions.edit,deletable:activeActions.delete,read_only_mode:params.readOnlyMode,selectionMode:params.selectionMode,};this.rendererParams.quickCreateEnabled=this._isQuickCreateEnabled();this.rendererParams.readOnlyMode=params.readOnlyMode;var examples=archAttrs.examples;if(examples){this.rendererParams.examples=kanbanExamplesRegistry.get(examples);}
this.controllerParams.on_create=archAttrs.on_create;this.controllerParams.hasButtons=!params.selectionMode?true:false;this.controllerParams.quickCreateEnabled=this.rendererParams.quickCreateEnabled;if(config.device.isMobile){this.jsLibs.push('/web/static/lib/jquery.touchSwipe/jquery.touchSwipe.js');}},_isQuickCreateEnabled:function(){if(!this.controllerParams.activeActions.create){return false;}
if(this.arch.attrs.quick_create!==undefined){return!!JSON.parse(this.arch.attrs.quick_create);}
return true;},_updateMVCParams:function(){this._super.apply(this,arguments);if(!this.noDefaultGroupby){var defaultGroupBy=this.arch.attrs.default_group_by;this.loadParams.groupBy=defaultGroupBy?[defaultGroupBy]:(this.loadParams.groupedBy||[]);}},});return KanbanView;});;

/* /web/static/src/js/views/kanban/quick_create_form_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.QuickCreateFormView',function(require){"use strict";var BasicModel=require('web.BasicModel');var FormController=require('web.FormController');var FormRenderer=require('web.FormRenderer');var FormView=require('web.FormView');var QuickCreateFormRenderer=FormRenderer.extend({start:function(){this.$el.addClass('o_xxs_form_view');return this._super.apply(this,arguments);},_onNavigationMove:function(ev){var direction=ev.data.direction;if(direction==='cancel'||direction==='next_line'){ev.stopPropagation();this.trigger_up(direction==='cancel'?'cancel':'add');}else{this._super.apply(this,arguments);}},});var QuickCreateFormModel=BasicModel.extend({getChanges:function(localID){var record=this.localData[localID];return this._generateChanges(record,{changesOnly:false});},});var QuickCreateFormController=FormController.extend({commitChanges:function(){var mutexDef=this.mutex.getUnlockedDef();return Promise.all([mutexDef,this.renderer.commitChanges(this.handle)]);},getChanges:function(){return this.model.getChanges(this.handle);},});var QuickCreateFormView=FormView.extend({withControlPanel:false,config:_.extend({},FormView.prototype.config,{Model:QuickCreateFormModel,Renderer:QuickCreateFormRenderer,Controller:QuickCreateFormController,}),});return QuickCreateFormView;});;

/* /web/static/src/js/views/list/list_editable_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.EditableListRenderer',function(require){"use strict";var core=require('web.core');var dom=require('web.dom');var ListRenderer=require('web.ListRenderer');var utils=require('web.utils');var _t=core._t;ListRenderer.include({RESIZE_DELAY:200,custom_events:_.extend({},ListRenderer.prototype.custom_events,{navigation_move:'_onNavigationMove',}),events:_.extend({},ListRenderer.prototype.events,{'click .o_field_x2many_list_row_add a':'_onAddRecord','click .o_group_field_row_add a':'_onAddRecordToGroup','keydown .o_field_x2many_list_row_add a':'_onKeyDownAddRecord','click tbody td.o_data_cell':'_onCellClick','click tbody tr:not(.o_data_row)':'_onEmptyRowClick','click tfoot':'_onFooterClick','click tr .o_list_record_remove':'_onRemoveIconClick',}),init:function(parent,state,params){var self=this;this._super.apply(this,arguments);this.editable=params.editable;this.isMultiEditable=params.isMultiEditable;this.columnWidths=false;this.addCreateLine=params.addCreateLine;this.addCreateLineInGroups=params.addCreateLineInGroups;if(this.addCreateLine){this.creates=[];_.each(this.arch.children,function(child){if(child.tag!=='control'){return;}
_.each(child.children,function(child){if(child.tag!=='create'||child.attrs.invisible){return;}
self.creates.push({context:child.attrs.context,string:child.attrs.string,});});});if(this.creates.length===0){this.creates.push({string:_t("Add a line"),});}}
this.addTrashIcon=params.addTrashIcon;this.isMany2Many=params.isMany2Many;this.currentRow=null;this.currentFieldIndex=null;this.isResizing=false;this.eventListeners=[];},start:function(){core.bus.on('click',this,this._onWindowClicked.bind(this));core.bus.on('resize',this,_.debounce(this._onResize.bind(this),this.RESIZE_DELAY));return this._super();},destroy:function(){this.eventListeners.forEach(listener=>{const{type,el,callback,options}=listener;el.removeEventListener(type,callback,options);});return this._super.apply(this,arguments);},on_attach_callback:function(){this.isInDOM=true;this._freezeColumnWidths();this._super();},on_detach_callback:function(){this.isInDOM=false;this._super();},canBeSaved:function(recordID){if((recordID||this.state.id)===this.state.id){recordID=this.getEditableRecordID();if(recordID===null){return[];}}
var fieldNames=this._super(recordID);this.$('.o_selected_row .o_data_cell').removeClass('o_invalid_cell');this.$('.o_selected_row .o_data_cell:has(> .o_field_invalid)').addClass('o_invalid_cell');return fieldNames;},confirmChange:function(state,recordID){var self=this;return this._super.apply(this,arguments).then(function(widgets){if(widgets.length){var $row=self._getRow(recordID);var record=self._getRecord(recordID);self._setDecorationClasses(record,$row);self._updateFooter();}
return widgets;});},confirmUpdate:function(state,id,fields,ev){var self=this;var oldData=this.state.data;this.state=state;return this.confirmChange(state,id,fields,ev).then(function(){var record=self._getRecord(id);if(!record){return;}
_.each(oldData,function(rec){if(rec.id!==id){self._destroyFieldWidgets(rec.id);}});self.defs=[];var $newBody=self._renderBody();var defs=self.defs;delete self.defs;return Promise.all(defs).then(function(){_.each(self.columns,function(node){self._registerModifiers(node,record,null,{mode:'edit'});});var currentRowID;var currentWidget;var focusedElement;var selectionRange;if(self.currentRow!==null){currentRowID=self._getRecordID(self.currentRow);currentWidget=self.allFieldWidgets[currentRowID][self.currentFieldIndex];if(currentWidget){focusedElement=currentWidget.getFocusableElement().get(0);if(currentWidget.formatType!=='boolean'){selectionRange=dom.getSelectionRange(focusedElement);}}}
var $editedRow=self._getRow(id);$editedRow.nextAll('.o_data_row').remove();$editedRow.prevAll('.o_data_row').remove();var $newRow=$newBody.find('.o_data_row[data-id="'+id+'"]');$newRow.prevAll('.o_data_row').get().reverse().forEach(function(row){$(row).insertBefore($editedRow);});$newRow.nextAll('.o_data_row').get().reverse().forEach(function(row){$(row).insertAfter($editedRow);});if(self.currentRow!==null){var newRowIndex=$editedRow.prop('rowIndex')-1;self.currentRow=newRowIndex;return self._selectCell(newRowIndex,self.currentFieldIndex,{force:true}).then(function(){currentWidget=self.allFieldWidgets[currentRowID][self.currentFieldIndex];if(currentWidget){focusedElement=currentWidget.getFocusableElement().get(0);if(selectionRange){dom.setSelectionRange(focusedElement,selectionRange);}}});}});});},editFirstRecord:function(ev){const $borderRow=this._getBorderRow(ev.data.side||'first');this._selectCell($borderRow.prop('rowIndex')-1,ev.data.cellIndex||0);},editRecord:function(recordID){var $row=this._getRow(recordID);var rowIndex=$row.prop('rowIndex')-1;this._selectCell(rowIndex,0);},focusCell:function(recordId,column){var $row=this._getRow(recordId);var cellIndex=this.columns.indexOf(column);$row.find('.o_data_cell')[cellIndex].focus();},getEditableRecordID:function(){if(this.currentRow!==null){return this._getRecordID(this.currentRow);}
return null;},isInMultipleRecordEdition:function(recordId){return this.isEditable()&&this.isMultiEditable&&this.selection.includes(recordId);},isEditable:function(){return this.editable||(this.isMultiEditable&&this.selection.length);},removeLine:function(state,recordID){this.state=state;var $row=this._getRow(recordID);if($row.length===0){return;}
if($row.prop('rowIndex')-1===this.currentRow){this.currentRow=null;this._enableRecordSelectors();}
this._destroyFieldWidgets(recordID);if(this.state.count>=4){$row.remove();}else{var $emptyRow=this._renderEmptyRow();$row.replaceWith($emptyRow);if(this.editable==="top"){var $lastDataRow=this.$('.o_data_row:last');if($lastDataRow.length){$emptyRow.insertAfter($lastDataRow);}}}},setRowMode:function(recordID,mode){var self=this;var record=self._getRecord(recordID);if(!record){return Promise.resolve();}
var editMode=(mode==='edit');var $row=this._getRow(recordID);this.currentRow=editMode?$row.prop('rowIndex')-1:null;var $tds=$row.children('.o_data_cell');var oldWidgets=_.clone(this.allFieldWidgets[record.id]);var options={renderInvisible:editMode,renderWidgets:editMode,};options.mode=editMode?'edit':'readonly';var defs=[];this.defs=defs;_.each(this.columns,function(node,colIndex){var $td=$tds.eq(colIndex);var $newTd=self._renderBodyCell(record,node,colIndex,options);if($td.hasClass('o_list_button')){self._unregisterModifiersElement(node,recordID,$td.children());}
if(editMode){$td.empty().append($newTd.contents());}else{self._unregisterModifiersElement(node,recordID,$td);$td.replaceWith($newTd);}});delete this.defs;_.each(oldWidgets,this._destroyFieldWidget.bind(this,recordID));$row.toggleClass('o_selected_row',editMode);if(editMode){this._disableRecordSelectors();}else{this._enableRecordSelectors();}
return Promise.all(defs).then(function(){core.bus.trigger('DOM_updated');});},unselectRow:function(){if(this.currentRow===null){return Promise.resolve();}
var recordID=this._getRecordID(this.currentRow);var recordWidgets=this.allFieldWidgets[recordID];function toggleWidgets(disabled){_.each(recordWidgets,function(widget){var $el=widget.getFocusableElement();$el.prop('disabled',disabled);});}
toggleWidgets(true);return new Promise((resolve,reject)=>{this.trigger_up('save_line',{recordID:recordID,onSuccess:resolve,onFailure:reject,});}).then(changedFields=>{this._enableRecordSelectors();return changedFields&&changedFields.length&&this.isInMultipleRecordEdition(recordID);}).guardedCatch(()=>{toggleWidgets(false);});},updateState:function(state,params){this.columnWidths=false;if(params.keepWidths&&this.$el.is(':visible')){this._storeColumnWidths();}
if(params.noRender){this.allModifiersData=[];}
return this._super.apply(this,arguments);},_addEventListener:function(type,el,callback,options){el.addEventListener(type,callback,options);this.eventListeners.push({type,el,callback,options});},_destroyFieldWidgets:function(recordID){if(recordID in this.allFieldWidgets){var widgetsToDestroy=this.allFieldWidgets[recordID].slice();_.each(widgetsToDestroy,this._destroyFieldWidget.bind(this,recordID));delete this.allFieldWidgets[recordID];}},_disableRecordSelectors:function(){this.$('.o_list_record_selector input').attr('disabled','disabled');},_enableRecordSelectors:function(){this.$('.o_list_record_selector input').attr('disabled',false);},_freezeColumnWidths:function(){if(!this.columnWidths&&(!this._hasVisibleRecords(this.state)||!this.$el.is(':visible'))){return;}
const table=this.el.getElementsByTagName('table')[0];const thead=table.getElementsByTagName('thead')[0];const thElements=[...thead.getElementsByTagName('th')];let columnWidths=this.columnWidths;if(!columnWidths){table.style.tableLayout='auto';thElements.forEach((th)=>{th.style.width=null;th.style.maxWidth=null;});columnWidths=this._squeezeTable();}
thElements.forEach((th,index)=>{th.style.width=`${columnWidths[index]}px`;});table.style.tableLayout='fixed';},_getBorderRow:function(side){let $borderDataRow=this.$(`.o_data_row:${side}`);if(!this._isRecordEditable($borderDataRow.data('id'))){$borderDataRow=this._getNearestEditableRow($borderDataRow,side==='first');}
return $borderDataRow;},_getColumnsTotalWidth($thead){return this.columns.reduce((acc,column)=>acc+(column.attrs.relativeWidth||0),0);},_getColumnWidth:function(column){if(column.attrs.width){return column.attrs.width;}
const fieldsInfo=this.state.fieldsInfo.list;const name=column.attrs.name;if(!fieldsInfo[name]){return'1';}
const widget=fieldsInfo[name].Widget.prototype;if('widthInList'in widget){return widget.widthInList;}
const field=this.state.fields[name];if(!field){return'1';}
const fixedWidths={boolean:'50px',date:'92px',datetime:'146px',float:'92px',integer:'74px',monetary:'104px',};let type=field.type;if(fieldsInfo[name].widget in fixedWidths){type=fieldsInfo[name].widget;}
return fixedWidths[type]||'1';},_getNearestEditableRow:function($row,next){const direction=next?'next':'prev';let $nearestRow;if(this.editable){$nearestRow=$row[direction]();if(!$nearestRow.hasClass('o_data_row')){var $nextBody=$row.closest('tbody')[direction]();while($nextBody.length&&!$nextBody.find('.o_data_row').length){$nextBody=$nextBody[direction]();}
$nearestRow=$nextBody.find(`.o_data_row:${next ? 'first' : 'last'}`);}}else{const recordId=$row.data('id');const rowSelectionIndex=this.selection.indexOf(recordId);let nextRowIndex;if(rowSelectionIndex<0){nextRowIndex=next?0:this.selection.length-1;}else{nextRowIndex=rowSelectionIndex+(next?1:-1);}
$nearestRow=this._getRow(this.selection[nextRowIndex]);}
return $nearestRow;},_getNumberOfCols:function(){var n=this._super();if(this.addTrashIcon){n++;}
return n;},_getRecord:function(recordId){var record;utils.traverse_records(this.state,function(r){if(r.id===recordId){record=r;}});return record;},_getRecordID:function(rowIndex){var $tr=this.$('table.o_list_table > tbody tr').eq(rowIndex);return $tr.data('id');},_getRow:function(recordId){return this.$('.o_data_row[data-id="'+recordId+'"]');},_hasVisibleRecords:function(list){if(!list.groupedBy.length){return!!list.data.length;}else{var hasVisibleRecords=false;for(var i=0;i<list.data.length;i++){hasVisibleRecords=hasVisibleRecords||this._hasVisibleRecords(list.data[i]);}
return hasVisibleRecords;}},_isRecordEditable:function(recordID){return this.editable||(this.isMultiEditable&&this.selection.includes(recordID));},_moveToNextLine:function(options){this._moveToSideLine(true,options);},_moveToPreviousLine:function(options){this._moveToSideLine(false,options);},_moveToSideLine:function(next,options){options=options||{};const recordID=this._getRecordID(this.currentRow);this.commitChanges(recordID).then(()=>{const record=this._getRecord(recordID);const multiEdit=this.isInMultipleRecordEdition(recordID);if(!multiEdit){const fieldNames=this.canBeSaved(recordID);if(fieldNames.length&&(record.isDirty()||options.forceCreate)){return;}}
const side=next?'first':'last';const borderRowIndex=this._getBorderRow(side).prop('rowIndex')-1;const cellIndex=next?0:this.allFieldWidgets[recordID].length-1;const cellOptions={inc:next?1:-1,force:true};const $currentRow=this._getRow(recordID);const $nextRow=this._getNearestEditableRow($currentRow,next);let nextRowIndex=null;let groupId;if(!this.isGrouped){if($nextRow.length){nextRowIndex=$nextRow.prop('rowIndex')-1;}else if(!this.editable){nextRowIndex=borderRowIndex;}else if(!options.forceCreate&&!record.isDirty()){this.trigger_up('discard_changes',{recordID:recordID,onSuccess:this.trigger_up.bind(this,'activate_next_widget',{side:side}),});return;}}else{var $directNextRow=$currentRow.next();if(next&&this.editable==="bottom"&&$directNextRow.hasClass('o_add_record_row')){if(options.forceCreate||record.isDirty()){groupId=$directNextRow.data('group-id');}else{nextRowIndex=($nextRow.prop('rowIndex')-1)||null;this.trigger_up('discard_changes',{recordID:recordID,onSuccess:()=>{if(nextRowIndex!==null){if(!record.res_id){nextRowIndex--;}
this._selectCell(nextRowIndex,cellIndex,cellOptions);}else{this._selectCell(borderRowIndex,cellIndex,cellOptions);}},});return;}}else{nextRowIndex=$nextRow.length?($nextRow.prop('rowIndex')-1):borderRowIndex;}}
if(nextRowIndex!==null){this._selectCell(nextRowIndex,cellIndex,cellOptions);}else if(this.editable){this.unselectRow().then(this.trigger_up.bind(this,'add_record',{groupId:groupId,onFail:this._selectCell.bind(this,borderRowIndex,cellIndex,cellOptions),}));}});},_processColumns:function(){const oldColumns=this.columns;this._super.apply(this,arguments);if(this.columnWidths&&oldColumns&&oldColumns.length===this.columns.length){for(let i=0;i<oldColumns.length;i++){if(oldColumns[i]!==this.columns[i]){this.columnWidths=false;break;}}}else{this.columnWidths=false;}
if(!this.columnWidths){this.columns.forEach((column)=>{const width=this._getColumnWidth(column);if(width.match(/[a-zA-Z]/)){column.attrs.absoluteWidth=width;}else{column.attrs.relativeWidth=parseFloat(width,10);}});}},_render:function(){this.currentRow=null;this.currentFieldIndex=null;return this._super.apply(this,arguments);},_renderGroup:function(group){var result=this._super.apply(this,arguments);if(!group.groupedBy.length&&this.addCreateLineInGroups){var $groupBody=result[0];var $a=$('<a href="#" role="button">').text(_t("Add a line")).attr('data-group-id',group.id);var $td=$('<td>').attr('colspan',this._getNumberOfCols()).addClass('o_group_field_row_add').attr('tabindex',-1).append($a);var $tr=$('<tr>',{class:'o_add_record_row'}).attr('data-group-id',group.id).append($td);$groupBody.append($tr.prepend($('<td>').html('&nbsp;')));}
return result;},_renderBody:function(){var self=this;var $body=this._super.apply(this,arguments);if(this.hasHandle){$body.sortable({axis:'y',items:'> tr.o_data_row',helper:'clone',handle:'.o_row_handle',stop:function(event,ui){if(self.currentRow!==null){var currentID=self.state.data[self.currentRow].id;self.currentRow=self._getRow(currentID).index();}
self.unselectRow().then(function(){self._moveRecord(ui.item.data('id'),ui.item.index());});},});}
return $body;},_renderFooter:function(){const $footer=this._super.apply(this,arguments);if(this.addTrashIcon){$footer.find('tr').append($('<td>'));}
return $footer;},_renderHeader:function(){var $thead=this._super.apply(this,arguments);if(!this.columnWidths){if(!this._hasVisibleRecords(this.state)){var totalWidth=this._getColumnsTotalWidth($thead);this.columns.forEach(function(column){let width;if(column.attrs.absoluteWidth){width=column.attrs.absoluteWidth;}else if(column.attrs.relativeWidth){width=((column.attrs.relativeWidth/totalWidth*100)+'%');}
if(width){$thead.find('th[data-name='+column.attrs.name+']').css('width',width);}});}else{this.columns.forEach(function(column){if(column.attrs.absoluteWidth){let width=column.attrs.absoluteWidth;$thead.find('th[data-name='+column.attrs.name+']').css('min-width',width);}});}}
if(this.addTrashIcon){$thead.find('tr').append($('<th>',{class:'o_list_record_remove_header'}));}
return $thead;},_renderHeaderCell:function(){const $th=this._super.apply(this,arguments);if($th[0].innerHTML.length&&this._hasVisibleRecords(this.state)){const resizeHandle=document.createElement('span');resizeHandle.classList='o_resize';resizeHandle.onclick=this._onClickResize.bind(this);resizeHandle.onmousedown=this._onStartResize.bind(this);$th.append(resizeHandle);}
return $th;},_renderRow:function(record,index){var $row=this._super.apply(this,arguments);if(this.addTrashIcon){var $icon=this.isMany2Many?$('<button>',{'class':'fa fa-times','name':'unlink','aria-label':_t('Unlink row ')+(index+1)}):$('<button>',{'class':'fa fa-trash-o','name':'delete','aria-label':_t('Delete row ')+(index+1)});var $td=$('<td>',{class:'o_list_record_remove'}).append($icon);$row.append($td);}
return $row;},_renderRows:function(){var $rows=this._super();if(this.addCreateLine){var $tr=$('<tr>');var colspan=this._getNumberOfCols();if(this.handleField){colspan=colspan-1;$tr.append('<td>');}
var $td=$('<td>').attr('colspan',colspan).addClass('o_field_x2many_list_row_add');$tr.append($td);$rows.push($tr);_.each(this.creates,function(create,index){var $a=$('<a href="#" role="button">').attr('data-context',create.context).text(create.string);if(index>0){$a.addClass('ml16');}
$td.append($a);});}
return $rows;},_renderView:function(){this.currentRow=null;return this._super.apply(this,arguments).then(()=>{const table=this.el.getElementsByTagName('table')[0];if(table){table.classList.toggle('o_empty_list',!this._hasVisibleRecords(this.state));this._freezeColumnWidths();}});},_selectCell:function(rowIndex,fieldIndex,options){options=options||{};if(!options.force&&rowIndex===this.currentRow&&fieldIndex===this.currentFieldIndex){return Promise.resolve();}
var wrap=options.wrap===undefined?true:options.wrap;var self=this;return this._selectRow(rowIndex).then(function(){var recordID=self._getRecordID(rowIndex);var record=self._getRecord(recordID);if(fieldIndex>=(self.allFieldWidgets[record.id]||[]).length){return Promise.reject();}
var oldFieldIndex=self.currentFieldIndex;self.currentFieldIndex=fieldIndex;fieldIndex=self._activateFieldWidget(record,fieldIndex,{inc:options.inc||1,wrap:wrap,event:options&&options.event,});if(fieldIndex<0){self.currentFieldIndex=oldFieldIndex;return Promise.reject();}
self.currentFieldIndex=fieldIndex;});},_selectRow:function(rowIndex){if(rowIndex===this.currentRow){return Promise.resolve();}
if(!this.columnWidths){this._storeColumnWidths();}
this._freezeColumnWidths();var recordId=this._getRecordID(rowIndex);var self=this;return this.unselectRow().then(noSelectNext=>{if(noSelectNext){return Promise.resolve();}
if(!recordId){return Promise.reject();}
return new Promise(function(resolve){self.trigger_up('edit_line',{recordId:recordId,onSuccess:function(){self._disableRecordSelectors();resolve();},});});});},_squeezeTable:function(){const table=this.el.getElementsByTagName('table')[0];const thead=table.getElementsByTagName('thead')[0];const thElements=[...thead.getElementsByTagName('th')];const columnWidths=thElements.map(th=>th.offsetWidth);const getWidth=th=>columnWidths[thElements.indexOf(th)]||0;const getTotalWidth=()=>thElements.reduce((tot,th,i)=>tot+columnWidths[i],0);const shrinkColumns=(columns,width)=>{let thresholdReached=false;columns.forEach(th=>{const index=thElements.indexOf(th);let maxWidth=columnWidths[index]-Math.ceil(width/columns.length);if(maxWidth<92){maxWidth=92;thresholdReached=true;}
th.style.maxWidth=`${maxWidth}px`;columnWidths[index]=maxWidth;});return thresholdReached;};const sortedThs=[...thead.getElementsByTagName('th')].sort((a,b)=>getWidth(b)-getWidth(a));const allowedWidth=table.parentNode.offsetWidth;let totalWidth=getTotalWidth();let stop=false;let index=0;while(totalWidth>allowedWidth&&!stop){index++;const largests=sortedThs.slice(0,index);while(getWidth(largests[0])===getWidth(sortedThs[index])){largests.push(sortedThs[index]);index++;}
const nextLargest=sortedThs[index];const totalToRemove=totalWidth-allowedWidth;const canRemove=(getWidth(largests[0])-getWidth(nextLargest))*largests.length;stop=shrinkColumns(largests,Math.min(totalToRemove,canRemove));totalWidth=getTotalWidth();}
return columnWidths;},_storeColumnWidths:function(){this.columnWidths=this.$('thead th').toArray().map(function(th){return $(th).outerWidth();});},_onAddRecordToGroup:function(ev){ev.preventDefault();ev.stopPropagation();var self=this;const target=ev.target.tagName!=='A'?ev.target.getElementsByTagName('A')[0]:ev.target;const groupId=target.dataset.groupId;this.currentGroupId=groupId;this.unselectRow().then(function(){self.trigger_up('add_record',{groupId:groupId,});});},_onAddRecord:function(ev){ev.preventDefault();ev.stopPropagation();var self=this;this.unselectRow().then(function(){self.trigger_up('add_record',{context:ev.currentTarget.dataset.context&&[ev.currentTarget.dataset.context]});});},_onCellClick:function(event){var $td=$(event.currentTarget);var $tr=$td.parent();var rowIndex=$tr.prop('rowIndex')-1;if(!this._isRecordEditable($tr.data('id'))||$(event.target).prop('special_click')){return;}
var fieldIndex=Math.max($tr.find('.o_field_cell').index($td),0);this._selectCell(rowIndex,fieldIndex,{event:event});},_onClickResize:function(ev){ev.stopPropagation();ev.preventDefault();},_onEmptyRowClick:function(){this.unselectRow();},_onFooterClick:function(){this.unselectRow();},_onKeyDown:function(ev){const $target=$(ev.currentTarget);const $tr=$target.closest('tr');const recordEditable=this._isRecordEditable($tr.data('id'));if(recordEditable&&ev.keyCode===$.ui.keyCode.ENTER&&$tr.hasClass('o_selected_row')){return;}
if(recordEditable&&ev.keyCode===$.ui.keyCode.ENTER&&!$tr.hasClass('o_selected_row')&&!$tr.hasClass('o_group_header')){ev.stopPropagation();ev.preventDefault();if($target.closest('td').hasClass('o_group_field_row_add')){this._onAddRecordToGroup(ev);}else{this._onCellClick(ev);}}else{this._super.apply(this,arguments);}},_onKeyDownAddRecord:function(e){switch(e.keyCode){case $.ui.keyCode.ENTER:e.stopPropagation();e.preventDefault();this._onAddRecord(e);break;}},_onNavigationMove:function(ev){var self=this;if(this.currentRow===null&&ev.data.direction==='up'){return;}
ev.stopPropagation();switch(ev.data.direction){case'previous':if(this.currentFieldIndex>0){this._selectCell(this.currentRow,this.currentFieldIndex-1,{inc:-1,wrap:false}).guardedCatch(this._moveToPreviousLine.bind(this));}else{this._moveToPreviousLine();}
break;case'next':if(this.currentFieldIndex+1<this.columns.length){this._selectCell(this.currentRow,this.currentFieldIndex+1,{wrap:false}).guardedCatch(this._moveToNextLine.bind(this));}else{this._moveToNextLine();}
break;case'next_line':if(!this.editable&&this.selection.length===1&&this._getRecordID(this.currentRow)===ev.target.dataPointID){this.unselectRow();}else{this._moveToNextLine({forceCreate:true});}
break;case'cancel':ev.data.originalEvent.stopPropagation();var rowIndex=this.currentRow;var cellIndex=this.currentFieldIndex+1;this.trigger_up('discard_changes',{recordID:ev.target.dataPointID,onSuccess:function(){self._enableRecordSelectors();var recordId=self._getRecordID(rowIndex);if(recordId){var correspondingRow=self._getRow(recordId);correspondingRow.children().eq(cellIndex).focus();}else if(self.currentGroupId){self.$('a[data-group-id="'+self.currentGroupId+'"]').focus();}else{self.$('.o_field_x2many_list_row_add a:first').focus();}}});break;}},_onRemoveIconClick:function(event){event.stopPropagation();var $row=$(event.target).closest('tr');var id=$row.data('id');if($row.hasClass('o_selected_row')){this.trigger_up('list_record_remove',{id:id});}else{var self=this;this.unselectRow().then(function(){self.trigger_up('list_record_remove',{id:id});});}},_onResize:function(){this.columnWidths=false;this._freezeColumnWidths();},_onRowClicked:function(ev){if(!this._isRecordEditable(ev.currentTarget.dataset.id)){if(this.getEditableRecordID()){this.unselectRow();}else{this._super.apply(this,arguments);}}},_onSortColumn:function(){if(this.currentRow===null&&!this.isResizing){this._super.apply(this,arguments);}},_onStartResize:function(ev){if(ev.which!==1){return;}
ev.preventDefault();ev.stopPropagation();this.isResizing=true;const table=this.el.getElementsByTagName('table')[0];const th=ev.target.closest('th');table.style.width=`${table.offsetWidth}px`;const thPosition=[...th.parentNode.children].indexOf(th);const resizingColumnElements=[...table.getElementsByTagName('tr')].filter(tr=>tr.children.length===th.parentNode.children.length).map(tr=>tr.children[thPosition]);const optionalDropdown=this.el.getElementsByClassName('o_optional_columns')[0];const initialX=ev.pageX;const initialWidth=th.offsetWidth;const initialTableWidth=table.offsetWidth;const initialDropdownX=optionalDropdown?optionalDropdown.offsetLeft:null;const resizeStoppingEvents=['keydown','mousedown','mouseup',];table.classList.add('o_resizing');resizingColumnElements.forEach(el=>el.classList.add('o_column_resizing'));const resizeHeader=ev=>{ev.preventDefault();ev.stopPropagation();const delta=ev.pageX-initialX;const newWidth=Math.max(10,initialWidth+delta);const tableDelta=newWidth-initialWidth;th.style.width=`${newWidth}px`;table.style.width=`${initialTableWidth + tableDelta}px`;if(optionalDropdown){optionalDropdown.style.left=`${initialDropdownX + tableDelta}px`;}};this._addEventListener('mousemove',window,resizeHeader);const stopResize=ev=>{if(ev.type==='mousedown'&&ev.which===1){return;}
ev.preventDefault();ev.stopPropagation();clearTimeout(this.resizeTimeout);this.resizeTimeout=setTimeout(()=>{this.isResizing=false;},100);window.removeEventListener('mousemove',resizeHeader);table.classList.remove('o_resizing');resizingColumnElements.forEach(el=>el.classList.remove('o_column_resizing'));resizeStoppingEvents.forEach(stoppingEvent=>{window.removeEventListener(stoppingEvent,stopResize);});document.activeElement.blur();};resizeStoppingEvents.forEach(stoppingEvent=>{this._addEventListener(stoppingEvent,window,stopResize);});},_onToggleOptionalColumnDropdown:function(ev){this.unselectRow().then(this._super.bind(this,ev));},_onWindowClicked:function(event){if(!this.isEditable()){return;}
if(!document.contains(this.el)){return;}
if(this.currentRow===null){return;}
if($(event.target).parents('.ui-autocomplete').length){return;}
var $clickModal=$(event.target).closest('.modal');if($clickModal.length){var $listModal=this.$el.closest('.modal');if($clickModal.prop('id')!==$listModal.prop('id')){return;}}
if(!document.contains(event.target)){return;}
if(this.el.contains(event.target)&&this.el!==event.target){return;}
this.unselectRow();},});});;

/* /web/static/src/js/views/list/list_model.js defined in bundle 'web.assets_backend' */
odoo.define('web.ListModel',function(require){"use strict";var BasicModel=require('web.BasicModel');var ListModel=BasicModel.extend({init:function(parent,params){this._super.apply(this,arguments);this.groupbys=params.groupbys;},get:function(){var result=this._super.apply(this,arguments);var dp=result&&this.localData[result.id];if(dp&&dp.groupData){result.groupData=this.get(dp.groupData);}
return result;},saveRecords:function(listDatapointId,referenceRecordId,recordIds,fieldName){var self=this;var referenceRecord=this.localData[referenceRecordId];var list=this.localData[listDatapointId];var allChanges=this._generateChanges(referenceRecord,{changesOnly:false});var changes=_.pick(allChanges,fieldName);var records=recordIds.map(function(recordId){return self.localData[recordId];});var model=records[0].model;var recordResIds=_.pluck(records,'res_id');var fieldNames=records[0].getFieldNames();var context=records[0].getContext();return this._rpc({model:model,method:'write',args:[recordResIds,changes],context:context,}).then(function(){return self._rpc({model:model,method:'read',args:[recordResIds,fieldNames],context:context,});}).then(function(results){results.forEach(function(data){var record=_.findWhere(records,{res_id:data.id});record.data=_.extend({},record.data,data);record._changes={};record._isDirty=false;self._parseServerData(fieldNames,record,record.data);});}).then(function(){return Promise.all([self._fetchX2ManysBatched(list),self._fetchReferencesBatched(list)]);});},_readGroup:function(list,options){var self=this;options=options||{};options.fetchRecordsWithGroups=true;return this._super(list,options).then(function(result){return self._readGroupExtraFields(list).then(_.constant(result));});},_readGroupExtraFields:function(list){var self=this;var groupByFieldName=list.groupedBy[0].split(':')[0];var groupedByField=list.fields[groupByFieldName];if(groupedByField.type!=='many2one'||!this.groupbys[groupByFieldName]){return Promise.resolve();}
var groupIds=_.reduce(list.data,function(groupIds,id){var resId=self.get(id,{raw:true}).res_id;if(resId){groupIds.push(resId);}
return groupIds;},[]);var groupFields=Object.keys(this.groupbys[groupByFieldName].viewFields);var prom;if(groupIds.length&&groupFields.length){prom=this._rpc({model:groupedByField.relation,method:'read',args:[groupIds,groupFields],context:list.context,});}
return Promise.resolve(prom).then(function(result){var fvg=self.groupbys[groupByFieldName];_.each(list.data,function(id){var dp=self.localData[id];var groupData=result&&_.findWhere(result,{id:dp.res_id,});var groupDp=self._makeDataPoint({context:dp.context,data:groupData,fields:fvg.fields,fieldsInfo:fvg.fieldsInfo,modelName:groupedByField.relation,parentID:dp.id,res_id:dp.res_id,viewType:'groupby',});dp.groupData=groupDp.id;});});},});return ListModel;});;

/* /web/static/src/js/views/list/list_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.ListRenderer',function(require){"use strict";var BasicRenderer=require('web.BasicRenderer');var config=require('web.config');var core=require('web.core');var dom=require('web.dom');var field_utils=require('web.field_utils');var Pager=require('web.Pager');var utils=require('web.utils');var viewUtils=require('web.viewUtils');var _t=core._t;var DECORATIONS=['decoration-bf','decoration-it','decoration-danger','decoration-info','decoration-muted','decoration-primary','decoration-success','decoration-warning'];var FIELD_CLASSES={char:'o_list_char',float:'o_list_number',integer:'o_list_number',monetary:'o_list_number',text:'o_list_text',many2one:'o_list_many2one',};var ListRenderer=BasicRenderer.extend({events:{"mousedown":"_onMouseDown","click .o_optional_columns_dropdown .dropdown-item":"_onToggleOptionalColumn","click .o_optional_columns_dropdown_toggle":"_onToggleOptionalColumnDropdown",'click tbody tr':'_onRowClicked','change tbody .o_list_record_selector':'_onSelectRecord','click thead th.o_column_sortable':'_onSortColumn','click .o_group_header':'_onToggleGroup','change thead .o_list_record_selector input':'_onToggleSelection','keypress thead tr td':'_onKeyPress','keydown td':'_onKeyDown','keydown th':'_onKeyDown',},init:function(parent,state,params){this._super.apply(this,arguments);this.columnInvisibleFields=params.columnInvisibleFields;this.rowDecorations=_.chain(this.arch.attrs).pick(function(value,key){return DECORATIONS.indexOf(key)>=0;}).mapObject(function(value){return py.parse(py.tokenize(value));}).value();this.hasSelectors=params.hasSelectors;this.selection=params.selectedRecords||[];this.pagers=[];this.isGrouped=this.state.groupedBy.length>0;this.groupbys=params.groupbys;},willStart:function(){this._processColumns(this.columnInvisibleFields||{});return this._super.apply(this,arguments);},giveFocus:function(){this.$('th:eq(0) input, th:eq(1)').first().focus();},updateState:function(state,params){this.isGrouped=state.groupedBy.length>0;this._processColumns(params.columnInvisibleFields||{});if(params.selectedRecords){this.selection=params.selectedRecords;}
return this._super.apply(this,arguments);},_computeAggregates:function(){var self=this;var data=[];if(this.selection.length){utils.traverse_records(this.state,function(record){if(_.contains(self.selection,record.id)){data.push(record);}});}else{data=this.state.data;}
_.each(this.columns,this._computeColumnAggregates.bind(this,data));},_computeColumnAggregates:function(data,column){var attrs=column.attrs;var field=this.state.fields[attrs.name];if(!field){return;}
var type=field.type;if(type!=='integer'&&type!=='float'&&type!=='monetary'){return;}
var func=(attrs.sum&&'sum')||(attrs.avg&&'avg')||(attrs.max&&'max')||(attrs.min&&'min');if(func){var count=0;var aggregateValue=0;if(func==='max'){aggregateValue=-Infinity;}else if(func==='min'){aggregateValue=Infinity;}
_.each(data,function(d){count+=1;var value=(d.type==='record')?d.data[attrs.name]:d.aggregateValues[attrs.name];if(func==='avg'){aggregateValue+=value;}else if(func==='sum'){aggregateValue+=value;}else if(func==='max'){aggregateValue=Math.max(aggregateValue,value);}else if(func==='min'){aggregateValue=Math.min(aggregateValue,value);}});if(func==='avg'){aggregateValue=count?aggregateValue/count:aggregateValue;}
column.aggregate={help:attrs[func],value:aggregateValue,};}},_findConnectedCell:function($cell,direction,colIndex){var $connectedRow=$cell.closest('tr')[direction]('tr');if(!$connectedRow.length){var tbody=$cell.closest('tbody, thead');var $connectedGroup=tbody[direction]('tbody, thead');if($connectedGroup.length){var $connectedRows=$connectedGroup.find('tr');var rowIndex;if(direction==='prev'){rowIndex=$connectedRows.length-1;}else{rowIndex=0;}
$connectedRow=$connectedRows.eq(rowIndex);}else{return;}}
var $connectedCell;if($connectedRow.hasClass('o_group_header')){$connectedCell=$connectedRow.children();this.currentColIndex=colIndex;}else if($connectedRow.has('td.o_group_field_row_add').length){$connectedCell=$connectedRow.find('.o_group_field_row_add');this.currentColIndex=colIndex;}else{var connectedRowChildren=$connectedRow.children();if(colIndex===-1){colIndex=connectedRowChildren.length-1;}
$connectedCell=connectedRowChildren.eq(colIndex);}
return $connectedCell;},_getNumberOfCols:function(){var n=this.columns.length;return this.hasSelectors?n+1:n;},_getOptionalColumnsStorageKeyParts:function(){var self=this;return{fields:_.map(this.state.fieldsInfo[this.viewType],function(_,fieldName){return{name:fieldName,type:self.state.fields[fieldName].type};}),};},_processColumns:function(columnInvisibleFields){var self=this;this.handleField=null;this.columns=[];this.optionalColumns=[];this.optionalColumnsEnabled=[];var storedOptionalColumns;this.trigger_up('load_optional_fields',{keyParts:this._getOptionalColumnsStorageKeyParts(),callback:function(res){storedOptionalColumns=res;},});_.each(this.arch.children,function(c){if(c.tag!=='control'&&c.tag!=='groupby'){var reject=c.attrs.modifiers.column_invisible;if(c.attrs.name in columnInvisibleFields){reject=columnInvisibleFields[c.attrs.name];}
if(c.attrs.class){if(c.attrs.class.match(/\boe_edit_only\b/)){c.attrs.editOnly=true;}
if(c.attrs.class.match(/\boe_read_only\b/)){c.attrs.readOnly=true;}}
if(!reject&&c.attrs.widget==='handle'){self.handleField=c.attrs.name;if(self.isGrouped){reject=true;}}
if(!reject&&c.attrs.optional){self.optionalColumns.push(c);var enabled;if(storedOptionalColumns===undefined){enabled=c.attrs.optional==='show';}else{enabled=_.contains(storedOptionalColumns,c.attrs.name);}
if(enabled){self.optionalColumnsEnabled.push(c.attrs.name);}
reject=!enabled;}
if(!reject){self.columns.push(c);}}});},_renderAggregateCells:function(aggregateValues){var self=this;return _.map(this.columns,function(column){var $cell=$('<td>');if(config.isDebug()){$cell.addClass(column.attrs.name);}
if(column.attrs.editOnly){$cell.addClass('oe_edit_only');}
if(column.attrs.readOnly){$cell.addClass('oe_read_only');}
if(column.attrs.name in aggregateValues){var field=self.state.fields[column.attrs.name];var value=aggregateValues[column.attrs.name].value;var help=aggregateValues[column.attrs.name].help;var formatFunc=field_utils.format[column.attrs.widget];if(!formatFunc){formatFunc=field_utils.format[field.type];}
var formattedValue=formatFunc(value,field,{escape:true});$cell.addClass('o_list_number').attr('title',help).html(formattedValue);}
return $cell;});},_renderBody:function(){var self=this;var $rows=this._renderRows();while($rows.length<4){$rows.push(self._renderEmptyRow());}
return $('<tbody>').append($rows);},_renderBodyCell:function(record,node,colIndex,options){var tdClassName='o_data_cell';if(node.tag==='button'){tdClassName+=' o_list_button';}else if(node.tag==='field'){tdClassName+=' o_field_cell';var typeClass=FIELD_CLASSES[this.state.fields[node.attrs.name].type];if(typeClass){tdClassName+=(' '+typeClass);}
if(node.attrs.widget){tdClassName+=(' o_'+node.attrs.widget+'_cell');}}
if(node.attrs.editOnly){tdClassName+=' oe_edit_only';}
if(node.attrs.readOnly){tdClassName+=' oe_read_only';}
var $td=$('<td>',{class:tdClassName,tabindex:-1});var modifiers=this._registerModifiers(node,record,$td,_.pick(options,'mode'));if(modifiers.invisible&&!(options&&options.renderInvisible)){return $td;}
if(node.tag==='button'){return $td.append(this._renderButton(record,node));}else if(node.tag==='widget'){return $td.append(this._renderWidget(record,node));}
if(node.attrs.widget||(options&&options.renderWidgets)){var $el=this._renderFieldWidget(node,record,_.pick(options,'mode'));return $td.append($el);}
var name=node.attrs.name;var field=this.state.fields[name];var value=record.data[name];var formattedValue=field_utils.format[field.type](value,field,{data:record.data,escape:true,isPassword:'password'in node.attrs,digits:node.attrs.digits&&JSON.parse(node.attrs.digits),});this._handleAttributes($td,node);var title=field.type!=='boolean'?formattedValue:'';return $td.html(formattedValue).attr('title',title);},_renderButton:function(record,node){var self=this;var $button=viewUtils.renderButtonFromNode(node,{extraClass:node.attrs.icon?'o_icon_button':undefined,textAsTitle:!!node.attrs.icon,});this._handleAttributes($button,node);this._registerModifiers(node,record,$button);if(record.res_id){$button.on("click",function(e){e.stopPropagation();self.trigger_up('button_clicked',{attrs:node.attrs,record:record,});});}else{if(node.attrs.options.warn){$button.on("click",function(e){e.stopPropagation();self.do_warn(_t("Warning"),_t('Please click on the "save" button first.'));});}else{$button.prop('disabled',true);}}
return $button;},_renderEmptyRow:function(){var $td=$('<td>&nbsp;</td>').attr('colspan',this._getNumberOfCols());return $('<tr>').append($td);},_renderFooter:function(){var aggregates={};_.each(this.columns,function(column){if('aggregate'in column){aggregates[column.attrs.name]=column.aggregate;}});var $cells=this._renderAggregateCells(aggregates);if(this.hasSelectors){$cells.unshift($('<td>'));}
return $('<tfoot>').append($('<tr>').append($cells));},_renderGroupButton:function(list,node){var $button=viewUtils.renderButtonFromNode(node,{extraClass:node.attrs.icon?'o_icon_button':undefined,textAsTitle:!!node.attrs.icon,});this._handleAttributes($button,node);this._registerModifiers(node,list.groupData,$button);$button.on("click",this._onGroupButtonClicked.bind(this,list.groupData,node));$button.on("keydown",this._onGroupButtonKeydown.bind(this));return $button;},_renderGroupButtons:function(list,group){var self=this;var $buttons=$();if(list.value){group.arch.children.forEach(function(child){if(child.tag==='button'){$buttons=$buttons.add(self._renderGroupButton(list,child));}});}
return $buttons;},_renderGroupPager:function(group){var pager=new Pager(this,group.count,group.offset+1,group.limit);pager.on('pager_changed',this,function(newState){var self=this;pager.disable();this.trigger_up('load',{id:group.id,limit:newState.limit,offset:newState.current_min-1,on_success:function(reloadedGroup){_.extend(group,reloadedGroup);self._renderView();},on_fail:pager.enable.bind(pager),});});this.pagers.push(pager);var pagerProm=pager._widgetRenderAndInsert(function(){});this.defs.push(pagerProm);var $el=$('<div>');pagerProm.then(function(){$el.replaceWith(pager.$el);});return $el;},_renderGroupRow:function(group,groupLevel){var cells=[];var name=group.value===undefined?_t('Undefined'):group.value;var groupBy=this.state.groupedBy[groupLevel];if(group.fields[groupBy.split(':')[0]].type!=='boolean'){name=name||_t('Undefined');}
var $th=$('<th>').addClass('o_group_name').attr('tabindex',-1).text(name+' ('+group.count+')');var $arrow=$('<span>').css('padding-left',(groupLevel*20)+'px').css('padding-right','5px').addClass('fa');if(group.count>0){$arrow.toggleClass('fa-caret-right',!group.isOpen).toggleClass('fa-caret-down',group.isOpen);}
$th.prepend($arrow);cells.push($th);var aggregateKeys=Object.keys(group.aggregateValues);var aggregateValues=_.mapObject(group.aggregateValues,function(value){return{value:value};});var aggregateCells=this._renderAggregateCells(aggregateValues);var firstAggregateIndex=_.findIndex(this.columns,function(column){return column.tag==='field'&&_.contains(aggregateKeys,column.attrs.name);});var colspanBeforeAggregate;if(firstAggregateIndex!==-1){colspanBeforeAggregate=firstAggregateIndex;var lastAggregateIndex=_.findLastIndex(this.columns,function(column){return column.tag==='field'&&_.contains(aggregateKeys,column.attrs.name);});cells=cells.concat(aggregateCells.slice(firstAggregateIndex,lastAggregateIndex+1));var colSpan=this.columns.length-1-lastAggregateIndex;if(colSpan>0){cells.push($('<th>').attr('colspan',colSpan));}}else{var colN=this.columns.length;colspanBeforeAggregate=colN>1?colN-1:1;if(colN>1){cells.push($('<th>'));}}
if(this.hasSelectors){colspanBeforeAggregate+=1;}
$th.attr('colspan',colspanBeforeAggregate);if(group.isOpen&&!group.groupedBy.length&&(group.count>group.data.length)){var $pager=this._renderGroupPager(group);var $lastCell=cells[cells.length-1];$lastCell.append($pager);}
if(group.isOpen&&this.groupbys[groupBy]){var $buttons=this._renderGroupButtons(group,this.groupbys[groupBy]);if($buttons.length){var $buttonSection=$('<div>',{class:'o_group_buttons',}).append($buttons);$th.append($buttonSection);}}
return $('<tr>').addClass('o_group_header').toggleClass('o_group_open',group.isOpen).toggleClass('o_group_has_content',group.count>0).data('group',group).append(cells);},_renderGroup:function(group,groupLevel){var self=this;if(group.groupedBy.length){return this._renderGroups(group.data,groupLevel+1);}else{var $records=_.map(group.data,function(record){return self._renderRow(record);});return[$('<tbody>').append($records)];}},_renderGroups:function(data,groupLevel){var self=this;groupLevel=groupLevel||0;var result=[];var $tbody=$('<tbody>');_.each(data,function(group){if(!$tbody){$tbody=$('<tbody>');}
$tbody.append(self._renderGroupRow(group,groupLevel));if(group.data.length){result.push($tbody);result=result.concat(self._renderGroup(group,groupLevel));$tbody=null;}});if($tbody){result.push($tbody);}
return result;},_renderHeader:function(){var $tr=$('<tr>').append(_.map(this.columns,this._renderHeaderCell.bind(this)));if(this.hasSelectors){$tr.prepend(this._renderSelector('th'));}
return $('<thead>').append($tr);},_renderHeaderCell:function(node){var name=node.attrs.name;var order=this.state.orderedBy;var isNodeSorted=order[0]&&order[0].name===name;var field=this.state.fields[name];var $th=$('<th>');if(name){$th.attr('data-name',name);}
if(node.attrs.editOnly){$th.addClass('oe_edit_only');}
if(node.attrs.readOnly){$th.addClass('oe_read_only');}
if(!field){return $th;}
var description=node.attrs.string||field.string;if(node.attrs.widget){$th.addClass(' o_'+node.attrs.widget+'_cell');if(this.state.fieldsInfo.list[name].Widget.prototype.noLabel){description='';}}
$th.text(description).attr('tabindex',-1).toggleClass('o-sort-down',isNodeSorted?!order[0].asc:false).toggleClass('o-sort-up',isNodeSorted?order[0].asc:false).addClass(field.sortable&&'o_column_sortable');if(isNodeSorted){$th.attr('aria-sort',order[0].asc?'ascending':'descending');}
if(field.type==='float'||field.type==='integer'||field.type==='monetary'){$th.addClass('o_list_number_th');}
if(config.isDebug()){var fieldDescr={field:field,name:name,string:description||name,record:this.state,attrs:_.extend({},node.attrs,this.state.fieldsInfo.list[name]),};this._addFieldTooltip(fieldDescr,$th);}else{$th.attr('title',description);}
return $th;},_renderRow:function(record){var self=this;var $cells=this.columns.map(function(node,index){return self._renderBodyCell(record,node,index,{mode:'readonly'});});var $tr=$('<tr/>',{class:'o_data_row'}).attr('data-id',record.id).append($cells);if(this.hasSelectors){$tr.prepend(this._renderSelector('td',!record.res_id));}
this._setDecorationClasses(record,$tr);return $tr;},_renderRows:function(){return this.state.data.map(this._renderRow.bind(this));},_renderOptionalColumnsDropdown:function(){var self=this;var $optionalColumnsDropdown=$('<div>',{class:'o_optional_columns text-center dropdown',});var $a=$("<a>",{'class':"dropdown-toggle text-dark o-no-caret",'href':"#",'role':"button",'data-toggle':"dropdown",'aria-expanded':false,});$a.appendTo($optionalColumnsDropdown);var $dropdown=$("<div>",{class:'dropdown-menu dropdown-menu-right o_optional_columns_dropdown',role:'menu',});this.optionalColumns.forEach(function(col){var txt=(col.attrs.string||self.state.fields[col.attrs.name].string)+
(config.isDebug()?(' ('+col.attrs.name+')'):'');var $checkbox=dom.renderCheckbox({text:txt,prop:{name:col.attrs.name,checked:_.contains(self.optionalColumnsEnabled,col.attrs.name),}});$dropdown.append($("<div>",{class:"dropdown-item",}).append($checkbox));});$dropdown.appendTo($optionalColumnsDropdown);return $optionalColumnsDropdown;},_renderSelector:function(tag,disableInput){var $content=dom.renderCheckbox();if(disableInput){$content.find("input[type='checkbox']").prop('disabled',disableInput);}
return $('<'+tag+'>').addClass('o_list_record_selector').append($content);},_renderView:function(){var self=this;var oldPagers=this.pagers;this.pagers=[];var displayNoContentHelper=!this._hasContent()&&!!this.noContentHelp;this.$el.toggleClass('o_list_view',!displayNoContentHelper);if(displayNoContentHelper){_.invoke(oldPagers,'destroy');this.$el.removeClass('table-responsive');this.$el.html(this._renderNoContentHelper());return this._super.apply(this,arguments);}
var orderedBy=this.state.orderedBy;this.hasHandle=orderedBy.length===0||orderedBy[0].name===this.handleField;this._computeAggregates();var $table=$('<table>').addClass('o_list_table table table-sm table-hover table-striped');$table.toggleClass('o_list_table_grouped',this.isGrouped);$table.toggleClass('o_list_table_ungrouped',!this.isGrouped);var defs=[];this.defs=defs;if(this.isGrouped){$table.append(this._renderHeader());$table.append(this._renderGroups(this.state.data));$table.append(this._renderFooter());}else{$table.append(this._renderHeader());$table.append(this._renderBody());$table.append(this._renderFooter());}
delete this.defs;var prom=Promise.all(defs).then(function(){_.invoke(oldPagers,'destroy');self.$el.html($('<div>',{class:'table-responsive',html:$table}));if(self.optionalColumns.length){self.$el.addClass('o_list_optional_columns');self.$('table').append($('<i class="o_optional_columns_dropdown_toggle fa fa-ellipsis-v"/>'));self.$el.append(self._renderOptionalColumnsDropdown());}
if(self.selection.length){var $checked_rows=self.$('tr').filter(function(index,el){return _.contains(self.selection,$(el).data('id'));});$checked_rows.find('.o_list_record_selector input').prop('checked',true);}});return Promise.all([this._super.apply(this,arguments),prom]);},_setDecorationClasses:function(record,$tr){_.each(this.rowDecorations,function(expr,decoration){var cssClass=decoration.replace('decoration','text');$tr.toggleClass(cssClass,py.PY_isTrue(py.evaluate(expr,record.evalContext)));});},_updateFooter:function(){this._computeAggregates();this.$('tfoot').replaceWith(this._renderFooter());},_updateSelection:function(){this.selection=[];var self=this;var $inputs=this.$('tbody .o_list_record_selector input:visible:not(:disabled)');var allChecked=$inputs.length>0;$inputs.each(function(index,input){if(input.checked){self.selection.push($(input).closest('tr').data('id'));}else{allChecked=false;}});this.$('thead .o_list_record_selector input').prop('checked',allChecked);this.trigger_up('selection_changed',{selection:this.selection});this._updateFooter();},_onGroupButtonClicked:function(record,node,ev){ev.stopPropagation();if(node.attrs.type==='edit'){this.trigger_up('group_edit_button_clicked',{record:record,});}else{this.trigger_up('button_clicked',{attrs:node.attrs,record:record,});}},_onGroupButtonKeydown:function(ev){if(ev.keyCode===$.ui.keyCode.ENTER){ev.stopPropagation();}},_onToggleOptionalColumn:function(ev){var self=this;ev.stopPropagation();var input=ev.currentTarget.querySelector('input');var fieldIndex=this.optionalColumnsEnabled.indexOf(input.name);if(fieldIndex>=0){this.optionalColumnsEnabled.splice(fieldIndex,1);}else{this.optionalColumnsEnabled.push(input.name);}
this.trigger_up('save_optional_fields',{keyParts:this._getOptionalColumnsStorageKeyParts(),optionalColumnsEnabled:this.optionalColumnsEnabled,});this._processColumns(this.columnInvisibleFields||{});this._renderView().then(function(){self._onToggleOptionalColumnDropdown(ev);});},_onToggleOptionalColumnDropdown:function(ev){ev.stopPropagation();this.$('.o_optional_columns .dropdown-toggle').dropdown('toggle');},_onKeyDown:function(ev){var $cell=$(ev.currentTarget);var $tr;var $futureCell;var colIndex;switch(ev.keyCode){case $.ui.keyCode.LEFT:ev.preventDefault();$tr=$cell.closest('tr');$tr.closest('tbody').addClass('o_keyboard_navigation');if($tr.hasClass('o_group_header')&&$tr.hasClass('o_group_open')){this._onToggleGroup(ev);}else{$futureCell=$cell.prev();}
break;case $.ui.keyCode.RIGHT:ev.preventDefault();$tr=$cell.closest('tr');$tr.closest('tbody').addClass('o_keyboard_navigation');if($tr.hasClass('o_group_header')&&!$tr.hasClass('o_group_open')){this._onToggleGroup(ev);}else{$futureCell=$cell.next();}
break;case $.ui.keyCode.UP:ev.preventDefault();$cell.closest('tbody').addClass('o_keyboard_navigation');colIndex=this.currentColIndex||$cell.index();$futureCell=this._findConnectedCell($cell,'prev',colIndex);if(!$futureCell){this.trigger_up('navigation_move',{direction:'up'});}
break;case $.ui.keyCode.DOWN:ev.preventDefault();$cell.closest('tbody').addClass('o_keyboard_navigation');colIndex=this.currentColIndex||$cell.index();$futureCell=this._findConnectedCell($cell,'next',colIndex);break;case $.ui.keyCode.ENTER:ev.preventDefault();$tr=$cell.closest('tr');if($tr.hasClass('o_group_header')){this._onToggleGroup(ev);}else{var id=$tr.data('id');if(id){this.trigger_up('open_record',{id:id,target:ev.target});}}
break;}
if($futureCell){var isInGroupHeader=$futureCell.closest('tr').hasClass('o_group_header');var $activables=!isInGroupHeader&&$futureCell.find(':focusable');if($activables.length){$activables[0].focus();}else{$futureCell.focus();}}},_onMouseDown:function(){$('.o_keyboard_navigation').removeClass('o_keyboard_navigation');},_onRowClicked:function(ev){if(!ev.target.closest('.o_list_record_selector')&&!$(ev.target).prop('special_click')){var id=$(ev.currentTarget).data('id');if(id){this.trigger_up('open_record',{id:id,target:ev.target});}}},_onSelectRecord:function(ev){ev.stopPropagation();this._updateSelection();},_onSortColumn:function(ev){var name=$(ev.currentTarget).data('name');this.trigger_up('toggle_column_order',{id:this.state.id,name:name});},_onToggleGroup:function(ev){ev.preventDefault();ev.stopPropagation();var group=$(ev.currentTarget).closest('tr').data('group');if(group.count){this.trigger_up('toggle_group',{group:group,onSuccess:()=>{this._updateSelection();if(document.activeElement.tagName==='BODY'){var groupHeaders=$('tr.o_group_header:data("group")');var header=groupHeaders.filter(function(){return $(this).data('group').id===group.id;});header.find('.o_group_name').focus();}},});}},_onToggleSelection:function(ev){var checked=$(ev.currentTarget).prop('checked')||false;this.$('tbody .o_list_record_selector input:not(":disabled")').prop('checked',checked);this._updateSelection();},});return ListRenderer;});;

/* /web/static/src/js/views/list/list_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.ListView',function(require){"use strict";var BasicView=require('web.BasicView');var core=require('web.core');var ListModel=require('web.ListModel');var ListRenderer=require('web.ListRenderer');var ListController=require('web.ListController');var pyUtils=require('web.py_utils');var _lt=core._lt;var ListView=BasicView.extend({accesskey:"l",display_name:_lt('List'),icon:'fa-list-ul',config:_.extend({},BasicView.prototype.config,{Model:ListModel,Renderer:ListRenderer,Controller:ListController,}),viewType:'list',init:function(viewInfo,params){var self=this;this._super.apply(this,arguments);var selectedRecords=[];var pyevalContext=py.dict.fromJSON(_.pick(params.context,function(value,key,object){return!_.isUndefined(value)})||{});var expandGroups=!!JSON.parse(pyUtils.py_eval(this.arch.attrs.expand||"0",{'context':pyevalContext}));this.groupbys={};this.arch.children.forEach(function(child){if(child.tag==='groupby'){self._extractGroup(child);}});let editable=false;if((!this.arch.attrs.edit||!!JSON.parse(this.arch.attrs.edit))&&!params.readonly){editable=this.arch.attrs.editable;}
this.controllerParams.activeActions.export_xlsx=this.arch.attrs.export_xlsx?!!JSON.parse(this.arch.attrs.export_xlsx):true;this.controllerParams.editable=editable;this.controllerParams.hasSidebar=params.hasSidebar;this.controllerParams.toolbarActions=viewInfo.toolbar;this.controllerParams.mode=editable?'edit':'readonly';this.controllerParams.selectedRecords=selectedRecords;this.rendererParams.arch=this.arch;this.rendererParams.groupbys=this.groupbys;this.rendererParams.hasSelectors='hasSelectors'in params?params.hasSelectors:true;this.rendererParams.editable=editable;this.rendererParams.selectedRecords=selectedRecords;this.rendererParams.addCreateLine=false;this.rendererParams.addCreateLineInGroups=editable&&this.controllerParams.activeActions.create;this.rendererParams.isMultiEditable=this.arch.attrs.multi_edit&&!!JSON.parse(this.arch.attrs.multi_edit);this.modelParams.groupbys=this.groupbys;this.loadParams.limit=this.loadParams.limit||80;this.loadParams.openGroupByDefault=expandGroups;this.loadParams.type='list';var groupsLimit=parseInt(this.arch.attrs.groups_limit,10);this.loadParams.groupsLimit=groupsLimit||(expandGroups?10:80);},_extractGroup:function(node){var innerView=this.fields[node.attrs.name].views.groupby;this.groupbys[node.attrs.name]=this._processFieldsView(innerView,'groupby');},_extractParamsFromAction:function(action){var params=this._super.apply(this,arguments);var inDialog=action.target==='new';var inline=action.target==='inline';params.hasSidebar=!inDialog&&!inline;return params;},_updateMVCParams:function(){this._super.apply(this,arguments);this.controllerParams.noLeaf=!!this.loadParams.context.group_by_no_leaf;},});return ListView;});;

/* /web/static/src/js/views/list/list_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.ListController',function(require){"use strict";var core=require('web.core');var BasicController=require('web.BasicController');var DataExport=require('web.DataExport');var Dialog=require('web.Dialog');var ListConfirmDialog=require('web.ListConfirmDialog');var Sidebar=require('web.Sidebar');var _t=core._t;var qweb=core.qweb;var ListController=BasicController.extend({buttons_template:'ListView.buttons',events:_.extend({},BasicController.prototype.events,{'click .o_list_export_xlsx':'_onDirectExportData',}),custom_events:_.extend({},BasicController.prototype.custom_events,{activate_next_widget:'_onActivateNextWidget',add_record:'_onAddRecord',button_clicked:'_onButtonClicked',group_edit_button_clicked:'_onEditGroupClicked',edit_line:'_onEditLine',save_line:'_onSaveLine',selection_changed:'_onSelectionChanged',toggle_column_order:'_onToggleColumnOrder',toggle_group:'_onToggleGroup',}),init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.hasSidebar=params.hasSidebar;this.toolbarActions=params.toolbarActions||{};this.editable=params.editable;this.noLeaf=params.noLeaf;this.selectedRecords=params.selectedRecords||[];this.multipleRecordsSavingPromise=null;this.fieldChangedPrevented=false;Object.defineProperty(this,'mode',{get:()=>this.renderer.isEditable()?'edit':'readonly',set:()=>{},});},getActiveDomain:function(){var self=this;if(this.$('thead .o_list_record_selector input').prop('checked')){var searchQuery=this._controlPanel?this._controlPanel.getSearchQuery():{};var record=self.model.get(self.handle,{raw:true});return record.getDomain().concat(searchQuery.domain||[]);}},getOwnedQueryParams:function(){var state=this._super.apply(this,arguments);var orderedBy=this.model.get(this.handle,{raw:true}).orderedBy||[];return _.extend({},state,{orderedBy:orderedBy});},getSelectedIds:function(){return _.map(this.getSelectedRecords(),function(record){return record.res_id;});},getSelectedRecords:function(){var self=this;return _.map(this.selectedRecords,function(db_id){return self.model.get(db_id,{raw:true});});},renderButtons:function($node){if(!this.noLeaf&&this.hasButtons){this.$buttons=$(qweb.render(this.buttons_template,{widget:this}));this.$buttons.on('click','.o_list_button_add',this._onCreateRecord.bind(this));this._assignCreateKeyboardBehavior(this.$buttons.find('.o_list_button_add'));this.$buttons.find('.o_list_button_add').tooltip({delay:{show:200,hide:0},title:function(){return qweb.render('CreateButton.tooltip');},trigger:'manual',});this.$buttons.on('mousedown','.o_list_button_discard',this._onDiscardMousedown.bind(this));this.$buttons.on('click','.o_list_button_discard',this._onDiscard.bind(this));this.$buttons.appendTo($node);}},renderSidebar:function($node){var self=this;if(this.hasSidebar){var other=[{label:_t("Export"),callback:this._onExportData.bind(this)}];if(this.archiveEnabled){other.push({label:_t("Archive"),callback:function(){Dialog.confirm(self,_t("Are you sure that you want to archive all the selected records?"),{confirm_callback:self._toggleArchiveState.bind(self,true),});}});other.push({label:_t("Unarchive"),callback:this._toggleArchiveState.bind(this,false)});}
if(this.is_action_enabled('delete')){other.push({label:_t('Delete'),callback:this._onDeleteSelectedRecords.bind(this)});}
this.sidebar=new Sidebar(this,{editable:this.is_action_enabled('edit'),env:{context:this.model.get(this.handle,{raw:true}).getContext(),activeIds:this.getSelectedIds(),model:this.modelName,},actions:_.extend(this.toolbarActions,{other:other}),});return this.sidebar.appendTo($node).then(function(){self._toggleSidebar();});}
return Promise.resolve();},update:function(params,options){var self=this;if(options&&options.keepSelection){var res_ids=this.model.get(this.handle).res_ids;this.selectedRecords=_.filter(this.selectedRecords,function(id){return _.contains(res_ids,self.model.get(id).res_id);});}else{this.selectedRecords=[];}
params.selectedRecords=this.selectedRecords;return this._super.apply(this,arguments);},_abandonRecord:function(recordID){this._super.apply(this,arguments);if((recordID||this.handle)!==this.handle){var state=this.model.get(this.handle);this.renderer.removeLine(state,recordID);this._updatePager();}},_addRecord:function(dataPointId){var self=this;this._disableButtons();return this.renderer.unselectRow().then(function(){return self.model.addDefaultRecord(dataPointId,{position:self.editable,});}).then(function(recordID){var state=self.model.get(self.handle);self.renderer.updateState(state,{keepWidths:true}).then(function(){self.renderer.editRecord(recordID);}).then(self._updatePager.bind(self));}).then(this._enableButtons.bind(this)).guardedCatch(this._enableButtons.bind(this));},_archive:function(ids,archive){if(ids.length===0){return Promise.resolve();}
if(archive){return this.model.actionArchive(ids,this.handle).then(this.update.bind(this,{},{reload:false}));}else{return this.model.actionUnarchive(ids,this.handle).then(this.update.bind(this,{},{reload:false}));}},_assignCreateKeyboardBehavior:function($createButton){var self=this;$createButton.on('keydown',function(e){$createButton.tooltip('hide');switch(e.which){case $.ui.keyCode.ENTER:e.preventDefault();self._onCreateRecord.apply(self);break;case $.ui.keyCode.DOWN:e.preventDefault();self.renderer.giveFocus();break;case $.ui.keyCode.TAB:if(!e.shiftKey&&e.target.classList.contains("btn-primary")){e.preventDefault();$createButton.tooltip('show');}
break;}});},_confirmSave:function(id){var state=this.model.get(this.handle);return this.renderer.updateState(state,{noRender:true}).then(this._setMode.bind(this,'readonly',id));},_discardChanges:function(recordID){if((recordID||this.handle)===this.handle){recordID=this.renderer.getEditableRecordID();if(recordID===null){return Promise.resolve();}}
var self=this;return this._super(recordID).then(function(){self._updateButtons('readonly');});},_getExportDialogWidget(){let state=this.model.get(this.handle);let defaultExportFields=this.renderer.columns.filter(field=>field.tag==='field').map(field=>field.attrs.name);let groupedBy=this.renderer.state.groupedBy;return new DataExport(this,state,defaultExportFields,groupedBy,this.getActiveDomain(),this.getSelectedIds());},_getSidebarEnv:function(){var env=this._super.apply(this,arguments);var record=this.model.get(this.handle);return _.extend(env,{domain:record.getDomain()});},_isPagerVisible:function(){var state=this.model.get(this.handle,{raw:true});return!!state.count;},_saveMultipleRecords:function(recordId,node,changes){var fieldName=Object.keys(changes)[0];var value=Object.values(changes)[0];var recordIds=_.union([recordId],this.selectedRecords);var validRecordIds=recordIds.reduce((result,nextRecordId)=>{var record=this.model.get(nextRecordId);var modifiers=this.renderer._registerModifiers(node,record);if(!modifiers.readonly&&(!modifiers.required||value)){result.push(nextRecordId);}
return result;},[]);return new Promise((resolve,reject)=>{const discardAndReject=()=>{this.model.discardChanges(recordId);this._confirmSave(recordId).then(()=>{this.renderer.focusCell(recordId,node);reject();});};if(validRecordIds.length>0){const dialogOptions={confirm_callback:()=>{this.model.saveRecords(this.handle,recordId,validRecordIds,fieldName).then(async()=>{this._updateButtons('readonly');const state=this.model.get(this.handle);await this.renderer.updateState(state,{keepWidths:true});await this.renderer.focusCell(recordId,node);resolve(Object.keys(changes));}).guardedCatch(discardAndReject);},cancel_callback:discardAndReject,};const record=this.model.get(recordId);const dialogChanges={fieldLabel:node.attrs.string||record.fields[fieldName].string,fieldName:node.attrs.name,nbRecords:recordIds.length,nbValidRecords:validRecordIds.length,};new ListConfirmDialog(this,record,dialogChanges,dialogOptions).open({shouldFocusButtons:true});}else{Dialog.alert(this,_t("No valid record to save"),{confirm_callback:discardAndReject,});}});},_saveRecord:function(recordId){var record=this.model.get(recordId,{raw:true});if(record.isDirty()&&this.renderer.isInMultipleRecordEdition(recordId)){const prom=this.multipleRecordsSavingPromise||Promise.reject();this.multipleRecordsSavingPromise=null;return prom;}
return this._super.apply(this,arguments);},_setMode:function(mode,recordID){if((recordID||this.handle)!==this.handle){this._updateButtons(mode);return this.renderer.setRowMode(recordID,mode);}else{return this._super.apply(this,arguments);}},_toggleArchiveState:function(archive){this._archive(this.selectedRecords,archive);},_toggleCreateButton:function(){if(this.$buttons){var state=this.model.get(this.handle);var createHidden=this.renderer.isEditable()&&state.groupedBy.length&&state.data.length;this.$buttons.find('.o_list_button_add').toggleClass('o_hidden',!!createHidden);}},_toggleSidebar:function(){if(this.sidebar){this.sidebar.do_toggle(this.selectedRecords.length>0);}},_update:function(){return this._super.apply(this,arguments).then(this._toggleSidebar.bind(this)).then(this._toggleCreateButton.bind(this)).then(this._updateButtons.bind(this,'readonly'));},_updateButtons:function(mode){if(this.$buttons){this.$buttons.toggleClass('o-editing',mode==='edit');const state=this.model.get(this.handle,{raw:true});if(state.count){this.$('.o_list_export_xlsx').show();}else{this.$('.o_list_export_xlsx').hide();}}},_onActivateNextWidget:function(ev){ev.stopPropagation();this.renderer.editFirstRecord(ev);},_onAddRecord:function(ev){ev.stopPropagation();var dataPointId=ev.data.groupId||this.handle;if(this.activeActions.create){this._addRecord(dataPointId);}else if(ev.data.onFail){ev.data.onFail();}},_onButtonClicked:function(ev){ev.stopPropagation();this._callButtonAction(ev.data.attrs,ev.data.record);},_onCreateRecord:function(ev){if(ev){ev.stopPropagation();}
var state=this.model.get(this.handle,{raw:true});if(this.editable&&!state.groupedBy.length){this._addRecord(this.handle);}else{this.trigger_up('switch_view',{view_type:'form',res_id:undefined});}},_onDeleteSelectedRecords:function(){this._deleteRecords(this.selectedRecords);},_onDiscard:function(ev){ev.stopPropagation();this._discardChanges();},_onDiscardMousedown:function(ev){var self=this;this.fieldChangedPrevented=true;window.addEventListener('mouseup',function(mouseupEvent){var preventedEvent=self.fieldChangedPrevented;self.fieldChangedPrevented=false;if(ev.target!==mouseupEvent.target&&preventedEvent.constructor.name==='OdooEvent'){self._onFieldChanged(preventedEvent);}},{capture:true,once:true});},_onEditLine:function(ev){var self=this;ev.stopPropagation();this.trigger_up('mutexify',{action:function(){self._setMode('edit',ev.data.recordId).then(ev.data.onSuccess);},});},_onExportData:function(){this._getExportDialogWidget().open();},_onDirectExportData(){this._getExportDialogWidget().export();},_onEditGroupClicked:function(ev){ev.stopPropagation();this.do_action({context:{create:false},type:'ir.actions.act_window',views:[[false,'form']],res_model:ev.data.record.model,res_id:ev.data.record.res_id,flags:{mode:'edit'},});},_onFieldChanged:function(ev){ev.stopPropagation();const recordId=ev.data.dataPointID;if(this.fieldChangedPrevented){this.fieldChangedPrevented=ev;}else if(this.renderer.isInMultipleRecordEdition(recordId)){const saveMulti=()=>{this.multipleRecordsSavingPromise=this._saveMultipleRecords(ev.data.dataPointID,ev.target.__node,ev.data.changes);};ev.data.onSuccess=saveMulti;ev.data.onFailure=saveMulti;ev.data.notifyChange=false;}
this._super.apply(this,arguments);},_onSaveLine:function(ev){this.saveRecord(ev.data.recordID).then(ev.data.onSuccess).guardedCatch(ev.data.onFailure);},_onSelectionChanged:function(ev){this.selectedRecords=ev.data.selection;this._toggleSidebar();},_onSetDirty:function(ev){var recordId=ev.data.dataPointID;if(this.renderer.isInMultipleRecordEdition(recordId)){ev.stopPropagation();Dialog.alert(this,_t("No valid record to save"),{confirm_callback:async()=>{this.model.discardChanges(recordId);await this._confirmSave(recordId);this.renderer.focusCell(recordId,ev.target.__node);},});}else{this._super.apply(this,arguments);}},_onToggleColumnOrder:function(ev){ev.stopPropagation();var data=this.model.get(this.handle);if(!data.groupedBy){this.pager.updateState({current_min:1});}
var self=this;this.model.setSort(data.id,ev.data.name).then(function(){self.update({});});},_onToggleGroup:function(ev){ev.stopPropagation();var self=this;this.model.toggleGroup(ev.data.group.id).then(function(){self.update({},{keepSelection:true,reload:false}).then(function(){if(ev.data.onSuccess){ev.data.onSuccess();}});});},});return ListController;});;

/* /web/static/src/js/views/list/list_confirm_dialog.js defined in bundle 'web.assets_backend' */
odoo.define('web.ListConfirmDialog',function(require){"use strict";const core=require('web.core');const Dialog=require('web.Dialog');const _t=core._t;const qweb=core.qweb;const ListConfirmDialog=Dialog.extend({init:function(parent,record,changes,options){options=Object.assign({},options,{$content:$(qweb.render('ListView.confirmModal',{changes})),buttons:options.buttons||[{text:_t("Ok"),classes:'btn-primary',close:true,click:options.confirm_callback,},{text:_t("Cancel"),close:true,click:options.cancel_callback,}],onForceClose:options.cancel_callback,size:options.size||'medium',title:options.title||_t("Confirmation"),});this._super(parent,options);const Widget=record.fieldsInfo.list[changes.fieldName].Widget;this.fieldWidget=new Widget(this,changes.fieldName,record,{mode:'readonly',viewType:'list',noOpen:true,});},willStart:function(){return Promise.all([this.fieldWidget.appendTo(document.createDocumentFragment()),this._super.apply(this,arguments)]);},start:function(){this.$content.find('.o_changes_widget').replaceWith(this.fieldWidget.$el);return this._super.apply(this,arguments);},});return ListConfirmDialog;});;

/* /web/static/src/js/views/pivot/pivot_model.js defined in bundle 'web.assets_backend' */
odoo.define('web.PivotModel',function(require){"use strict";var AbstractModel=require('web.AbstractModel');var concurrency=require('web.concurrency');var core=require('web.core');var dataComparisonUtils=require('web.dataComparisonUtils');var mathUtils=require('web.mathUtils');var session=require('web.session');var _t=core._t;var cartesian=mathUtils.cartesian;var computeVariation=dataComparisonUtils.computeVariation;var sections=mathUtils.sections;var PivotModel=AbstractModel.extend({init:function(){this._super.apply(this,arguments);this.numbering={};this.data=null;this._loadDataDropPrevious=new concurrency.DropPrevious();},addGroupBy:function(groupBy,type){if(type==='row'){this.data.expandedRowGroupBys.push(groupBy);}else{this.data.expandedColGroupBys.push(groupBy);}},closeGroup:function(groupId,type){var groupBys;var expandedGroupBys;var group;var tree;if(type==='row'){groupBys=this.data.rowGroupBys;expandedGroupBys=this.data.expandedRowGroupBys;tree=this.rowGroupTree;group=this._findGroup(this.rowGroupTree,groupId[0]);}else{groupBys=this.data.colGroupBys;expandedGroupBys=this.data.expandedColGroupBys;tree=this.colGroupTree;group=this._findGroup(this.colGroupTree,groupId[1]);}
group.directSubTrees={};delete group.sortedKeys;var newGroupBysLength=this._getTreeHeight(tree)-1;if(newGroupBysLength<=groupBys.length){expandedGroupBys.splice(0);groupBys.splice(newGroupBysLength);}else{expandedGroupBys.splice(newGroupBysLength-groupBys.length);}},expandAll:function(){return this._loadData();},expandGroup:function(group,groupBy){var leftDivisors;var rightDivisors;if(group.type==='row'){leftDivisors=[[groupBy]];rightDivisors=sections(this._getGroupBys().colGroupBys);}else{leftDivisors=sections(this._getGroupBys().rowGroupBys);rightDivisors=[[groupBy]];}
var divisors=cartesian(leftDivisors,rightDivisors);delete group.type;return this._subdivideGroup(group,divisors);},exportData:function(){var measureCount=this.data.measures.length;var originCount=this.data.origins.length;var table=this._getTable();var headers=table.headers;var colGroupHeaderRows;var measureRow=[];var originRow=[];function processHeader(header){var inTotalColumn=header.groupId[1].length===0;return{title:header.title,width:header.width,height:header.height,is_bold:!!header.measure&&inTotalColumn};}
if(originCount>1){colGroupHeaderRows=headers.slice(0,headers.length-2);measureRow=headers[headers.length-2].map(processHeader);originRow=headers[headers.length-1].map(processHeader);}else{colGroupHeaderRows=headers.slice(0,headers.length-1);if(measureCount>1){measureRow=headers[headers.length-1].map(processHeader);}}
colGroupHeaderRows[0].splice(0,1);colGroupHeaderRows=colGroupHeaderRows.map(function(headerRow){return headerRow.map(processHeader);});var tableRows=table.rows.map(function(row){return{title:row.title,indent:row.indent,values:row.subGroupMeasurements.map(function(measurement){var value=measurement.value;if(value===undefined){value="";}else if(measurement.originIndexes.length>1){value=value*100;}
return{is_bold:measurement.isBold,value:value,};}),};});return{col_group_headers:colGroupHeaderRows,measure_headers:measureRow,origin_headers:originRow,rows:tableRows,measure_count:measureCount,origin_count:originCount,};},flip:function(){var temp=this.rowGroupTree;this.rowGroupTree=this.colGroupTree;this.colGroupTree=temp;temp=this.data.rowGroupBys;this.data.groupedBy=this.data.colGroupBys;this.data.rowGroupBys=this.data.colGroupBys;this.data.colGroupBys=temp;temp=this.data.expandedColGroupBys;this.data.expandedColGroupBys=this.data.expandedRowGroupBys;this.data.expandedRowGroupBys=temp;function twistKey(key){return JSON.stringify(JSON.parse(key).reverse());}
function twist(object){var newObject={};Object.keys(object).forEach(function(key){var value=object[key];newObject[twistKey(key)]=value;});return newObject;}
this.measurements=twist(this.measurements);this.counts=twist(this.counts);this.groupDomains=twist(this.groupDomains);},get:function(options){options=options||{};var raw=options.raw||false;var groupBys=this._getGroupBys();var state={colGroupBys:groupBys.colGroupBys,context:this.data.context,domain:this.data.domain,fields:this.fields,hasData:this._hasData(),measures:this.data.measures,origins:this.data.origins,rowGroupBys:groupBys.rowGroupBys,};if(!raw&&state.hasData){state.table=this._getTable();}
return state;},getTableWidth:function(){var leafCounts=this._getLeafCounts(this.colGroupTree);return leafCounts[JSON.stringify(this.colGroupTree.root.values)]+2;},load:function(params){this.initialDomain=params.domain;this.initialRowGroupBys=params.context.pivot_row_groupby||params.rowGroupBys;this.defaultGroupedBy=params.groupedBy;this.fields=params.fields;this.modelName=params.modelName;this.data={expandedRowGroupBys:[],expandedColGroupBys:[],domain:this.initialDomain,timeRange:params.timeRange||[],timeRangeDescription:params.timeRangeDescription||"",comparisonTimeRange:params.comparisonTimeRange||[],comparisonTimeRangeDescription:params.comparisonTimeRangeDescription||"",compare:params.compare||false,context:_.extend({},session.user_context,params.context),groupedBy:params.context.pivot_row_groupby||params.groupedBy,colGroupBys:params.context.pivot_column_groupby||params.colGroupBys,measures:this._processMeasures(params.context.pivot_measures)||params.measures,};this.data.domains=this._getDomains();this.data.origins=this._getOrigins();this.data.rowGroupBys=!_.isEmpty(this.data.groupedBy)?this.data.groupedBy:this.initialRowGroupBys;var defaultOrder=params.default_order&&params.default_order.split(' ');if(defaultOrder){this.data.sortedColumn={groupId:[[],[]],measure:defaultOrder[0],order:defaultOrder[1]?defaultOrder[1]:'asc',};}
return this._loadData();},reload:function(handle,params){var self=this;var oldColGroupBys=this.data.colGroupBys;var oldRowGroupBys=this.data.rowGroupBys;if('context'in params){this.data.context=params.context;this.data.colGroupBys=params.context.pivot_column_groupby||this.data.colGroupBys;this.data.groupedBy=params.context.pivot_row_groupby||this.data.groupedBy;this.data.measures=this._processMeasures(params.context.pivot_measures)||this.data.measures;this.defaultGroupedBy=this.data.groupedBy.length?this.data.groupedBy:this.defaultGroupedBy;var timeRangeMenuData=params.context.timeRangeMenuData;if(timeRangeMenuData){this.data.timeRange=timeRangeMenuData.timeRange||[];this.data.timeRangeDescription=timeRangeMenuData.timeRangeDescription||"";this.data.comparisonTimeRange=timeRangeMenuData.comparisonTimeRange||[];this.data.comparisonTimeRangeDescription=timeRangeMenuData.comparisonTimeRangeDescription||"";this.data.compare=this.data.comparisonTimeRange.length>0;}else{this.data.timeRange=[];this.data.timeRangeDescription="";this.data.comparisonTimeRange=[];this.data.comparisonTimeRangeDescription="";this.data.compare=false;this.data.context=_.omit(this.data.context,'timeRangeMenuData');}}
if('domain'in params){this.data.domain=params.domain;this.initialDomain=params.domain;}else{this.data.domain=this.initialDomain;}
if('groupBy'in params){this.data.groupedBy=params.groupBy.length?params.groupBy:this.defaultGroupedBy;}
this.data.domains=this._getDomains();this.data.origins=this._getOrigins();this.data.rowGroupBys=!_.isEmpty(this.data.groupedBy)?this.data.groupedBy:this.initialRowGroupBys;if(!_.isEqual(oldRowGroupBys,self.data.rowGroupBys)){this.data.expandedRowGroupBys=[];}
if(!_.isEqual(oldColGroupBys,self.data.colGroupBys)){this.data.expandedColGroupBys=[];}
if(!this._hasData()){return this._loadData();}
var oldRowGroupTree=this.rowGroupTree;var oldColGroupTree=this.colGroupTree;return this._loadData().then(function(){if(_.isEqual(oldRowGroupBys,self.data.rowGroupBys)){self._pruneTree(self.rowGroupTree,oldRowGroupTree);}
if(_.isEqual(oldColGroupBys,self.data.colGroupBys)){self._pruneTree(self.colGroupTree,oldColGroupTree);}});},sortRows:function(sortedColumn){var self=this;var colGroupValues=sortedColumn.groupId[1];sortedColumn.originIndexes=sortedColumn.originIndexes||[0];this.data.sortedColumn=sortedColumn;var sortFunction=function(tree){return function(subTreeKey){var subTree=tree.directSubTrees[subTreeKey];var groupIntersectionId=[subTree.root.values,colGroupValues];var value=self._getCellValue(groupIntersectionId,sortedColumn.measure,sortedColumn.originIndexes)||0;return sortedColumn.order==='asc'?value:-value;};};this._sortTree(sortFunction,this.rowGroupTree);},toggleMeasure:function(fieldName){var index=this.data.measures.indexOf(fieldName);if(index!==-1){this.data.measures.splice(index,1);return Promise.resolve();}else{this.data.measures.push(fieldName);}
return this._loadData();},_addGroup:function(groupTree,labels,values){var tree=groupTree;values.slice(0,values.length-1).forEach(function(value){var key=JSON.stringify(value);tree=tree.directSubTrees[key];});tree.directSubTrees[JSON.stringify(values[values.length-1])]={root:{labels:labels,values:values,},directSubTrees:{},};},_computeRowGroupBys:function(){return!_.isEmpty(this.data.groupedBy)?this.data.groupedBy:this.initialRowGroupBys;},_findGroup:function(groupTree,values){var tree=groupTree;values.slice(0,values.length).forEach(function(value){var key=JSON.stringify(value);tree=tree.directSubTrees[key];});return tree;},_getCellValue:function(groupId,measure,originIndexes){var self=this;var key=JSON.stringify(groupId);if(!self.measurements[key]){return;}
var values=originIndexes.map(function(originIndex){return self.measurements[key][originIndex][measure];});if(originIndexes.length>1){return computeVariation(values[0],values[1]);}else{return values[0];}},_getDomains:function(){var domains=[this.data.domain.concat(this.data.timeRange)];if(this.data.compare){domains.push(this.data.domain.concat(this.data.comparisonTimeRange));}
return domains;},_getGroupBys:function(){return{colGroupBys:this.data.colGroupBys.concat(this.data.expandedColGroupBys),rowGroupBys:this.data.rowGroupBys.concat(this.data.expandedRowGroupBys),};},_getGroupDomain:function(group){var key=JSON.stringify([group.rowValues,group.colValues]);return this.groupDomains[key][group.originIndex];},_getGroupLabels:function(group,groupBys){var self=this;return groupBys.map(function(groupBy){return self._sanitizeLabel(group[groupBy],groupBy);});},_getGroupSubdivision:function(group,rowGroupBy,colGroupBy){var groupDomain=this._getGroupDomain(group);var measureSpecs=this._getMeasureSpecs();var groupBy=rowGroupBy.concat(colGroupBy);return this._rpc({model:this.modelName,method:'read_group',context:this.data.context,domain:groupDomain,fields:measureSpecs,groupBy:groupBy,lazy:false,}).then(function(subGroups){return{group:group,subGroups:subGroups,rowGroupBy:rowGroupBy,colGroupBy:colGroupBy};});},_getGroupValues:function(group,groupBys){var self=this;return groupBys.map(function(groupBy){return self._sanitizeValue(group[groupBy]);});},_getLeafCounts:function(tree){var self=this;var leafCounts={};var leafCount;if(_.isEmpty(tree.directSubTrees)){leafCount=1;}else{leafCount=_.values(tree.directSubTrees).reduce(function(acc,subTree){var subLeafCounts=self._getLeafCounts(subTree);_.extend(leafCounts,subLeafCounts);return acc+leafCounts[JSON.stringify(subTree.root.values)];},0);}
leafCounts[JSON.stringify(tree.root.values)]=leafCount;return leafCounts;},_getMeasurements:function(group){var self=this;return this.data.measures.reduce(function(measurements,fieldName){var measurement=group[fieldName];if(measurement instanceof Array){measurement=1;}
if(self.fields[fieldName].type==='boolean'&&measurement instanceof Boolean){measurement=measurement?1:0;}
if(self.data.origins.length>1&&!measurement){measurement=0;}
measurements[fieldName]=measurement;return measurements;},{});},_getMeasuresRow:function(columns){var self=this;var sortedColumn=this.data.sortedColumn||{};var measureRow=[];columns.forEach(function(column){self.data.measures.forEach(function(measure){var measureCell={groupId:column.groupId,height:1,measure:measure,title:self.fields[measure].string,width:2*self.data.origins.length-1,};if(sortedColumn.measure===measure&&_.isEqual(sortedColumn.groupId,column.groupId)){measureCell.order=sortedColumn.order;}
measureRow.push(measureCell);});});return measureRow;},_getMeasureSpecs:function(){var self=this;return this.data.measures.reduce(function(acc,measure){if(measure==='__count'){acc.push(measure);return acc;}
var type=self.fields[measure].type;var groupOperator=self.fields[measure].group_operator;if(type==='many2one'){groupOperator='count_distinct';}
if(groupOperator===undefined){throw new Error("No aggregate function has been provided for the measure '"+measure+"'");}
acc.push(measure+':'+groupOperator);return acc;},[]);},_getNumberedLabel:function(label,fieldName){var id=label[0];var name=label[1];this.numbering[fieldName]=this.numbering[fieldName]||{};this.numbering[fieldName][name]=this.numbering[fieldName][name]||{};var numbers=this.numbering[fieldName][name];numbers[id]=numbers[id]||_.size(numbers)+1;return name+(numbers[id]>1?"  ("+numbers[id]+")":"");},_getOriginsRow:function(columns){var self=this;var sortedColumn=this.data.sortedColumn||{};var originRow=[];columns.forEach(function(column){var groupId=column.groupId;var measure=column.measure;var isSorted=sortedColumn.measure===measure&&_.isEqual(sortedColumn.groupId,groupId);var isSortedByOrigin=isSorted&&!sortedColumn.originIndexes[1];var isSortedByVariation=isSorted&&sortedColumn.originIndexes[1];self.data.origins.forEach(function(origin,originIndex){var originCell={groupId:groupId,height:1,measure:measure,originIndexes:[originIndex],title:origin,width:1,};if(isSortedByOrigin&&sortedColumn.originIndexes[0]===originIndex){originCell.order=sortedColumn.order;}
originRow.push(originCell);if(originIndex>0){var variationCell={groupId:groupId,height:1,measure:measure,originIndexes:[originIndex-1,originIndex],title:_t('Variation'),width:1,};if(isSortedByVariation&&sortedColumn.originIndexes[1]===originIndex){variationCell.order=sortedColumn.order;}
originRow.push(variationCell);}});});return originRow;},_getOrigins:function(){var origins=[this.data.timeRangeDescription||""];if(this.data.compare){origins.push(this.data.comparisonTimeRangeDescription);}
return origins;},_getTable:function(){var headers=this._getTableHeaders();return{headers:headers,rows:this._getTableRows(this.rowGroupTree,headers[headers.length-1]),};},_getTableHeaders:function(){var colGroupBys=this._getGroupBys().colGroupBys;var height=colGroupBys.length+1;var measureCount=this.data.measures.length;var originCount=this.data.origins.length;var leafCounts=this._getLeafCounts(this.colGroupTree);var headers=[];var measureColumns=[];var colGroupRows=(new Array(height)).fill(0).map(function(){return[];});colGroupRows[0].push({height:height+1+(originCount>1?1:0),title:"",width:1,});function generateTreeHeaders(tree){var group=tree.root;var rowIndex=group.values.length;var row=colGroupRows[rowIndex];var groupId=[[],group.values];var isLeaf=_.isEmpty(tree.directSubTrees);var leafCount=leafCounts[JSON.stringify(tree.root.values)];var cell={groupId:groupId,height:isLeaf?(colGroupBys.length+1-rowIndex):1,isLeaf:isLeaf,title:group.labels[group.labels.length-1]||_t('Total'),width:leafCount*measureCount*(2*originCount-1),};row.push(cell);if(isLeaf){measureColumns.push(cell);}
_.values(tree.directSubTrees).forEach(function(subTree){generateTreeHeaders(subTree);});}
generateTreeHeaders(this.colGroupTree);if(leafCounts[JSON.stringify(this.colGroupTree.root.values)]>1){var groupId=[[],[]];var totalTopRightCell={groupId:groupId,height:height,title:"",width:measureCount*(2*originCount-1),};colGroupRows[0].push(totalTopRightCell);measureColumns.push(totalTopRightCell);}
headers=headers.concat(colGroupRows);var measuresRow=this._getMeasuresRow(measureColumns);headers.push(measuresRow);if(originCount>1){headers.push(this._getOriginsRow(measuresRow));}
return headers;},_getTableRows:function(tree,columns){var self=this;var rows=[];var group=tree.root;var rowGroupId=[group.values,[]];var title=group.labels[group.labels.length-1]||_t('Total');var indent=group.labels.length;var isLeaf=_.isEmpty(tree.directSubTrees);var subGroupMeasurements=columns.map(function(column){var colGroupId=column.groupId;var groupIntersectionId=[rowGroupId[0],colGroupId[1]];var measure=column.measure;var originIndexes=column.originIndexes||[0];var value=self._getCellValue(groupIntersectionId,measure,originIndexes);var measurement={groupId:groupIntersectionId,originIndexes:originIndexes,measure:measure,value:value,isBold:!groupIntersectionId[0].length||!groupIntersectionId[1].length,};return measurement;});rows.push({title:title,groupId:rowGroupId,indent:indent,isLeaf:isLeaf,subGroupMeasurements:subGroupMeasurements});var subTreeKeys=tree.sortedKeys||Object.keys(tree.directSubTrees);subTreeKeys.forEach(function(subTreeKey){var subTree=tree.directSubTrees[subTreeKey];rows=rows.concat(self._getTableRows(subTree,columns));});return rows;},_getTreeHeight:function(tree){var subTreeHeights=_.values(tree.directSubTrees).map(this._getTreeHeight.bind(this));return Math.max(0,Math.max.apply(null,subTreeHeights))+1;},_hasData:function(){return(this.counts[JSON.stringify([[],[]])]||[]).some(function(count){return count>0;});},_loadData:function(){var self=this;this.rowGroupTree={root:{labels:[],values:[]},directSubTrees:{}};this.colGroupTree={root:{labels:[],values:[]},directSubTrees:{}};this.measurements={};this.counts={};var key=JSON.stringify([[],[]]);this.groupDomains={};this.groupDomains[key]=this.data.domains.slice(0);var group={rowValues:[],colValues:[]};var groupBys=this._getGroupBys();var leftDivisors=sections(groupBys.rowGroupBys);var rightDivisors=sections(groupBys.colGroupBys);var divisors=cartesian(leftDivisors,rightDivisors);return this._subdivideGroup(group,divisors.slice(0,1)).then(function(){return self._subdivideGroup(group,divisors.slice(1));});},_prepareData:function(group,groupSubdivisions){var self=this;var groupRowValues=group.rowValues;var groupRowLabels=[];var rowSubTree=this.rowGroupTree;var root;if(groupRowValues.length){rowSubTree=this._findGroup(this.rowGroupTree,groupRowValues);root=rowSubTree.root;groupRowLabels=root.labels;}
var groupColValues=group.colValues;var groupColLabels=[];if(groupColValues.length){root=this._findGroup(this.colGroupTree,groupColValues).root;groupColLabels=root.labels;}
groupSubdivisions.forEach(function(groupSubdivision){groupSubdivision.subGroups.forEach(function(subGroup){var rowValues=groupRowValues.concat(self._getGroupValues(subGroup,groupSubdivision.rowGroupBy));var rowLabels=groupRowLabels.concat(self._getGroupLabels(subGroup,groupSubdivision.rowGroupBy));var colValues=groupColValues.concat(self._getGroupValues(subGroup,groupSubdivision.colGroupBy));var colLabels=groupColLabels.concat(self._getGroupLabels(subGroup,groupSubdivision.colGroupBy));if(!colValues.length&&rowValues.length){self._addGroup(self.rowGroupTree,rowLabels,rowValues);}
if(colValues.length&&!rowValues.length){self._addGroup(self.colGroupTree,colLabels,colValues);}
var key=JSON.stringify([rowValues,colValues]);var originIndex=groupSubdivision.group.originIndex;if(!(key in self.measurements)){self.measurements[key]=self.data.origins.map(function(){return self._getMeasurements({});});}
self.measurements[key][originIndex]=self._getMeasurements(subGroup);if(!(key in self.counts)){self.counts[key]=self.data.origins.map(function(){return 0;});}
self.counts[key][originIndex]=subGroup.__count;if(!(key in self.groupDomains)){self.groupDomains[key]=self.data.origins.map(function(){return[[0,'=',1]];});}
if(subGroup.__domain){self.groupDomains[key][originIndex]=subGroup.__domain;}});});if(this.data.sortedColumn){this.sortRows(this.data.sortedColumn,rowSubTree);}},_processMeasures:function(measures){if(measures){return _.map(measures,function(measure){return measure==='__count__'?'__count':measure;});}},_pruneTree:function(tree,oldTree){if(_.isEmpty(oldTree.directSubTrees)){tree.directSubTrees={};delete tree.sortedKeys;return;}
var self=this;Object.keys(tree.directSubTrees).forEach(function(subTreeKey){var index=Object.keys(oldTree.directSubTrees).indexOf(subTreeKey);var subTree=tree.directSubTrees[subTreeKey];if(index===-1){subTree.directSubTrees={};delete subTreeKey.sortedKeys;}else{var oldSubTree=oldTree.directSubTrees[subTreeKey];self._pruneTree(subTree,oldSubTree);}});},_sanitizeLabel:function(value,groupBy){var fieldName=groupBy.split(':')[0];if(value===false){return _t("Undefined");}
if(value instanceof Array){return this._getNumberedLabel(value,fieldName);}
if(fieldName&&this.fields[fieldName]&&(this.fields[fieldName].type==='selection')){var selected=_.where(this.fields[fieldName].selection,{0:value})[0];return selected?selected[1]:value;}
return value;},_sanitizeValue:function(value){if(value instanceof Array){return value[0];}
return value;},_subdivideGroup:function(group,divisors){var self=this;var key=JSON.stringify([group.rowValues,group.colValues]);var proms=this.data.origins.reduce(function(acc,origin,originIndex){if(!self.counts[key]||self.counts[key][originIndex]>0){var subGroup={rowValues:group.rowValues,colValues:group.colValues,originIndex:originIndex};divisors.forEach(function(divisor){acc.push(self._getGroupSubdivision(subGroup,divisor[0],divisor[1]));});}
return acc;},[]);return this._loadDataDropPrevious.add(Promise.all(proms)).then(function(groupSubdivisions){if(groupSubdivisions.length){self._prepareData(group,groupSubdivisions);}});},_sortTree:function(sortFunction,tree){var self=this;tree.sortedKeys=_.sortBy(Object.keys(tree.directSubTrees),sortFunction(tree));_.values(tree.directSubTrees).forEach(function(subTree){self._sortTree(sortFunction,subTree);});},});return PivotModel;});;

/* /web/static/src/js/views/pivot/pivot_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.PivotController',function(require){"use strict";var AbstractController=require('web.AbstractController');var core=require('web.core');var framework=require('web.framework');var session=require('web.session');var _t=core._t;var QWeb=core.qweb;var PivotController=AbstractController.extend({contentTemplate:'PivotView',events:{'click .o_pivot_field_menu a':'_onGroupByMenuSelection','click .o_pivot_header_cell_closed':'_onClosedHeaderClick',},custom_events:_.extend({},AbstractController.prototype.custom_events,{close_group:'_onCloseGroup',open_view:'_onOpenView',sort_rows:'_onSortRows',}),init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.measures=params.measures;this.groupableFields=params.groupableFields;this.title=params.title;this.views=params.views;this.groupSelected=null;},start:function(){this.$groupBySelection=this.$('.o_field_selection');core.bus.on('click',this,function(){this.$groupBySelection.empty();});return this._super();},destroy:function(){if(this.$buttons){this.$buttons.find('button').off();}
return this._super.apply(this,arguments);},getOwnedQueryParams:function(){var state=this.model.get({raw:true});return{context:{pivot_measures:state.measures,pivot_column_groupby:state.colGroupBys,pivot_row_groupby:state.rowGroupBys,}};},renderButtons:function($node){if($node){var context={measures:_.sortBy(_.pairs(_.omit(this.measures,'__count')),function(x){return x[1].string.toLowerCase();}),};this.$buttons=$(QWeb.render('PivotView.buttons',context));this.$buttons.click(this._onButtonClick.bind(this));this.$buttons.find('button').tooltip();this.$buttons.appendTo($node);this._updateButtons();}},_downloadTable:function(){var self=this;if(self.model.getTableWidth()>256){this.call('crash_manager','show_message',_t("For Excel compatibility, data cannot be exported if there are more than 256 columns.\n\nTip: try to flip axis, filter further or reduce the number of measures."));framework.unblockUI();return;}
var table=self.model.exportData();table.title=self.title;session.get_file({url:'/web/pivot/export_xls',data:{data:JSON.stringify(table)},complete:framework.unblockUI,error:(error)=>this.call('crash_manager','rpc_error',error),});},_renderGroupBySelection:function(top,left){var state=this.model.get({raw:true});var groupedFields=state.rowGroupBys.concat(state.colGroupBys).map(function(f){return f.split(':')[0];});var fields=_.chain(this.groupableFields).pairs().sortBy(function(f){return f[1].string;}).map(function(f){return[f[0],f[1],_.contains(groupedFields,f[0])];}).value();this.$groupBySelection.html(QWeb.render('PivotView.GroupBySelection',{fields:fields}));var cssProps={top:top};var isRTL=_t.database.parameters.direction==='rtl';cssProps[isRTL?'right':'left']=isRTL?this.$el.width()-left:left;this.$groupBySelection.find('.dropdown-menu').first().css(cssProps).addClass('show');},_startRenderer:function(){return this.renderer.appendTo(this.$('.o_pivot'));},_update:function(){this._updateButtons();return this._super.apply(this,arguments);},_updateButtons:function(){if(!this.$buttons){return;}
var self=this;var state=this.model.get({raw:true});_.each(this.measures,function(measure,name){var isSelected=_.contains(state.measures,name);self.$buttons.find('.dropdown-item[data-field="'+name+'"]').toggleClass('selected',isSelected);});var noDataDisplayed=!state.hasData||!state.measures.length;this.$buttons.find('.o_pivot_flip_button').prop('disabled',noDataDisplayed);this.$buttons.find('.o_pivot_expand_button').prop('disabled',noDataDisplayed);this.$buttons.find('.o_pivot_download').prop('disabled',noDataDisplayed);},_onButtonClick:function(ev){var $target=$(ev.target);if($target.hasClass('o_pivot_flip_button')){this.model.flip();this.update({},{reload:false});}
if($target.hasClass('o_pivot_expand_button')){this.model.expandAll().then(this.update.bind(this,{},{reload:false}));}
if($target.parents('.o_pivot_measures_list').length){ev.preventDefault();ev.stopPropagation();var field=$target.data('field');this.model.toggleMeasure(field).then(this.update.bind(this,{},{reload:false}));}
if($target.hasClass('o_pivot_download')){this._downloadTable();}},_onCloseGroup:function(ev){this.model.closeGroup(ev.data.groupId,ev.data.type);this.update({},{reload:false});},_onClosedHeaderClick:function(ev){ev.preventDefault();ev.stopPropagation();var $target=$(ev.target);var groupId=$target.data('groupId');var type=$target.data('type');var group={rowValues:groupId[0],colValues:groupId[1],type:type};var state=this.model.get({raw:true});var groupValues=type==='row'?groupId[0]:groupId[1];var groupBys=type==='row'?state.rowGroupBys:state.colGroupBys;this.selectedGroup=group;if(groupValues.length<groupBys.length){var groupBy=groupBys[groupValues.length];this.model.expandGroup(this.selectedGroup,groupBy).then(this.update.bind(this,{},{reload:false}));}else{var position=$target.position();var top=position.top+$target.height();var left=position.left+ev.offsetX;this._renderGroupBySelection(top,left);}},_onGroupByMenuSelection:function(ev){ev.preventDefault();var $target=$(ev.target);if($target.hasClass('disabled')){ev.stopPropagation();return;}
var groupBy=$target.data('field');var interval=$target.data('interval');if(interval){groupBy=groupBy+':'+interval;}
this.model.addGroupBy(groupBy,this.selectedGroup.type);this.model.expandGroup(this.selectedGroup,groupBy).then(this.update.bind(this,{},{reload:false}));},_onOpenView:function(ev){ev.stopPropagation();var context=ev.data.context;var group=ev.data.group;var domain=this.model._getGroupDomain(group);this.do_action({type:'ir.actions.act_window',name:this.title,res_model:this.modelName,views:this.views,view_mode:'list',target:'current',context:context,domain:domain,});},_onSortRows:function(ev){this.model.sortRows(ev.data.sortedColumn);this.update({},{reload:false});},});return PivotController;});;

/* /web/static/src/js/views/pivot/pivot_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.PivotRenderer',function(require){"use strict";var AbstractRenderer=require('web.AbstractRenderer');var config=require('web.config');var core=require('web.core');var dataComparisonUtils=require('web.dataComparisonUtils');var field_utils=require('web.field_utils');var QWeb=core.qweb;var _t=core._t;var PivotRenderer=AbstractRenderer.extend({tagName:'table',className:'table-hover table-sm table-bordered',events:_.extend({},AbstractRenderer.prototype.events,{'click td.o_pivot_cell_value':'_onCellValueClicked','click .o_pivot_header_cell_opened':'_onOpenHeaderClick','click .o_pivot_measure_row':'_onSpecialRowClick','click .o_pivot_origin_row':'_onSpecialRowClick','mouseenter thead tr:last th':'_onMouseenterCell','mouseenter tbody td':'_onMouseenterCell','mouseleave thead tr:last th':'_onMouseleaveCell','mouseleave tbody td':'_onMouseleaveCell',}),init:function(parent,state,params){this._super.apply(this,arguments);this.enableLinking=params.enableLinking;this.fieldWidgets=params.widgets||{};this.paddingLeftHeaderTabWidth=config.device.isMobile?5:30;},_getGroupByLabels:function(groupBy){var self=this;return _.map(groupBy,function(gb){return self.state.fields[gb.split(':')[0]].string;});},_render:function(){var hasContent=this.state.hasData&&this.state.measures.length;if(!hasContent){this._replaceElement(QWeb.render('View.NoContentHelper',{description:_t("Try to add some records, or make sure that there is at least "+"one measure and no active filter in the search bar."),}));return this._super.apply(this,arguments);}
this.renderElement();this.$el.toggleClass('o_enable_linking',this.enableLinking);var $thead=$('<thead>');var $tbody=$('<tbody>');this._renderHeaders($thead);this._renderRows($tbody);this.$el.empty().append($thead).append($tbody);this.$('.o_pivot_header_cell_opened, .o_pivot_header_cell_closed').tooltip();return this._super.apply(this,arguments);},_renderHeaders:function($thead){var groupbyLabels=this._getGroupByLabels(this.state.colGroupBys);this.state.table.headers.forEach(function(row,rowIndex){var $tr=$('<tr>');row.forEach(function(cell){var cellParams={text:cell.title,colspan:cell.width,rowspan:cell.height,data:{groupId:cell.groupId,type:'col',}}
var className;if(cell.measure){if(cell.originIndexes){cellParams.data.originIndexes=cell.originIndexes
className='o_pivot_origin_row';}else{className='o_pivot_measure_row';}
className+=' text-muted';if(cell.order){className+=' o_pivot_sort_order_'+cell.order;if(cell.order==='asc'){cellParams['aria-sorted']='ascending'}else{cellParams['aria-sorted']='descending'}}
cellParams.data.measure=cell.measure;}else if('isLeaf'in cell){if(rowIndex>0){cellParams.title=groupbyLabels[rowIndex-1];}
className='o_pivot_header_cell'+(cell.isLeaf?'_closed':'_opened');}
cellParams.class=className;$tr.append($('<th>',cellParams));});$thead.append($tr);});},_renderRows:function($tbody){var self=this;var measureTypes=this.state.measures.reduce(function(acc,measureName){var type=self.state.fields[measureName].type;acc[measureName]=type==='many2one'?'integer':type;return acc;},{});var groupbyLabels=this._getGroupByLabels(this.state.rowGroupBys);this.state.table.rows.forEach(function(row){var $tr=$('<tr>');var paddingLeft=5+row.indent*self.paddingLeftHeaderTabWidth;$tr.append($('<th>',{text:row.title,title:row.indent>0?groupbyLabels[row.indent-1]:null,data:{groupId:row.groupId,type:'row',},css:{'padding-left':paddingLeft+'px',},class:'o_pivot_header_cell_'+(row.isLeaf?'closed':'opened'),}));row.subGroupMeasurements.forEach(function(measurement){var cellParams={data:{groupId:measurement.groupId,originIndexes:measurement.originIndexes,},class:'o_pivot_cell_value text-right',};if(measurement.isBold){cellParams.css={'font-weight':'bold',};}
if(measurement.value!==undefined){var measure=measurement.measure;var measureField=self.state.fields[measure];var $value;if(measurement.originIndexes.length>1){$value=dataComparisonUtils.renderVariation(measurement.value,measureField);}else{var formatType=self.fieldWidgets[measure]||measureTypes[measure];var formatter=field_utils.format[formatType];$value=$('<div>',{class:'o_value',html:formatter(measurement.value,measureField),});}
cellParams.html=$value;}else{cellParams.class+=' o_empty'}
$tr.append($('<td>',cellParams));});$tbody.append($tr);});},_onCellValueClicked:function(ev){ev.preventDefault();ev.stopPropagation();var $target=$(ev.currentTarget);if($target.hasClass('o_empty')||!this.enableLinking){return;}
var context=_.omit(this.state.context,function(val,key){return key==='group_by'||_.str.startsWith(key,'search_default_');});var groupId=$target.data('groupId');var originIndexes=$target.data('originIndexes');var group={rowValues:groupId[0],colValues:groupId[1],originIndex:originIndexes[0]};this.trigger_up('open_view',{group:group,context:context,});},_onMouseenterCell:function(ev){var index=$(ev.currentTarget).index();if($(ev.currentTarget).is('th')){index+=1;}
this.$("td").filter(":nth-child("+(index+1)+")").addClass("o_cell_hover");},_onMouseleaveCell:function(){this.$('.o_cell_hover').removeClass('o_cell_hover');},_onOpenHeaderClick:function(ev){ev.preventDefault();ev.stopImmediatePropagation();var $target=$(ev.target);var groupId=$target.data('groupId');var type=$target.data('type');this.trigger_up('close_group',{groupId:groupId,type:type,});},_onSpecialRowClick:function(ev){ev.preventDefault();ev.stopImmediatePropagation();var $target=$(ev.target);var groupId=$target.data('groupId');var measure=$target.data('measure');var originIndexes=$target.data('originIndexes');var isAscending=$target.hasClass('o_pivot_sort_order_asc');var order=isAscending?'desc':'asc';this.trigger_up('sort_rows',{sortedColumn:{groupId:groupId,measure:measure,order:order,originIndexes:originIndexes,}});},});return PivotRenderer;});;

/* /web/static/src/js/views/pivot/pivot_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.PivotView',function(require){"use strict";var AbstractView=require('web.AbstractView');var config=require('web.config');var core=require('web.core');var PivotModel=require('web.PivotModel');var PivotController=require('web.PivotController');var PivotRenderer=require('web.PivotRenderer');var _t=core._t;var _lt=core._lt;var controlPanelViewParameters=require('web.controlPanelViewParameters');var GROUPABLE_TYPES=controlPanelViewParameters.GROUPABLE_TYPES;var PivotView=AbstractView.extend({display_name:_lt('Pivot'),icon:'fa-table',config:_.extend({},AbstractView.prototype.config,{Model:PivotModel,Controller:PivotController,Renderer:PivotRenderer,}),viewType:'pivot',searchMenuTypes:['filter','groupBy','timeRange','favorite'],init:function(viewInfo,params){var self=this;this._super.apply(this,arguments);var activeMeasures=[];var colGroupBys=[];var rowGroupBys=[];var measures={};var groupableFields={};var widgets={};this.fields.__count={string:_t("Count"),type:"integer"};_.each(this.fields,function(field,name){if((name!=='id')&&(field.store===true)){if(_.contains(['integer','float','monetary'],field.type)||_.contains(params.additionalMeasures,name)){measures[name]=field;}
if(_.contains(GROUPABLE_TYPES,field.type)){groupableFields[name]=field;}}});measures.__count={string:_t("Count"),type:"integer"};this.arch.children.forEach(function(field){var name=field.attrs.name;if(field.attrs.interval){name+=':'+field.attrs.interval;}
if(field.attrs.widget){widgets[name]=field.attrs.widget;}
if(field.attrs.invisible&&py.eval(field.attrs.invisible)){delete measures[name];return;}
if(field.attrs.type==='measure'&&!(name in measures)){measures[name]=self.fields[name];}
if(field.attrs.string){measures[name].string=field.attrs.string;}
if(field.attrs.type==='measure'||'operator'in field.attrs){activeMeasures.push(name);measures[name]=self.fields[name];}
if(field.attrs.type==='col'){colGroupBys.push(name);}
if(field.attrs.type==='row'){rowGroupBys.push(name);}});if((!activeMeasures.length)||this.arch.attrs.display_quantity){activeMeasures=['__count'].concat(activeMeasures);}
this.loadParams.measures=activeMeasures;this.loadParams.colGroupBys=colGroupBys;this.loadParams.rowGroupBys=rowGroupBys;this.loadParams.fields=this.fields;this.loadParams.default_order=params.default_order||this.arch.attrs.default_order;if(config.device.isMobile){this.loadParams.colGroupBys=[];}
this.rendererParams.widgets=widgets;this.rendererParams.enableLinking=!this.arch.attrs.disable_linking;this.controllerParams.title=params.title||this.arch.attrs.string||_t("Untitled");this.controllerParams.measures=measures;this.controllerParams.groupableFields=groupableFields;this.controllerParams.views=[_findView(params.actionViews,'list'),_findView(params.actionViews,'form'),];function _findView(views,viewType){var view=_.find(views,function(view){return view.type===viewType;});return[view?view.viewID:false,viewType];}},});return PivotView;});;

/* /web/static/src/js/views/calendar/calendar_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web.CalendarController',function(require){"use strict";var AbstractController=require('web.AbstractController');var config=require('web.config');var core=require('web.core');var Dialog=require('web.Dialog');var dialogs=require('web.view_dialogs');var QuickCreate=require('web.CalendarQuickCreate');var _t=core._t;var QWeb=core.qweb;function dateToServer(date){return date.clone().utc().locale('en').format('YYYY-MM-DD HH:mm:ss');}
var CalendarController=AbstractController.extend({custom_events:_.extend({},AbstractController.prototype.custom_events,{changeDate:'_onChangeDate',changeFilter:'_onChangeFilter',deleteRecord:'_onDeleteRecord',dropRecord:'_onDropRecord',next:'_onNext',openCreate:'_onOpenCreate',openEvent:'_onOpenEvent',prev:'_onPrev',quickCreate:'_onQuickCreate',updateRecord:'_onUpdateRecord',viewUpdated:'_onViewUpdated',}),init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.current_start=null;this.displayName=params.displayName;this.quickAddPop=params.quickAddPop;this.disableQuickCreate=params.disableQuickCreate;this.eventOpenPopup=params.eventOpenPopup;this.formViewId=params.formViewId;this.readonlyFormViewId=params.readonlyFormViewId;this.mapping=params.mapping;this.context=params.context;this.previousOpen=null;this.quickCreating=false;},destroy:function(){this._super.apply(this,arguments);if(this.$todayButton){this.$todayButton.off();}},getTitle:function(){return this._title;},renderButtons:function($node){var self=this;this.$buttons=$(QWeb.render('CalendarView.buttons',{isMobile:config.device.isMobile,}));this.$buttons.on('click','button.o_calendar_button_new',function(){self.trigger_up('switch_view',{view_type:'form'});});_.each(['prev','today','next'],function(action){self.$buttons.on('click','.o_calendar_button_'+action,function(){self._move(action);});});_.each(['day','week','month'],function(scale){self.$buttons.on('click','.o_calendar_button_'+scale,function(){self.model.setScale(scale);self.reload();});});this.$buttons.find('.o_calendar_button_'+this.mode).addClass('active');if($node){this.$buttons.appendTo($node);}else{this.$('.o_calendar_buttons').replaceWith(this.$buttons);}},renderPager:function($node){if(config.device.isMobile){this.$todayButton=$(QWeb.render('CalendarView.TodayButtonMobile'));this.$todayButton.on('click',this._move.bind(this,'today'));$node.append(this.$todayButton);}},_move:function(to){this.model[to]();return this.reload();},_updateRecord:function(record){var reload=this.reload.bind(this,{});return this.model.updateRecord(record).then(reload,reload);},_onChangeDate:function(event){var modelData=this.model.get();if(modelData.target_date.format('YYYY-MM-DD')===event.data.date.format('YYYY-MM-DD')){switch(modelData.scale){case'month':this.model.setScale('week');break;case'week':this.model.setScale('day');break;case'day':this.model.setScale('month');break;}}else if(modelData.target_date.week()===event.data.date.week()){this.model.setScale('day');}else{this.model.setScale('week');}
this.model.setDate(event.data.date);this.reload();},_onChangeFilter:function(event){if(this.model.changeFilter(event.data)&&!event.data.no_reload){this.reload();}},_onDeleteRecord:function(event){var self=this;Dialog.confirm(this,_t("Are you sure you want to delete this record ?"),{confirm_callback:function(){self.model.deleteRecords([event.data.id],self.modelName).then(function(){self.reload();});}});},_onDropRecord:function(event){this._updateRecord(_.extend({},event.data,{'drop':true,}));},_onNext:function(event){event.stopPropagation();this._move('next');},_onOpenCreate:function(event){var self=this;if(this.model.get().scale==="month"){event.data.allDay=true;}
var data=this.model.calendarEventToRecord(event.data);var context=_.extend({},this.context,event.options&&event.options.context);context.default_name=data.name||null;context['default_'+this.mapping.date_start]=data[this.mapping.date_start]||null;if(this.mapping.date_stop){context['default_'+this.mapping.date_stop]=data[this.mapping.date_stop]||null;}
if(this.mapping.date_delay){context['default_'+this.mapping.date_delay]=data[this.mapping.date_delay]||null;}
if(this.mapping.all_day){context['default_'+this.mapping.all_day]=data[this.mapping.all_day]||null;}
for(var k in context){if(context[k]&&context[k]._isAMomentObject){context[k]=dateToServer(context[k]);}}
var options=_.extend({},this.options,event.options,{context:context,title:_.str.sprintf(_t('Create: %s'),(this.displayName||this.renderer.arch.attrs.string))});if(this.quick!=null){this.quick.destroy();this.quick=null;}
if(!options.disableQuickCreate&&!event.data.disableQuickCreate&&this.quickAddPop){this.quick=new QuickCreate(this,true,options,data,event.data);this.quick.open();this.quick.opened(function(){self.quick.focus();});return;}
var title=_t("Create");if(this.renderer.arch.attrs.string){title+=': '+this.renderer.arch.attrs.string;}
if(this.eventOpenPopup){if(this.previousOpen){this.previousOpen.close();}
this.previousOpen=new dialogs.FormViewDialog(self,{res_model:this.modelName,context:context,title:title,view_id:this.formViewId||false,disable_multiple_selection:true,on_saved:function(){if(event.data.on_save){event.data.on_save();}
self.reload();},});this.previousOpen.open();}else{this.do_action({type:'ir.actions.act_window',res_model:this.modelName,views:[[this.formViewId||false,'form']],target:'current',context:context,});}},_onOpenEvent:function(event){var self=this;var id=event.data._id;id=id&&parseInt(id).toString()===id?parseInt(id):id;if(!this.eventOpenPopup){this._rpc({model:self.modelName,method:'get_formview_id',args:[[id]],context:event.context||self.context,}).then(function(viewId){self.do_action({type:'ir.actions.act_window',res_id:id,res_model:self.modelName,views:[[viewId||false,'form']],target:'current',context:event.context||self.context,});});return;}
var options={res_model:self.modelName,res_id:id||null,context:event.context||self.context,title:_t("Open: ")+event.data.title,on_saved:function(){if(event.data.on_save){event.data.on_save();}
self.reload();},};if(this.formViewId){options.view_id=parseInt(this.formViewId);}
new dialogs.FormViewDialog(this,options).open();},_onPrev:function(){event.stopPropagation();this._move('prev');},_onQuickCreate:function(event){var self=this;if(this.quickCreating){return;}
this.quickCreating=true;this.model.createRecord(event).then(function(){self.quick.destroy();self.quick=null;self.reload();self.quickCreating=false;}).guardedCatch(function(result){var errorEvent=result.event;errorEvent.preventDefault();event.data.options.disableQuickCreate=true;event.data.data.on_save=self.quick.destroy.bind(self.quick);self._onOpenCreate(event.data);self.quickCreating=false;})},_onUpdateRecord:function(event){this._updateRecord(event.data);},_onViewUpdated:function(event){this.mode=event.data.mode;if(this.$buttons){this.$buttons.find('.active').removeClass('active');this.$buttons.find('.o_calendar_button_'+this.mode).addClass('active');}
this._setTitle(this.displayName+' ('+event.data.title+')');},});return CalendarController;});;

/* /web/static/src/js/views/calendar/calendar_model.js defined in bundle 'web.assets_backend' */
odoo.define('web.CalendarModel',function(require){"use strict";var AbstractModel=require('web.AbstractModel');var Context=require('web.Context');var core=require('web.core');var fieldUtils=require('web.field_utils');var session=require('web.session');var _t=core._t;var scales=['day','week','month'];function dateToServer(date){return date.clone().utc().locale('en').format('YYYY-MM-DD HH:mm:ss');}
return AbstractModel.extend({init:function(){this._super.apply(this,arguments);this.end_date=null;var week_start=_t.database.parameters.week_start;this.week_start=week_start!==undefined&&week_start!==false?week_start%7:moment().startOf('week').day();this.week_stop=this.week_start+6;},calendarEventToRecord:function(event){var data={'name':event.title};var start=event.start.clone();var end=event.end&&event.end.clone();if(event.allDay||(end&&end.diff(start)%86400000===0)){event.allDay=true;}
if(!end||end.diff(start)<0){if(event.allDay){end=start.clone();}else{end=start.clone().add(2,'h');}}else if(event.allDay){end.add(-1,'days');}
var isDateEvent=this.fields[this.mapping.date_start].type==='date';if(event.allDay){if(!this.mapping.all_day&&!isDateEvent){if(event.r_start){start.hours(event.r_start.hours()).minutes(event.r_start.minutes()).seconds(event.r_start.seconds()).utc();end.hours(event.r_end.hours()).minutes(event.r_end.minutes()).seconds(event.r_end.seconds()).utc();}else{start.hours(7);end.hours(19);}
start.add(-this.getSession().getTZOffset(start),'minutes');end.add(-this.getSession().getTZOffset(end),'minutes');}}else{start.add(-this.getSession().getTZOffset(start),'minutes');end.add(-this.getSession().getTZOffset(end),'minutes');}
if(this.mapping.all_day){if(event.record){data[this.mapping.all_day]=(this.scale!=='month'&&event.allDay)||event.record[this.mapping.all_day]&&end.diff(start)<10||false;}else{data[this.mapping.all_day]=event.allDay;}}
data[this.mapping.date_start]=start;if(this.mapping.date_stop){data[this.mapping.date_stop]=end;}
if(this.mapping.date_delay){if(this.data.scale!=='month'||(this.data.scale==='month'&&!event.drop)){data[this.mapping.date_delay]=(end.diff(start)<=0?end.endOf('day').diff(start):end.diff(start))/1000/3600;}}
return data;},changeFilter:function(filter){var Filter=this.data.filters[filter.fieldName];if(filter.value==='all'){Filter.all=filter.active;}
var f=_.find(Filter.filters,function(f){return f.value===filter.value;});if(f){if(f.active!==filter.active){f.active=filter.active;}else{return false;}}else if(filter.active){Filter.filters.push({value:filter.value,active:true,});}
return true;},createRecord:function(event){var data=this.calendarEventToRecord(event.data.data);for(var k in data){if(data[k]&&data[k]._isAMomentObject){data[k]=dateToServer(data[k]);}}
return this._rpc({model:this.modelName,method:'create',args:[data],context:event.data.options.context,});},deleteRecords:function(ids,model){return this._rpc({model:model,method:'unlink',args:[ids],context:session.user_context,});},get:function(){return _.extend({},this.data,{fields:this.fields});},load:function(params){var self=this;this.modelName=params.modelName;this.fields=params.fields;this.fieldNames=params.fieldNames;this.fieldsInfo=params.fieldsInfo;this.mapping=params.mapping;this.mode=params.mode;this.scales=params.scales;this.editable=params.editable;this.creatable=params.creatable;this.eventLimit=params.eventLimit;this.fieldColor=params.fieldColor;if(!this.preloadPromise){this.preloadPromise=new Promise(function(resolve,reject){Promise.all([self._rpc({model:self.modelName,method:'check_access_rights',args:["write",false]}),self._rpc({model:self.modelName,method:'check_access_rights',args:["create",false]})]).then(function(result){var write=result[0];var create=result[1];self.write_right=write;self.create_right=create;resolve();}).guardedCatch(reject);});}
this.data={domain:params.domain,context:params.context,filters:params.filters,};this.setDate(params.initialDate);this.setScale(params.mode);_.each(this.data.filters,function(filter){if(filter.avatar_field&&!filter.avatar_model){filter.avatar_model=self.modelName;}});return this.preloadPromise.then(this._loadCalendar.bind(this));},next:function(){this.setDate(this.data.target_date.clone().add(1,this.data.scale));},prev:function(){this.setDate(this.data.target_date.clone().add(-1,this.data.scale));},reload:function(handle,params){if(params.domain){this.data.domain=params.domain;}
if(params.context){this.data.context=params.context;}
return this._loadCalendar();},setDate:function(start){this.data.highlight_date=this.data.target_date=start.clone();this.data.start_date=this.data.end_date=start;switch(this.data.scale){case'month':var monthStart=this.data.start_date.clone().startOf('month');var monthStartDay;if(monthStart.day()>=this.week_start){monthStartDay=this.week_start;}else{monthStartDay=this.week_start-7;}
this.data.start_date=monthStart.day(monthStartDay).startOf('day');this.data.end_date=this.data.start_date.clone().add(5,'week').day(this.week_stop).endOf('day');break;case'week':this.data.start_date=this.data.start_date.clone().day(this.week_start).startOf('day');this.data.end_date=this.data.end_date.clone().day(this.week_stop).endOf('day');break;default:this.data.start_date=this.data.start_date.clone().startOf('day');this.data.end_date=this.data.end_date.clone().endOf('day');}
this.data.start_date.utc();this.data.end_date.utc();},setScale:function(scale){if(!_.contains(scales,scale)){scale="week";}
this.data.scale=scale;this.setDate(this.data.target_date);},today:function(){this.setDate(moment(new Date()));},updateRecord:function(record){var data=_.omit(this.calendarEventToRecord(record),'name');for(var k in data){if(data[k]&&data[k]._isAMomentObject){data[k]=dateToServer(data[k]);}}
var context=new Context(this.data.context,{from_ui:true});return this._rpc({model:this.modelName,method:'write',args:[[record.id],data],context:context});},_getFilterDomain:function(){var authorizedValues={};var avoidValues={};_.each(this.data.filters,function(filter){if(filter.all)return;_.each(filter.filters,function(f){if(filter.write_model){if(!authorizedValues[filter.fieldName])
authorizedValues[filter.fieldName]=[];if(f.active){authorizedValues[filter.fieldName].push(f.value);}}else{if(!avoidValues[filter.fieldName])
avoidValues[filter.fieldName]=[];if(!f.active){avoidValues[filter.fieldName].push(f.value);}}});});var domain=[];for(var field in authorizedValues){domain.push([field,'in',authorizedValues[field]]);}
for(var field in avoidValues){if(avoidValues[field].length>0){domain.push([field,'not in',avoidValues[field]]);}}
return domain;},_getFullCalendarOptions:function(){return{defaultView:(this.mode==="month")?"month":((this.mode==="week")?"agendaWeek":((this.mode==="day")?"agendaDay":"agendaWeek")),header:false,selectable:this.creatable&&this.create_right,selectHelper:true,editable:this.editable,droppable:true,navLinks:false,eventLimit:this.eventLimit,snapMinutes:15,longPressDelay:500,eventResizableFromStart:true,nowIndicator:true,weekNumbers:true,weekNumbersWithinDays:true,weekNumberTitle:_t("Week")+" ",allDayText:_t("All day"),monthNames:moment.months(),monthNamesShort:moment.monthsShort(),dayNames:moment.weekdays(),dayNamesShort:moment.weekdaysShort(),firstDay:this.week_start,slotLabelFormat:_t.database.parameters.time_format.search("%H")!=-1?'H:mm':'h(:mm)a',};},_getRangeDomain:function(){var domain=[[this.mapping.date_start,'<=',dateToServer(this.data.end_date)]];if(this.mapping.date_stop){domain.push([this.mapping.date_stop,'>=',dateToServer(this.data.start_date)]);}else if(!this.mapping.date_delay){domain.push([this.mapping.date_start,'>=',dateToServer(this.data.start_date)]);}
return domain;},_loadCalendar:function(){var self=this;this.data.fc_options=this._getFullCalendarOptions();var defs=_.map(this.data.filters,this._loadFilter.bind(this));return Promise.all(defs).then(function(){return self._rpc({model:self.modelName,method:'search_read',context:self.data.context,fields:self.fieldNames,domain:self.data.domain.concat(self._getRangeDomain()).concat(self._getFilterDomain())}).then(function(events){self._parseServerData(events);self.data.data=_.map(events,self._recordToCalendarEvent.bind(self));return Promise.all([self._loadColors(self.data,self.data.data),self._loadRecordsToFilters(self.data,self.data.data)]);});});},_loadColors:function(element,events){if(this.fieldColor){var fieldName=this.fieldColor;_.each(events,function(event){var value=event.record[fieldName];event.color_index=_.isArray(value)?value[0]:value;});this.model_color=this.fields[fieldName].relation||element.model;}
return Promise.resolve();},_loadFilter:function(filter){if(!filter.write_model){return Promise.resolve();}
var field=this.fields[filter.fieldName];return this._rpc({model:filter.write_model,method:'search_read',domain:[["user_id","=",session.uid]],fields:[filter.write_field],}).then(function(res){var records=_.map(res,function(record){var _value=record[filter.write_field];var value=_.isArray(_value)?_value[0]:_value;var f=_.find(filter.filters,function(f){return f.value===value;});var formater=fieldUtils.format[_.contains(['many2many','one2many'],field.type)?'many2one':field.type];return{'id':record.id,'value':value,'label':formater(_value,field),'active':!f||f.active,};});records.sort(function(f1,f2){return _.string.naturalCmp(f2.label,f1.label);});if(field.relation==='res.partner'||field.relation==='res.users'){var value=field.relation==='res.partner'?session.partner_id:session.uid;var me=_.find(records,function(record){return record.value===value;});if(me){records.splice(records.indexOf(me),1);}else{var f=_.find(filter.filters,function(f){return f.value===value;});me={'value':value,'label':session.name+_t(" [Me]"),'active':!f||f.active,};}
records.unshift(me);}
records.push({'value':'all','label':field.relation==='res.partner'||field.relation==='res.users'?_t("Everybody's calendars"):_t("Everything"),'active':filter.all,});filter.filters=records;});},_loadRecordsToFilters:function(element,events){var self=this;var new_filters={};var to_read={};_.each(this.data.filters,function(filter,fieldName){var field=self.fields[fieldName];new_filters[fieldName]=filter;if(filter.write_model){if(field.relation===self.model_color){_.each(filter.filters,function(f){f.color_index=f.value;});}
return;}
_.each(filter.filters,function(filter){filter.display=!filter.active;});var fs=[];var undefined_fs=[];_.each(events,function(event){var data=event.record[fieldName];if(!_.contains(['many2many','one2many'],field.type)){data=[data];}else{to_read[field.relation]=(to_read[field.relation]||[]).concat(data);}
_.each(data,function(_value){var value=_.isArray(_value)?_value[0]:_value;var f={'color_index':self.model_color===(field.relation||element.model)?value:false,'value':value,'label':fieldUtils.format[field.type](_value,field)||_t("Undefined"),'avatar_model':field.relation||element.model,};value?fs.push(f):undefined_fs.push(f);});});_.each(_.union(fs,undefined_fs),function(f){var f1=_.findWhere(filter.filters,f);if(f1){f1.display=true;}else{f.display=f.active=true;filter.filters.push(f);}});});var defs=[];_.each(to_read,function(ids,model){defs.push(self._rpc({model:model,method:'name_get',args:[_.uniq(ids)],}).then(function(res){to_read[model]=_.object(res);}));});return Promise.all(defs).then(function(){_.each(self.data.filters,function(filter){if(filter.write_model){return;}
if(filter.filters.length&&(filter.filters[0].avatar_model in to_read)){_.each(filter.filters,function(f){f.label=to_read[f.avatar_model][f.value];});}});});},_parseServerData:function(data){var self=this;_.each(data,function(event){_.each(self.fieldNames,function(fieldName){event[fieldName]=self._parseServerValue(self.fields[fieldName],event[fieldName]);});});},_recordToCalendarEvent:function(evt){var date_start;var date_stop;var date_delay=evt[this.mapping.date_delay]||1.0,all_day=this.fields[this.mapping.date_start].type==='date'||this.mapping.all_day&&evt[this.mapping.all_day]||false,the_title='',attendees=[];if(!all_day){date_start=evt[this.mapping.date_start].clone();date_stop=this.mapping.date_stop?evt[this.mapping.date_stop].clone():null;}else{date_start=evt[this.mapping.date_start].clone().startOf('day');date_stop=this.mapping.date_stop?evt[this.mapping.date_stop].clone().startOf('day'):null;}
if(!date_stop&&date_delay){date_stop=date_start.clone().add(date_delay,'hours');}
if(!all_day){date_start.add(this.getSession().getTZOffset(date_start),'minutes');date_stop.add(this.getSession().getTZOffset(date_stop),'minutes');}
if(this.mapping.all_day&&evt[this.mapping.all_day]){date_stop.add(1,'days');}
var r={'record':evt,'start':date_start,'end':date_stop,'r_start':date_start,'r_end':date_stop,'title':the_title,'allDay':all_day,'id':evt.id,'attendees':attendees,};if(this.mapping.all_day&&evt[this.mapping.all_day]){}else if(this.data.scale==='month'&&this.fields[this.mapping.date_start].type!=='date'){date_stop.add(1,'days');r.reset_allday=r.allDay;r.allDay=true;r.start=date_start.format('YYYY-MM-DD');r.end=date_stop.startOf('day').format('YYYY-MM-DD');}
return r;},});});;

/* /web/static/src/js/views/calendar/calendar_popover.js defined in bundle 'web.assets_backend' */
odoo.define('web.CalendarPopover',function(require){"use strict";var fieldRegistry=require('web.field_registry');var StandaloneFieldManagerMixin=require('web.StandaloneFieldManagerMixin');var Widget=require('web.Widget');var CalendarPopover=Widget.extend(StandaloneFieldManagerMixin,{template:'CalendarView.event.popover',events:{'click .o_cw_popover_edit':'_onClickPopoverEdit','click .o_cw_popover_delete':'_onClickPopoverDelete',},init:function(parent,eventInfo){this._super.apply(this,arguments);StandaloneFieldManagerMixin.init.call(this);this.hideDate=eventInfo.hideDate;this.hideTime=eventInfo.hideTime;this.eventTime=eventInfo.eventTime;this.eventDate=eventInfo.eventDate;this.displayFields=eventInfo.displayFields;this.fields=eventInfo.fields;this.event=eventInfo.event;this.modelName=eventInfo.modelName;},willStart:function(){return Promise.all([this._super.apply(this,arguments),this._processFields()]);},start:function(){var self=this;_.each(this.$fieldsList,function($field){$field.appendTo(self.$('.o_cw_popover_fields_secondary'));});return this._super.apply(this,arguments);},_processFields:function(){var self=this;var fieldsToGenerate=[];_.each(this.displayFields,function(displayFieldInfo,fieldName){var fieldInfo=self.fields[fieldName];var field={name:fieldName,string:displayFieldInfo.attrs.string||fieldInfo.string,value:self.event.record[fieldName],type:fieldInfo.type,};if(field.type==='selection'){field.selection=fieldInfo.selection;}
if(fieldInfo.relation){field.relation=fieldInfo.relation;}
if(displayFieldInfo.attrs.widget){field.widget=displayFieldInfo.attrs.widget;}else if(_.contains(['many2many','one2many'],field.type)){field.widget='many2many_tags';}
if(_.contains(['many2many','one2many'],field.type)){field.fields=[{name:'id',type:'integer',},{name:'display_name',type:'char',}];}
fieldsToGenerate.push(field);});this.$fieldsList=[];return this.model.makeRecord(this.modelName,fieldsToGenerate).then(function(recordID){var defs=[];var record=self.model.get(recordID);_.each(fieldsToGenerate,function(field){var FieldClass=fieldRegistry.getAny([field.widget,field.type]);var fieldWidget=new FieldClass(self,field.name,record,self.displayFields[field.name]);self._registerWidget(recordID,field.name,fieldWidget);var $field=$('<li>',{class:'list-group-item flex-shrink-0 d-flex flex-wrap'});var $fieldLabel=$('<strong>',{class:'mr-2',text:_.str.sprintf('%s : ',field.string)});$fieldLabel.appendTo($field);var $fieldContainer=$('<div>',{class:'flex-grow-1'});$fieldContainer.appendTo($field);defs.push(fieldWidget.appendTo($fieldContainer).then(function(){self.$fieldsList.push($field);}));});return Promise.all(defs);});},_onClickPopoverEdit:function(ev){ev.preventDefault();this.trigger_up('edit_event',{id:this.event.id,title:this.event.record.display_name,});},_onClickPopoverDelete:function(ev){ev.preventDefault();this.trigger_up('delete_event',{id:this.event.id});},});return CalendarPopover;});;

/* /web/static/src/js/views/calendar/calendar_quick_create.js defined in bundle 'web.assets_backend' */
odoo.define('web.CalendarQuickCreate',function(require){"use strict";var core=require('web.core');var Dialog=require('web.Dialog');var _t=core._t;var QWeb=core.qweb;var QuickCreate=Dialog.extend({events:_.extend({},Dialog.events,{'keyup input':'_onkeyup',}),init:function(parent,buttons,options,dataTemplate,dataCalendar){this._buttons=buttons||false;this.options=options;this.dataTemplate=dataTemplate||{};this.dataCalendar=dataCalendar;var self=this;this._super(parent,{title:options.title,size:'small',buttons:this._buttons?[{text:_t("Create"),classes:'btn-primary',click:function(){if(!self._quickAdd(dataCalendar)){self.focus();}}},{text:_t("Edit"),click:function(){dataCalendar.disableQuickCreate=true;dataCalendar.title=self.$('input').val().trim();dataCalendar.on_save=self.destroy.bind(self);self.trigger_up('openCreate',dataCalendar);}},{text:_t("Cancel"),close:true},]:[],$content:QWeb.render('CalendarView.quick_create',{widget:this})});},focus:function(){this.$('input').focus();},_quickAdd:function(dataCalendar){dataCalendar=$.extend({},this.dataTemplate,dataCalendar);var val=this.$('input').val().trim();if(!val){this.$('label, input').addClass('o_field_invalid');var warnings=_.str.sprintf('<ul><li>%s</li></ul>',_t("Summary"));this.do_warn(_t("The following field is invalid:"),warnings);}
dataCalendar.title=val;return(val)?this.trigger_up('quickCreate',{data:dataCalendar,options:this.options}):false;},_onkeyup:function(event){if(this._flagEnter){return;}
if(event.keyCode===$.ui.keyCode.ENTER){this._flagEnter=true;if(!this._quickAdd(this.dataCalendar)){this._flagEnter=false;}}else if(event.keyCode===$.ui.keyCode.ESCAPE&&this._buttons){this.close();}},});return QuickCreate;});;

/* /web/static/src/js/views/calendar/calendar_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web.CalendarRenderer',function(require){"use strict";var AbstractRenderer=require('web.AbstractRenderer');var CalendarPopover=require('web.CalendarPopover');var config=require('web.config');var core=require('web.core');var Dialog=require('web.Dialog');var field_utils=require('web.field_utils');var FieldManagerMixin=require('web.FieldManagerMixin');var relational_fields=require('web.relational_fields');var session=require('web.session');var Widget=require('web.Widget');var _t=core._t;var qweb=core.qweb;var scales={day:'agendaDay',week:'agendaWeek',month:'month'};var SidebarFilterM2O=relational_fields.FieldMany2One.extend({_getSearchBlacklist:function(){return this._super.apply(this,arguments).concat(this.filter_ids||[]);},});var SidebarFilter=Widget.extend(FieldManagerMixin,{template:'CalendarView.sidebar.filter',custom_events:_.extend({},FieldManagerMixin.custom_events,{field_changed:'_onFieldChanged',}),init:function(parent,options){this._super.apply(this,arguments);FieldManagerMixin.init.call(this);this.title=options.title;this.fields=options.fields;this.fieldName=options.fieldName;this.write_model=options.write_model;this.write_field=options.write_field;this.avatar_field=options.avatar_field;this.avatar_model=options.avatar_model;this.filters=options.filters;this.label=options.label;this.getColor=options.getColor;this.isSwipeEnabled=true;},willStart:function(){var self=this;var defs=[this._super.apply(this,arguments)];if(this.write_model||this.write_field){var def=this.model.makeRecord(this.write_model,[{name:this.write_field,relation:this.fields[this.fieldName].relation,type:'many2one',}]).then(function(recordID){self.many2one=new SidebarFilterM2O(self,self.write_field,self.model.get(recordID),{mode:'edit',attrs:{placeholder:"+ "+_.str.sprintf(_t("Add %s"),self.title),can_create:false},});});defs.push(def);}
return Promise.all(defs);},start:function(){this._super();if(this.many2one){this.many2one.appendTo(this.$el);this.many2one.filter_ids=_.without(_.pluck(this.filters,'value'),'all');}
this.$el.on('click','.o_remove',this._onFilterRemove.bind(this));this.$el.on('click','.o_calendar_filter_items input',this._onFilterActive.bind(this));},_onFieldChanged:function(event){var self=this;event.stopPropagation();var createValues={'user_id':session.uid};var value=event.data.changes[this.write_field].id;createValues[this.write_field]=value;this._rpc({model:this.write_model,method:'create',args:[createValues],}).then(function(){self.trigger_up('changeFilter',{'fieldName':self.fieldName,'value':value,'active':true,});});},_onFilterActive:function(e){var $input=$(e.currentTarget);this.trigger_up('changeFilter',{'fieldName':this.fieldName,'value':$input.closest('.o_calendar_filter_item').data('value'),'active':$input.prop('checked'),});},_onFilterRemove:function(e){var self=this;var $filter=$(e.currentTarget).closest('.o_calendar_filter_item');Dialog.confirm(this,_t("Do you really want to delete this filter from favorites ?"),{confirm_callback:function(){self._rpc({model:self.write_model,method:'unlink',args:[[$filter.data('id')]],}).then(function(){self.trigger_up('changeFilter',{'fieldName':self.fieldName,'id':$filter.data('id'),'active':false,'value':$filter.data('value'),});});},});},});return AbstractRenderer.extend({template:"CalendarView",config:{CalendarPopover:CalendarPopover,},custom_events:_.extend({},AbstractRenderer.prototype.custom_events||{},{edit_event:'_onEditEvent',delete_event:'_onDeleteEvent',}),init:function(parent,state,params){this._super.apply(this,arguments);this.displayFields=params.displayFields;this.model=params.model;this.filters=[];this.color_map={};this.hideDate=params.hideDate;this.hideTime=params.hideTime;},start:function(){this._initSidebar();this._initCalendar();if(config.device.isMobile){this._bindSwipe();}
return this._super();},on_attach_callback:function(){if(config.device.isMobile){this.$el.height($(window).height()-this.$el.offset().top);}
var scrollTop=this.$calendar.find('.fc-scroller').scrollTop();if(scrollTop){this.$calendar.fullCalendar('reinitView');}else{this.$calendar.fullCalendar('render');}},destroy:function(){if(this.$calendar){this.$calendar.fullCalendar('destroy');}
if(this.$small_calendar){this.$small_calendar.datepicker('destroy');$('#ui-datepicker-div:empty').remove();}
this._super.apply(this,arguments);},getAvatars:function(record,fieldName,imageField){var field=this.state.fields[fieldName];if(!record[fieldName]){return[];}
if(field.type==='one2many'||field.type==='many2many'){return _.map(record[fieldName],function(id){return'<img src="/web/image/'+field.relation+'/'+id+'/'+imageField+'" />';});}else if(field.type==='many2one'){return['<img src="/web/image/'+field.relation+'/'+record[fieldName][0]+'/'+imageField+'" />'];}else{var value=this._format(record,fieldName);var color=this.getColor(value);if(isNaN(color)){return['<span class="o_avatar_square" style="background-color:'+color+';"/>'];}
else{return['<span class="o_avatar_square o_calendar_color_'+color+'"/>'];}}},getColor:function(key){if(!key){return;}
if(this.color_map[key]){return this.color_map[key];}
if(typeof key==='string'&&key.match(/^((#[A-F0-9]{3})|(#[A-F0-9]{6})|((hsl|rgb)a?\(\s*(?:(\s*\d{1,3}%?\s*),?){3}(\s*,[0-9.]{1,4})?\))|)$/i)){return this.color_map[key]=key;}
var index=(((_.keys(this.color_map).length+1)*5)%24)+1;this.color_map[key]=index;return index;},getLocalState:function(){var $fcScroller=this.$calendar.find('.fc-scroller');return{scrollPosition:$fcScroller.scrollTop(),};},setLocalState:function(localState){if(localState.scrollPosition){var $fcScroller=this.$calendar.find('.fc-scroller');$fcScroller.scrollTop(localState.scrollPosition);}},_bindSwipe:function(){var self=this;var touchStartX;var touchEndX;this.$calendar.on('touchstart',function(event){touchStartX=event.originalEvent.touches[0].pageX;});this.$calendar.on('touchend',function(event){touchEndX=event.originalEvent.changedTouches[0].pageX;if(!self.isSwipeEnabled){return;}
if(touchStartX-touchEndX>100){self.trigger_up('next');}else if(touchStartX-touchEndX<-100){self.trigger_up('prev');}});},_eventRender:function(event){var qweb_context={event:event,record:event.record,color:this.getColor(event.color_index),};this.qweb_context=qweb_context;if(_.isEmpty(qweb_context.record)){return'';}else{return qweb.render("calendar-box",qweb_context);}},_format:function(record,fieldName){var field=this.state.fields[fieldName];if(field.type==="one2many"||field.type==="many2many"){return field_utils.format[field.type]({data:record[fieldName]},field);}else{return field_utils.format[field.type](record[fieldName],field,{forceString:true});}},_initCalendar:function(){var self=this;this.$calendar=this.$(".o_calendar_widget");var locale=moment.locale();$.fullCalendar.locale(locale);var fc_options=$.extend({},this.state.fc_options,{eventDrop:function(event){self.trigger_up('dropRecord',event);},eventResize:function(event){self._unselectEvent();self.trigger_up('updateRecord',event);},eventClick:function(eventData,ev){self._unselectEvent();self.$calendar.find(_.str.sprintf('[data-event-id=%s]',eventData.id)).addClass('o_cw_custom_highlight');self._renderEventPopover(eventData,$(ev.currentTarget));},select:function(startDate,endDate){self.isSwipeEnabled=false;if(self.$('.o_cw_popover').length){self._unselectEvent();}else{var data={start:startDate,end:endDate};if(self.state.context.default_name){data.title=self.state.context.default_name;}
self.trigger_up('openCreate',data);}
self.$calendar.fullCalendar('unselect');},eventRender:function(event,element,view){self.isSwipeEnabled=false;var $render=$(self._eventRender(event));element.find('.fc-content').html($render.html());element.addClass($render.attr('class'));element.attr('data-event-id',event.id);if(!element.find('.fc-bg').length){element.find('.fc-content').after($('<div/>',{class:'fc-bg'}));}
if(view.name==='month'&&event.record){var start=event.r_start||event.start;var end=event.r_end||event.end;var isSameDayEvent=start.clone().add(1,'minute').isSame(end.clone().subtract(1,'minute'),'day');if(!event.record.allday&&isSameDayEvent){element.addClass('o_cw_nobg');}}
element.on('dblclick',function(){self.trigger_up('edit_event',{id:event.id});});},eventAfterAllRender:function(){self.isSwipeEnabled=true;},viewRender:function(view){var mode=view.name==='month'?'month':(view.name==='agendaWeek'?'week':'day');self.trigger_up('viewUpdated',{mode:mode,title:view.title,});},eventMouseover:function(eventData){self.$calendar.find(_.str.sprintf('[data-event-id=%s]',eventData.id)).addClass('o_cw_custom_hover');},eventMouseout:function(eventData){self.$calendar.find(_.str.sprintf('[data-event-id=%s]',eventData.id)).removeClass('o_cw_custom_hover');},eventDragStart:function(){self._unselectEvent();},eventResizeStart:function(){self._unselectEvent();},eventLimitClick:function(){self._unselectEvent();return'popover';},windowResize:function(){self._render();},views:{day:{columnFormat:'LL'},week:{columnFormat:'ddd D'},month:{columnFormat:config.device.isMobile?'ddd':'dddd'}},height:'parent',unselectAuto:false,isRTL:_t.database.parameters.direction==="rtl",locale:locale,});this.$calendar.fullCalendar(fc_options);},_initCalendarMini:function(){var self=this;this.$small_calendar=this.$(".o_calendar_mini");this.$small_calendar.datepicker({'onSelect':function(datum,obj){self.trigger_up('changeDate',{date:moment(new Date(+obj.currentYear,+obj.currentMonth,+obj.currentDay))});},'showOtherMonths':true,'dayNamesMin':this.state.fc_options.dayNamesShort,'monthNames':this.state.fc_options.monthNamesShort,'firstDay':this.state.fc_options.firstDay,});},_initSidebar:function(){this.$sidebar=this.$('.o_calendar_sidebar');this.$sidebar_container=this.$(".o_calendar_sidebar_container");this._initCalendarMini();},_onPopoverShown:function($popoverElement,calendarPopover){var $popover=$($popoverElement.data('bs.popover').tip);$popover.find('.o_cw_popover_close').on('click',this._unselectEvent.bind(this));$popover.find('.o_cw_body').replaceWith(calendarPopover.$el);},_render:function(){var $calendar=this.$calendar;var $fc_view=$calendar.find('.fc-view');var scrollPosition=$fc_view.scrollLeft();$fc_view.scrollLeft(0);$calendar.fullCalendar('unselect');if(scales[this.state.scale]!==$calendar.data('fullCalendar').getView().type){$calendar.fullCalendar('changeView',scales[this.state.scale]);}
if(this.target_date!==this.state.target_date.toString()){$calendar.fullCalendar('gotoDate',moment(this.state.target_date));this.target_date=this.state.target_date.toString();}
this.$small_calendar.datepicker("setDate",this.state.highlight_date.toDate()).find('.o_selected_range').removeClass('o_color o_selected_range');var $a;switch(this.state.scale){case'month':$a=this.$small_calendar.find('td');break;case'week':$a=this.$small_calendar.find('tr:has(.ui-state-active)');break;case'day':$a=this.$small_calendar.find('a.ui-state-active');break;}
$a.addClass('o_selected_range');setTimeout(function(){$a.not('.ui-state-active').addClass('o_color');});$fc_view.scrollLeft(scrollPosition);this._unselectEvent();var filterProm=this._renderFilters();this._renderEvents();this.$calendar.prependTo(this.$('.o_calendar_view'));return Promise.all([filterProm,this._super.apply(this,arguments)]);},_renderEvents:function(){this.$calendar.fullCalendar('removeEvents');this.$calendar.fullCalendar('addEventSource',this.state.data);},_renderFilters:function(){this.$('.o_calendar_filter_item').popover('dispose');_.each(this.filters||(this.filters=[]),function(filter){filter.destroy();});if(this.state.fullWidth){return;}
return this._renderFiltersOneByOne();},_renderFiltersOneByOne:function(filterIndex){filterIndex=filterIndex||0;var arrFilters=_.toArray(this.state.filters);var prom;if(filterIndex<arrFilters.length){var options=arrFilters[filterIndex];if(!_.find(options.filters,function(f){return f.display==null||f.display;})){return;}
var self=this;options.getColor=this.getColor.bind(this);options.fields=this.state.fields;var filter=new SidebarFilter(self,options);prom=filter.appendTo(this.$sidebar).then(function(){if(options.avatar_field){_.each(options.filters,function(filter){if(filter.value!=='all'){var selector=_.str.sprintf('.o_calendar_filter_item[data-value=%s]',filter.value);self.$sidebar.find(selector).popover({animation:false,trigger:'hover',html:true,placement:'top',title:filter.label,delay:{show:300,hide:0},content:function(){return $('<img>',{src:_.str.sprintf('/web/image/%s/%s/%s',options.avatar_model,filter.value,options.avatar_field),class:'mx-auto',});},});}});}
return self._renderFiltersOneByOne(filterIndex+1);});this.filters.push(filter);}
return Promise.resolve(prom);},_getPopoverContext:function(eventData){var context={hideDate:this.hideDate,hideTime:this.hideTime,eventTime:{},eventDate:{},fields:this.state.fields,displayFields:this.displayFields,event:eventData,modelName:this.model,};var start=moment(eventData.r_start||eventData.start);var end=moment(eventData.r_end||eventData.end);var isSameDayEvent=start.clone().add(1,'minute').isSame(end.clone().subtract(1,'minute'),'day');if(!this.hideTime&&!eventData.record.allday&&isSameDayEvent){var dbTimeFormat=_t.database.parameters.time_format.search('%H')!=-1?'HH:mm':'hh:mm a';context.eventTime.time=start.clone().format(dbTimeFormat)+' - '+end.clone().format(dbTimeFormat);var durationHours=moment.duration(end.diff(start)).hours();var durationHoursKey=(durationHours===1)?'h':'hh';var durationMinutes=moment.duration(end.diff(start)).minutes();var durationMinutesKey=(durationMinutes===1)?'m':'mm';var localeData=moment.localeData();context.eventTime.duration=(durationHours>0?localeData.relativeTime(durationHours,true,durationHoursKey):'')
+(durationHours>0&&durationMinutes>0?', ':'')
+(durationMinutes>0?localeData.relativeTime(durationMinutes,true,durationMinutesKey):'');}
if(!this.hideDate){if(!isSameDayEvent&&start.isSame(end,'month')){context.eventDate.date=start.clone().format('MMMM D')+'-'+end.clone().format('D, YYYY');}else{context.eventDate.date=isSameDayEvent?start.clone().format('dddd, LL'):start.clone().format('LL')+' - '+end.clone().format('LL');}
if(eventData.record.allday&&isSameDayEvent){context.eventDate.duration=_t("All day");}else if(eventData.record.allday&&!isSameDayEvent){var daysLocaleData=moment.localeData();var days=moment.duration(end.diff(start)).days();context.eventDate.duration=daysLocaleData.relativeTime(days,true,'dd');}}
return context;},_getPopoverParams:function(eventData){return{animation:false,delay:{show:50,hide:100},trigger:'manual',html:true,title:eventData.record.display_name,template:qweb.render('CalendarView.event.popover.placeholder',{color:this.getColor(eventData.color_index)}),container:eventData.allDay?'.fc-view':'.fc-scroller',}},_renderEventPopover:function(eventData,$eventElement){var self=this;var calendarPopover=new self.config.CalendarPopover(self,self._getPopoverContext(eventData));calendarPopover.appendTo($('<div>')).then(()=>{$eventElement.popover(self._getPopoverParams(eventData)).on('shown.bs.popover',function(){self._onPopoverShown($(this),calendarPopover);}).popover('show');});},_unselectEvent:function(){this.$('.fc-event').removeClass('o_cw_custom_highlight');this.$('.o_cw_popover').popover('dispose');},_onEditEvent:function(event){this._unselectEvent();this.trigger_up('openEvent',{_id:event.data.id,title:event.data.title,});},_onDeleteEvent:function(event){this._unselectEvent();this.trigger_up('deleteRecord',{id:event.data.id});},});});;

/* /web/static/src/js/views/calendar/calendar_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.CalendarView',function(require){"use strict";var AbstractView=require('web.AbstractView');var CalendarModel=require('web.CalendarModel');var CalendarController=require('web.CalendarController');var CalendarRenderer=require('web.CalendarRenderer');var core=require('web.core');var pyUtils=require('web.py_utils');var utils=require('web.utils');var _lt=core._lt;var fieldsToGather=["date_start","date_delay","date_stop","all_day",];var CalendarView=AbstractView.extend({display_name:_lt('Calendar'),icon:'fa-calendar',jsLibs:['/web/static/lib/fullcalendar/js/fullcalendar.js'],cssLibs:['/web/static/lib/fullcalendar/css/fullcalendar.css'],config:_.extend({},AbstractView.prototype.config,{Model:CalendarModel,Controller:CalendarController,Renderer:CalendarRenderer,}),viewType:'calendar',searchMenuTypes:['filter','favorite'],init:function(viewInfo,params){this._super.apply(this,arguments);var arch=this.arch;var fields=this.fields;var attrs=arch.attrs;if(!attrs.date_start){throw new Error(_lt("Calendar view has not defined 'date_start' attribute."));}
var mapping={};var fieldNames=fields.display_name?['display_name']:[];var displayFields={};_.each(fieldsToGather,function(field){if(arch.attrs[field]){var fieldName=attrs[field];mapping[field]=fieldName;fieldNames.push(fieldName);}});var filters={};var eventLimit=attrs.event_limit!==null&&(isNaN(+attrs.event_limit)?_.str.toBool(attrs.event_limit):+attrs.event_limit);var modelFilters=[];_.each(arch.children,function(child){if(child.tag!=='field')return;var fieldName=child.attrs.name;fieldNames.push(fieldName);if(!child.attrs.invisible){child.attrs.options=child.attrs.options?pyUtils.py_eval(child.attrs.options):{};displayFields[fieldName]={attrs:child.attrs};if(params.sidebar===false)return;if(child.attrs.avatar_field){filters[fieldName]=filters[fieldName]||{'title':fields[fieldName].string,'fieldName':fieldName,'filters':[],};filters[fieldName].avatar_field=child.attrs.avatar_field;filters[fieldName].avatar_model=fields[fieldName].relation;}
if(child.attrs.write_model){filters[fieldName]=filters[fieldName]||{'title':fields[fieldName].string,'fieldName':fieldName,'filters':[],};filters[fieldName].write_model=child.attrs.write_model;filters[fieldName].write_field=child.attrs.write_field;modelFilters.push(fields[fieldName].relation);}}});if(attrs.color){var fieldName=attrs.color;fieldNames.push(fieldName);filters[fieldName]={'title':fields[fieldName].string,'fieldName':fieldName,'filters':[],};if(fields[fieldName].relation){if(['res.users','res.partner','hr.employee'].indexOf(fields[fieldName].relation)!==-1){filters[fieldName].avatar_field='image_128';}
filters[fieldName].avatar_model=fields[fieldName].relation;}}
this.controllerParams.quickAddPop=(!('quick_add'in attrs)||utils.toBoolElse(attrs.quick_add+'',true));this.controllerParams.disableQuickCreate=params.disable_quick_create||!this.controllerParams.quickAddPop;this.controllerParams.formViewId=attrs.form_view_id?parseInt(attrs.form_view_id,10):false;if(!this.controllerParams.formViewId&&params.action){var formViewDescr=_.find(params.action.views,function(v){return v.type==='form';});if(formViewDescr){this.controllerParams.formViewId=formViewDescr.viewID;}}
this.controllerParams.eventOpenPopup=utils.toBoolElse(attrs.event_open_popup||'',false);this.controllerParams.mapping=mapping;this.controllerParams.context=params.context||{};this.controllerParams.displayName=params.action&&params.action.name;this.rendererParams.displayFields=displayFields;this.rendererParams.model=viewInfo.model;this.rendererParams.hideDate=utils.toBoolElse(attrs.hide_date||'',false);this.rendererParams.hideTime=utils.toBoolElse(attrs.hide_time||'',false);this.loadParams.fieldNames=_.uniq(fieldNames);this.loadParams.mapping=mapping;this.loadParams.fields=fields;this.loadParams.fieldsInfo=viewInfo.fieldsInfo;this.loadParams.editable=!fields[mapping.date_start].readonly;this.loadParams.creatable=true;this.loadParams.eventLimit=eventLimit;this.loadParams.fieldColor=attrs.color;this.loadParams.filters=filters;this.loadParams.mode=(params.context&&params.context.default_mode)||attrs.mode;this.loadParams.initialDate=moment(params.initialDate||new Date());},});return CalendarView;});;

/* /web/static/src/js/views/qweb/qweb_view.js defined in bundle 'web.assets_backend' */
odoo.define('web.qweb',function(require){"use strict";var core=require('web.core');var AbstractView=require('web.AbstractView');var AbstractModel=require('web.AbstractModel');var AbstractRenderer=require('web.AbstractRenderer');var AbstractController=require('web.AbstractController');var registry=require('web.view_registry');var _lt=core._lt;var Model=AbstractModel.extend({init:function(){this._super.apply(this,arguments);this._state={viewId:false,modelName:false,body:'',context:{},domain:[],};},_fetch:function(){var state=this._state;return this._rpc({model:state.modelName,method:'qweb_render_view',kwargs:{view_id:state.viewId,domain:state.domain,context:state.context}}).then(function(r){state.body=r;return state.viewId;});},get:function(){return this._state;},load:function(params){_.extend(this._state,_.pick(params,['viewId','modelName','domain','context']));return this._fetch();},reload:function(_id,params){_.extend(this._state,_.pick(params,['domain','context']));return this._fetch();}});var Renderer=AbstractRenderer.extend({_render:function(){var self=this;return this._super.apply(this,arguments).then(function(){self.$el.html(self.state.body);});}});var Controller=AbstractController.extend({events:_.extend({},AbstractController.prototype.events,{'click [type="toggle"]':'_onLazyToggle',}),init:function(){this._super.apply(this,arguments);this._$buttons=$('<nav>').on('click','[type="action"]',this.proxy('_onActionClicked'));},renderButtons:function($node){this._super($node);$node.append(this._$buttons);},_update:function(){var self=this;return this._super.apply(this,arguments).then(function(){var $cp_buttons=self.renderer.$('nav.o_qweb_cp_buttons');$cp_buttons.children().appendTo(self._$buttons.empty());$cp_buttons.remove();});},_onLazyToggle:function(e){var $target=$(e.target);var $t=$target.closest('[data-model]');if(!($target.hasClass('fa-caret-down')||$target.hasClass('fa-caret-right'))){$target=$t.find('.fa-caret-down, .fa-caret-right');}
var data=$t.data();if(this._fold($t)){$target.removeClass('fa-caret-down').addClass('fa-caret-right');return;}
var args=data.args||_.omit(data,'model','method','id');return this._rpc({model:data.model,method:data.method,args:data.id?[data.id]:undefined,kwargs:args}).then(function(s){return $(s);}).then(function($newcontent){$t.data('children',$newcontent).after($newcontent);$target.removeClass('fa-caret-right').addClass('fa-caret-down');});},_fold:function($el){var $children=$el.data('children');if(!$children){return false;}
var self=this;$children.each(function(_i,e){self._fold($(e));}).remove();$el.removeData('children');return true;}});var QWebView=AbstractView.extend({display_name:_lt('Freedom View'),icon:'fa-file-picture-o',viewType:'qweb',enableTimeRangeMenu:true,config:_.extend({},AbstractView.prototype.config,{Model:Model,Renderer:Renderer,Controller:Controller,}),init:function(viewInfo,params){this._super.apply(this,arguments);this.loadParams.viewId=viewInfo.view_id;}});registry.add('qweb',QWebView);return{View:QWebView,Controller:Controller,Renderer:Renderer,Model:Model};});;

/* /web/static/src/js/widgets/attach_document.js defined in bundle 'web.assets_backend' */
odoo.define('web.AttachDocument',function(require){"use static";var core=require('web.core');var framework=require('web.framework');var widgetRegistry=require('web.widget_registry');var Widget=require('web.Widget');var _t=core._t;var AttachDocument=Widget.extend({template:'AttachDocument',events:{'click':'_onClickAttachDocument','change input.o_input_file':'_onFileChanged',},init:function(parent,record,nodeInfo){this._super.apply(this,arguments);this.res_id=record.res_id;this.res_model=record.model;this.state=record;this.node=nodeInfo;this.fileuploadID=_.uniqueId('o_fileupload');},start:function(){$(window).on(this.fileuploadID,this._onFileLoaded.bind(this));return this._super.apply(this,arguments);},destroy:function(){$(window).off(this.fileuploadID);this._super.apply(this,arguments);},_notifyInvalidFields:function(invalidFields){var fields=this.state.fields;var warnings=invalidFields.map(function(fieldName){var fieldStr=fields[fieldName].string;return _.str.sprintf('<li>%s</li>',_.escape(fieldStr));});warnings.unshift('<ul>');warnings.push('</ul>');this.do_warn(_t("The following fields are invalid:"),warnings.join(''));},_onClickAttachDocument:function(ev){if($(ev.target).is('input.o_input_file')){return;}
var fieldNames=this.getParent().canBeSaved(this.state.id);if(fieldNames.length){return this._notifyInvalidFields(fieldNames);}
if(!this.res_id){return this.do_warn(_t('Warning : You have to save first before attaching a file.'));}
this.$('input.o_input_file').trigger('click');},_onFileChanged:function(ev){ev.stopPropagation();this.$('form.o_form_binary_form').trigger('submit');framework.blockUI();},_onFileLoaded:function(){var self=this;var files=Array.prototype.slice.call(arguments,1);return new Promise(function(resolve){if(self.node.attrs.action){self._rpc({model:self.res_model,method:self.node.attrs.action,args:[self.res_id],kwargs:{attachment_ids:_.map(files,function(file){return file.id;}),}}).then(function(){resolve();});}else{resolve();}}).then(function(){self.trigger_up('reload');framework.unblockUI();});},});widgetRegistry.add('attach_document',AttachDocument);});;

/* /web/static/src/js/fields/signature.js defined in bundle 'web.assets_backend' */
odoo.define('web.Signature',function(require){"use strict";var AbstractFieldBinary=require('web.basic_fields').AbstractFieldBinary;var core=require('web.core');var Dialog=require('web.Dialog');var field_utils=require('web.field_utils');var NameAndSignature=require('web.name_and_signature').NameAndSignature;var registry=require('web.field_registry');var session=require('web.session');var utils=require('web.utils');var qweb=core.qweb;var _t=core._t;var _lt=core._lt;var SignatureDialog=Dialog.extend({template:'web.signature_dialog',xmlDependencies:Dialog.prototype.xmlDependencies.concat(['/web/static/src/xml/name_and_signature.xml']),custom_events:{'signature_changed':'_onChangeSignature',},init:function(parent,options){var self=this;options=options||{};options.title=options.title||_t("Adopt Your Signature");options.size=options.size||'medium';options.technical=false;if(!options.buttons){options.buttons=[];options.buttons.push({text:_t("Adopt and Sign"),classes:"btn-primary",disabled:true,click:function(e){self._onConfirm();}});options.buttons.push({text:_t("Cancel"),close:true});}
this._super(parent,options);this.nameAndSignature=new NameAndSignature(this,options.nameAndSignatureOptions);},willStart:function(){return Promise.all([this.nameAndSignature.appendTo($('<div>')),this._super.apply(this,arguments)]);},start:function(){var self=this;this.$primaryButton=this.$footer.find('.btn-primary');this.opened().then(function(){self.$('.o_web_sign_name_and_signature').replaceWith(self.nameAndSignature.$el);self.nameAndSignature.resetSignature();});return this._super.apply(this,arguments);},isSignatureEmpty:function(){return this.nameAndSignature.isSignatureEmpty();},_onChangeSignature:function(){var isEmpty=this.nameAndSignature.isSignatureEmpty();this.$primaryButton.prop('disabled',isEmpty);},_onConfirm:function(fct){this.trigger_up('upload_signature',{name:this.nameAndSignature.getName(),signatureImage:this.nameAndSignature.getSignatureImage(),});},});var FieldBinarySignature=AbstractFieldBinary.extend({description:_lt("Signature"),fieldDependencies:_.extend({},AbstractFieldBinary.prototype.fieldDependencies,{__last_update:{type:'datetime'},}),resetOnAnyFieldChange:true,custom_events:_.extend({},AbstractFieldBinary.prototype.custom_events,{upload_signature:'_onUploadSignature',}),events:_.extend({},AbstractFieldBinary.prototype.events,{'click .o_signature':'_onClickSignature',}),template:null,supportedFieldTypes:['binary'],file_type_magic_word:{'/':'jpg','R':'gif','i':'png','P':'svg+xml',},isSet:function(){if(this.mode==='edit'){return this.value;}
return true;},_render:function(){var self=this;var displaySignatureRatio=3;var url;var $img;var width=this.nodeOptions.size?this.nodeOptions.size[0]:this.attrs.width;var height=this.nodeOptions.size?this.nodeOptions.size[1]:this.attrs.height;if(this.value){if(!utils.is_bin_size(this.value)){url='data:image/'+(this.file_type_magic_word[this.value[0]]||'png')+';base64,'+this.value;}else{url=session.url('/web/image',{model:this.model,id:JSON.stringify(this.res_id),field:this.nodeOptions.preview_image||this.name,unique:field_utils.format.datetime(this.recordData.__last_update).replace(/[^0-9]/g,''),});}
$img=$(qweb.render("FieldBinarySignature-img",{widget:this,url:url}));}else{$img=$('<div class="o_signature o_signature_empty"><svg></svg><p>'+_t('SIGNATURE')+'</p></div>');if(width&&height){width=Math.min(width,displaySignatureRatio*height);height=width/displaySignatureRatio;}else if(width){height=width/displaySignatureRatio;}else if(height){width=height*displaySignatureRatio;}}
if(width){$img.attr('width',width);$img.css('max-width',width+'px');}
if(height){$img.attr('height',height);$img.css('max-height',height+'px');}
this.$('> div').remove();this.$('> img').remove();this.$el.prepend($img);$img.on('error',function(){self._clearFile();$img.attr('src',self.placeholder);self.do_warn(_t("Image"),_t("Could not display the selected image."));});},_onClickSignature:function(){var self=this;if(this.mode==='edit'){var nameAndSignatureOptions={mode:'draw',displaySignatureRatio:3,signatureType:'signature',noInputName:true,};if(this.nodeOptions.full_name){var signName;if(this.fields[this.nodeOptions.full_name].type==='many2one'){signName=this.recordData[this.nodeOptions.full_name]&&this.recordData[this.nodeOptions.full_name].data.display_name;}else{signName=this.recordData[this.nodeOptions.full_name];}
nameAndSignatureOptions.defaultName=(signName==='')?undefined:signName;}
nameAndSignatureOptions.defaultFont=this.nodeOptions.default_font||'';this.signDialog=new SignatureDialog(self,{nameAndSignatureOptions:nameAndSignatureOptions});this.signDialog.open();}},_onUploadSignature:function(ev){var signatureImage=ev.data.signatureImage;if(signatureImage!==this.signDialog.emptySignature){var data=signatureImage[1];var type=signatureImage[0].split('/')[1];this.on_file_uploaded(data.length,ev.data.name,type,data);}
this.signDialog.close();}});registry.add('signature',FieldBinarySignature);});;

/* /web/static/src/js/report/utils.js defined in bundle 'web.assets_backend' */
odoo.define('report.utils',function(require){'use strict';function get_protocol_from_url(url){var a=document.createElement('a');a.href=url;return a.protocol;}
function get_host_from_url(url){var a=document.createElement('a');a.href=url;return a.host;}
function build_origin(protocol,host){return protocol+'//'+host;}
return{'get_protocol_from_url':get_protocol_from_url,'get_host_from_url':get_host_from_url,'build_origin':build_origin,};});;

/* /web/static/src/js/report/client_action.js defined in bundle 'web.assets_backend' */
odoo.define('report.client_action',function(require){'use strict';var AbstractAction=require('web.AbstractAction');var core=require('web.core');var session=require('web.session');var utils=require('report.utils');var QWeb=core.qweb;var AUTHORIZED_MESSAGES=['report:do_action',];var ReportAction=AbstractAction.extend({hasControlPanel:true,contentTemplate:'report.client_action',init:function(parent,action,options){this._super.apply(this,arguments);options=options||{};this.action_manager=parent;this._title=options.display_name||options.name;this.report_url=options.report_url;this.report_name=options.report_name;this.report_file=options.report_file;this.data=options.data||{};this.context=options.context||{};},start:function(){var self=this;this.iframe=this.$('iframe')[0];return Promise.all([this._super.apply(this,arguments),session.is_bound]).then(function(){var web_base_url=session['web.base.url'];var trusted_host=utils.get_host_from_url(web_base_url);var trusted_protocol=utils.get_protocol_from_url(web_base_url);self.trusted_origin=utils.build_origin(trusted_protocol,trusted_host);self.$buttons=$(QWeb.render('report.client_action.ControlButtons',{}));self.$buttons.on('click','.o_report_print',self.on_click_print);self._update_control_panel();self.iframe.src=self.report_url;});},do_show:function(){this._update_control_panel();return this._super.apply(this,arguments);},on_attach_callback:function(){$(window).on('message',this,this.on_message_received);},on_detach_callback:function(){$(window).off('message',this.on_message_received);},_update_control_panel:function(){this.updateControlPanel({cp_content:{$buttons:this.$buttons,},});},on_message_received:function(ev){var message_origin=utils.build_origin(ev.originalEvent.source.location.protocol,ev.originalEvent.source.location.host);if(message_origin===this.trusted_origin){var message=ev.originalEvent.data;if(_.isObject(message)){message=message.message;}
if(!_.isString(message)||(_.isString(message)&&!_.contains(AUTHORIZED_MESSAGES,message))){return;}
switch(message){case'report:do_action':return this.do_action(ev.originalEvent.data.action);default:}}},_post_message:function(message){this.iframe.contentWindow.postMessage(message,this.trusted_origin);},on_click_print:function(){var action={'type':'ir.actions.report','report_type':'qweb-pdf','report_name':this.report_name,'report_file':this.report_file,'data':this.data,'context':this.context,'display_name':this.title,};return this.do_action(action);},});core.action_registry.add('report.client_action',ReportAction);return ReportAction;});;

/* /base_import/static/lib/javascript-state-machine/state-machine.js defined in bundle 'web.assets_backend' */
(function(window){StateMachine={VERSION:"2.1.0",Result:{SUCCEEDED:1,NOTRANSITION:2,CANCELLED:3,ASYNC:4,},Error:{INVALID_TRANSITION:100,PENDING_TRANSITION:200,INVALID_CALLBACK:300,},WILDCARD:'*',ASYNC:'async',create:function(cfg,target){var initial=(typeof cfg.initial=='string')?{state:cfg.initial}:cfg.initial;var fsm=target||cfg.target||{};var events=cfg.events||[];var callbacks=cfg.callbacks||{};var map={};var add=function(e){var from=(e.from instanceof Array)?e.from:(e.from?[e.from]:[StateMachine.WILDCARD]);map[e.name]=map[e.name]||{};for(var n=0;n<from.length;n++)
map[e.name][from[n]]=e.to||from[n];};if(initial){initial.event=initial.event||'startup';add({name:initial.event,from:'none',to:initial.state});}
for(var n=0;n<events.length;n++)
add(events[n]);for(var name in map){if(map.hasOwnProperty(name))
fsm[name]=StateMachine.buildEvent(name,map[name]);}
for(var name in callbacks){if(callbacks.hasOwnProperty(name))
fsm[name]=callbacks[name]}
fsm.current='none';fsm.is=function(state){return this.current==state;};fsm.can=function(event){return!this.transition&&(map[event].hasOwnProperty(this.current)||map[event].hasOwnProperty(StateMachine.WILDCARD));}
fsm.cannot=function(event){return!this.can(event);};fsm.error=cfg.error||function(name,from,to,args,error,msg){throw msg;};if(initial&&!initial.defer)
fsm[initial.event]();return fsm;},doCallback:function(fsm,func,name,from,to,args){if(func){try{return func.apply(fsm,[name,from,to].concat(args));}
catch(e){return fsm.error(name,from,to,args,StateMachine.Error.INVALID_CALLBACK,"an exception occurred in a caller-provided callback function");}}},beforeEvent:function(fsm,name,from,to,args){return StateMachine.doCallback(fsm,fsm['onbefore'+name],name,from,to,args);},afterEvent:function(fsm,name,from,to,args){return StateMachine.doCallback(fsm,fsm['onafter'+name]||fsm['on'+name],name,from,to,args);},leaveState:function(fsm,name,from,to,args){return StateMachine.doCallback(fsm,fsm['onleave'+from],name,from,to,args);},enterState:function(fsm,name,from,to,args){return StateMachine.doCallback(fsm,fsm['onenter'+to]||fsm['on'+to],name,from,to,args);},changeState:function(fsm,name,from,to,args){return StateMachine.doCallback(fsm,fsm['onchangestate'],name,from,to,args);},buildEvent:function(name,map){return function(){var from=this.current;var to=map[from]||map[StateMachine.WILDCARD]||from;var args=Array.prototype.slice.call(arguments);if(this.transition)
return this.error(name,from,to,args,StateMachine.Error.PENDING_TRANSITION,"event "+name+" inappropriate because previous transition did not complete");if(this.cannot(name))
return this.error(name,from,to,args,StateMachine.Error.INVALID_TRANSITION,"event "+name+" inappropriate in current state "+this.current);if(false===StateMachine.beforeEvent(this,name,from,to,args))
return StateMachine.CANCELLED;if(from===to){StateMachine.afterEvent(this,name,from,to,args);return StateMachine.NOTRANSITION;}
var fsm=this;this.transition=function(){fsm.transition=null;fsm.current=to;StateMachine.enterState(fsm,name,from,to,args);StateMachine.changeState(fsm,name,from,to,args);StateMachine.afterEvent(fsm,name,from,to,args);};var leave=StateMachine.leaveState(this,name,from,to,args);if(false===leave){this.transition=null;return StateMachine.CANCELLED;}
else if("async"===leave){return StateMachine.ASYNC;}
else{if(this.transition)
this.transition();return StateMachine.SUCCEEDED;}};}};if("function"===typeof define){define("statemachine",[],function(){return StateMachine;});}
else{window.StateMachine=StateMachine;}}(this));;

/* /base_import/static/src/js/import_action.js defined in bundle 'web.assets_backend' */
odoo.define('base_import.import',function(require){"use strict";var AbstractAction=require('web.AbstractAction');var config=require('web.config');var core=require('web.core');var session=require('web.session');var time=require('web.time');var AbstractWebClient=require('web.AbstractWebClient');var Loading=require('web.Loading');var QWeb=core.qweb;var _t=core._t;var _lt=core._lt;var StateMachine=window.StateMachine;function jsonp(form,attributes,callback){attributes=attributes||{};var options={jsonp:_.uniqueId('import_callback_')};window[options.jsonp]=function(){delete window[options.jsonp];callback.apply(null,arguments);};if('data'in attributes){_.extend(attributes.data,options);}else{_.extend(attributes,{data:options});}
_.extend(attributes,{dataType:'script',});$(form).ajaxSubmit(attributes);}
function _make_option(term){return{id:term,text:term};}
function _from_data(data,term){return _.findWhere(data,{id:term})||_make_option(term);}
function dataFilteredQuery(q){var suggestions=_.clone(this.data);if(q.term){var exact=_.filter(suggestions,function(s){return s.id===q.term||s.text===q.term;});if(exact.length){suggestions=exact;}else{suggestions=[_make_option(q.term)].concat(_.filter(suggestions,function(s){return s.id.indexOf(q.term)!==-1||s.text.indexOf(q.term)!==-1}));}}
q.callback({results:suggestions});}
var DataImport=AbstractAction.extend({hasControlPanel:true,contentTemplate:'ImportView',opts:[{name:'encoding',label:_lt("Encoding:"),value:''},{name:'separator',label:_lt("Separator:"),value:''},{name:'quoting',label:_lt("Text Delimiter:"),value:'"'}],parse_opts_formats:[{name:'date_format',label:_lt("Date Format:"),value:''},{name:'datetime_format',label:_lt("Datetime Format:"),value:''},],parse_opts_separators:[{name:'float_thousand_separator',label:_lt("Thousands Separator:"),value:','},{name:'float_decimal_separator',label:_lt("Decimal Separator:"),value:'.'}],events:{'change .oe_import_file':'loaded_file','change input.oe_import_has_header, .js_import_options input':'settings_changed','change input.oe_import_advanced_mode':function(e){this.do_not_change_match=true;this['settings_changed']();},'click a.oe_import_toggle':function(e){e.preventDefault();this.$('.oe_import_options').toggle();},'click .oe_import_report a.oe_import_report_count':function(e){e.preventDefault();$(e.target).parent().parent().toggleClass('oe_import_report_showmore');},'click .oe_import_report_see_possible_value':function(e){e.preventDefault();$(e.target).parent().toggleClass('oe_import_report_showmore');},'click .oe_import_moreinfo_action a':function(e){e.preventDefault();var action=JSON.parse($(e.target).attr('data-action'));action.views=_(action.views).map(function(view){var id=view[0],type=view[1];return[id,type!=='tree'?type:action.view_type==='form'?'list':'tree'];});this.do_action(_.extend(action,{target:'new',flags:{search_view:true,display_title:true,pager:true,list:{selectable:false}}}));},},init:function(parent,action){this._super.apply(this,arguments);this.action_manager=parent;this.res_model=action.params.model;this.parent_context=action.params.context||{};this.id=null;this.session=session;this._title=_t('Import a File');this.do_not_change_match=false;},willStart:function(){var self=this;var def=this._rpc({model:this.res_model,method:'get_import_templates',context:this.parent_context,}).then(function(result){self.importTemplates=result;});return Promise.all([this._super.apply(this,arguments),def]);},start:function(){var self=this;this.$form=this.$('form');this.setup_encoding_picker();this.setup_separator_picker();this.setup_float_format_picker();this.setup_date_format_picker();return Promise.all([this._super(),self.create_model().then(function(id){self.id=id;self.$('input[name=import_id]').val(id);self.renderButtons();var status={cp_content:{$buttons:self.$buttons},};self.updateControlPanel(status);}),]);},create_model:function(){return this._rpc({model:'base_import.import',method:'create',args:[{res_model:this.res_model}],kwargs:{context:session.user_context},});},renderButtons:function(){var self=this;this.$buttons=$(QWeb.render("ImportView.buttons",this));this.$buttons.filter('.o_import_validate').on('click',this.validate.bind(this));this.$buttons.filter('.o_import_import').on('click',this.import.bind(this));this.$buttons.filter('.o_import_file_reload').on('click',this.loaded_file.bind(this,null));this.$buttons.filter('.oe_import_file').on('click',function(){self.$('.o_content .oe_import_file').click();});this.$buttons.filter('.o_import_cancel').on('click',function(e){e.preventDefault();self.exit();});},setup_encoding_picker:function(){this.$('input.oe_import_encoding').select2({width:'50%',data:_.map(('utf-8 utf-16 windows-1252 latin1 latin2 big5 gb18030 shift_jis windows-1251 koir8_r').split(/\s+/),_make_option),query:dataFilteredQuery,initSelection:function($e,c){return c(_make_option($e.val()));}});},setup_separator_picker:function(){var data=[{id:',',text:_t("Comma")},{id:';',text:_t("Semicolon")},{id:'\t',text:_t("Tab")},{id:' ',text:_t("Space")}];this.$('input.oe_import_separator').select2({width:'50%',data:data,query:dataFilteredQuery,initSelection:function($e,c){c(_from_data(data,$e.val())||_make_option($e.val()))}});},setup_float_format_picker:function(){var data_decimal=[{id:',',text:_t("Comma")},{id:'.',text:_t("Dot")},];var data_digits=data_decimal.concat([{id:'',text:_t("No Separator")}]);this.$('input.oe_import_float_thousand_separator').select2({width:'50%',data:data_digits,query:dataFilteredQuery,initSelection:function($e,c){c(_from_data(data_digits,$e.val())||_make_option($e.val()))}});this.$('input.oe_import_float_decimal_separator').select2({width:'50%',data:data_decimal,query:dataFilteredQuery,initSelection:function($e,c){c(_from_data(data_decimal,$e.val())||_make_option($e.val()))}});},setup_date_format_picker:function(){var data=_(['YYYY-MM-DD','DD/MM/YY','DD/MM/YYYY','DD-MM-YYYY','DD-MMM-YY','DD-MMM-YYYY','MM/DD/YY','MM/DD/YYYY','MM-DD-YY','MM-DD-YYYY','DDMMYY','DDMMYYYY','YYMMDD','YYYYMMDD','YY/MM/DD','YYYY/MM/DD','MMDDYY','MMDDYYYY',]).map(_make_option);this.$('input.oe_import_date_format').select2({width:'50%',data:data,query:dataFilteredQuery,initSelection:function($e,c){c(_from_data(data,$e.val())||_make_option($e.val()));}})},import_options:function(){var self=this;var options={headers:this.$('input.oe_import_has_header').prop('checked'),advanced:this.$('input.oe_import_advanced_mode').prop('checked'),keep_matches:this.do_not_change_match,name_create_enabled_fields:{},skip:Number(this.$('#oe_import_row_start').val())-1||0,limit:Number(this.$('#oe_import_batch_limit').val())||null,};_(this.opts).each(function(opt){options[opt.name]=self.$('input.oe_import_'+opt.name).val();});_(this.parse_opts_formats).each(function(opt){options[opt.name]=time.moment_to_strftime_format(self.$('input.oe_import_'+opt.name).val());});_(this.parse_opts_separators).each(function(opt){options[opt.name]=self.$('input.oe_import_'+opt.name).val();});options['fields']=[];if(this.do_not_change_match){options['fields']=this.$('.oe_import_fields input.oe_import_match_field').map(function(index,el){return $(el).select2('val')||false;}).get();}
this.do_not_change_match=false;this.$('input.o_import_create_option').each(function(){var field=this.getAttribute('field');if(field){options.name_create_enabled_fields[field]=this.checked;}});return options;},onfile_loaded:function(event,from,to,arg){if(arg!=null){this.toggle_partial(null);}
this.$buttons.filter('.o_import_import, .o_import_validate, .o_import_file_reload').addClass('d-none');if(!this.$('input.oe_import_file').val()){return this['settings_changed']();}
this.$('.oe_import_date_format').select2('val','');this.$('.oe_import_datetime_format').val('');this.$form.removeClass('oe_import_preview oe_import_error');var import_toggle=false;var file=this.$('input.oe_import_file')[0].files[0];if((file.type&&_.last(file.type.split('/'))==="csv")||(_.last(file.name.split('.'))==="csv")){import_toggle=true;}
this.$form.find('.oe_import_box').toggle(import_toggle);jsonp(this.$form,{url:'/base_import/set_file'},this.proxy('settings_changed'));},onpreviewing:function(){var self=this;this.$buttons.filter('.o_import_import, .o_import_validate, .o_import_file_reload').addClass('d-none');this.$form.addClass('oe_import_with_file');this.$form.removeClass('oe_import_preview_error oe_import_error');this.$form.toggleClass('oe_import_noheaders text-muted',!this.$('input.oe_import_has_header').prop('checked'));this._rpc({model:'base_import.import',method:'parse_preview',args:[this.id,this.import_options()],kwargs:{context:session.user_context},}).then(function(result){var signal=result.error?'preview_failed':'preview_succeeded';self[signal](result);});},onpreview_error:function(event,from,to,result){this.$('.oe_import_options').show();this.$buttons.filter('.o_import_file_reload').removeClass('d-none');this.$form.addClass('oe_import_preview_error oe_import_error');this.$form.find('.oe_import_box, .oe_import_with_file').removeClass('d-none');this.$form.find('.o_view_nocontent').addClass('d-none');this.$('.oe_import_error_report').html(QWeb.render('ImportView.preview.error',result));},onpreview_success:function(event,from,to,result){var self=this;this.$buttons.filter('.oe_import_file').text(_t('Load New File')).removeClass('btn-primary').addClass('btn-secondary').blur();this.$buttons.filter('.o_import_import, .o_import_validate, .o_import_file_reload').removeClass('d-none');this.$form.find('.oe_import_box, .oe_import_with_file').removeClass('d-none');this.$form.find('.o_view_nocontent').addClass('d-none');this.$form.addClass('oe_import_preview');this.$('input.oe_import_advanced_mode').prop('checked',result.advanced_mode);this.$('.oe_import_grid').html(QWeb.render('ImportView.preview',result));this.$('.o_import_batch_alert').toggleClass('d-none',!result.batch);var messages=[];if(result.headers.length===1){messages.push({type:'warning',message:_t("A single column was found in the file, this often means the file separator is incorrect")});}
if(!_.isEmpty(messages)){this.$('.oe_import_options').show();this.onresults(null,null,null,{'messages':messages});}
_.each(['encoding','separator','float_thousand_separator','float_decimal_separator'],function(id){self.$('.oe_import_'+id).select2('val',result.options[id])});this.$('.oe_import_date_format').select2('val',time.strftime_to_moment_format(result.options.date_format));this.$('.oe_import_datetime_format').val(time.strftime_to_moment_format(result.options.datetime_format));this.$('.oe_import_debug_option').toggleClass('d-none',!result.debug);var $fields=this.$('.oe_import_fields input');this.render_fields_matches(result,$fields);var data=this.generate_fields_completion(result);var item_finder=function(id,items){items=items||data;for(var i=0;i<items.length;++i){var item=items[i];if(item.id===id){return item;}
var val;if(item.children&&(val=item_finder(id,item.children))){return val;}}
return'';};$fields.each(function(k,v){var filtered_data=self.generate_fields_completion(result,k);var $thing=$();var bind=function(d){};if(config.isDebug()){$thing=$(QWeb.render('ImportView.create_record_option')).insertAfter(v).hide();bind=function(data){switch(data.type){case'many2one':case'many2many':$thing.find('input').attr('field',data.id);$thing.show();break;default:$thing.find('input').attr('field','').prop('checked',false);$thing.hide();}}}
$(v).select2({allowClear:true,minimumInputLength:0,data:filtered_data,initSelection:function(element,callback){var default_value=element.val();if(!default_value){callback('');return;}
var data=item_finder(default_value);bind(data);callback(data);},placeholder:_t('Don\'t import'),width:'resolve',dropdownCssClass:'oe_import_selector'}).on('change',function(e){bind(item_finder(e.currentTarget.value));});});},generate_fields_completion:function(root,index){var self=this;var basic=[];var regulars=[];var o2m=[];var headers_type=root.headers_type;function traverse(field,ancestors,collection,type){var subfields=field.fields;var advanced_mode=self.$('input.oe_import_advanced_mode').prop('checked');var field_path=ancestors.concat(field);var label=_(field_path).pluck('string').join(' / ');var id=_(field_path).pluck('name').join('/');if(type===undefined||(type!==undefined&&(type.indexOf('all')!==-1||type.indexOf(field['type'])!==-1))){if(!collection){if(field.name==='id'){collection=basic;}else if(_.isEmpty(subfields)||_.isEqual(_.pluck(subfields,'name'),['id','.id'])){collection=regulars;}else{collection=o2m;}}
collection.push({id:id,text:label,required:field.required,type:field.type});}
if(advanced_mode){for(var i=0,end=subfields.length;i<end;++i){traverse(subfields[i],field_path,collection,type);}}}
_(root.fields).each(function(field){if(index===undefined){traverse(field,[]);}
else{if(self.$('input.oe_import_advanced_mode').prop('checked')){traverse(field,[],undefined,['all']);}
else{traverse(field,[],undefined,headers_type[index]);}}});var cmp=function(field1,field2){return field1.text.localeCompare(field2.text);};regulars.sort(cmp);o2m.sort(cmp);if(!_.isEmpty(regulars)&&!_.isEmpty(o2m)){basic=basic.concat([{text:_t("Normal Fields"),children:regulars},{text:_t("Relation Fields"),children:o2m},]);}
else if(!_.isEmpty(regulars)){basic=basic.concat(regulars);}
else if(!_.isEmpty(o2m)){basic=basic.concat(o2m);}
return basic;},render_fields_matches:function(result,$fields){if(_(result.matches).isEmpty()){return;}
$fields.each(function(index,input){var match=result.matches[index];if(!match){return;}
var current_field=result;input.value=_(match).chain().map(function(name){return current_field=_(current_field.fields).find(function(subfield){return subfield.name===name;});}).pluck('name').value().join('/');});},call_import:function(kwargs){var fields=this.$('.oe_import_fields input.oe_import_match_field').map(function(index,el){return $(el).select2('val')||false;}).get();var columns=this.$('.oe_import_grid-header .oe_import_grid-cell .o_import_header_name').map(function(){return $(this).text().trim().toLowerCase()||false;}).get();var tracking_disable='tracking_disable'in kwargs?kwargs.tracking_disable:!this.$('#oe_import_tracking').prop('checked')
delete kwargs.tracking_disable;kwargs.context=_.extend({},this.parent_context,{tracking_disable:tracking_disable});var self=this;this.trigger_up('with_client',{callback:function(){this.loading.ignore_events=true;}});$.blockUI({message:QWeb.render('Throbber')});$(document.body).addClass('o_ui_blocked');var opts=this.import_options();var $el=$('.oe_throbber_message');var msg=kwargs.dryrun?_t("%d records tested..."):_t("%d records successfully imported...");opts.callback=function(count){$el.text(_.str.sprintf(msg,count));};return this._batchedImport(opts,[this.id,fields,columns],kwargs,{done:0,prev:0}).then(null,function(reason){var error=reason.message;var event=reason.event;if(event){event.preventDefault();}
var msg;var errordata=error.data||{};if(errordata.type==='xhrerror'){var xhr=errordata.objects[0];switch(xhr.status){case 504:msg=_t("Import timed out. Please retry. If you still encounter this issue, the file may be too big for the system's configuration, try to split it (import less records per file).");break;default:msg=_t("An unknown issue occurred during import (possibly lost connection, data limit exceeded or memory limits exceeded). Please retry in case the issue is transient. If the issue still occurs, try to split the file rather than import it at once.");}}else{msg=errordata.arguments&&(errordata.arguments[1]||errordata.arguments[0])||error.message;}
return Promise.resolve({'messages':[{type:'error',record:false,message:msg,}]});}).finally(function(){$(document.body).removeClass('o_ui_blocked');$.unblockUI();self.trigger_up('with_client',{callback:function(){delete this.loading.ignore_events;}});});},_batchedImport:function(opts,args,kwargs,rec){opts.callback&&opts.callback(rec.done||0);var self=this;return this._rpc({model:'base_import.import',method:'do',args:args.concat([opts]),kwargs:kwargs}).then(function(results){_.each(results.messages,offset_by(opts.skip));if(!kwargs.dryrun&&!results.ids){self.$('#oe_import_row_start').val(opts.skip+1);if(opts.skip){results.messages.push({type:'info',priority:true,message:_.str.sprintf(_t("This file has been successfully imported up to line %d."),opts.skip)});}
return results;}
if(!results.nextrow){return results;}
return self._batchedImport(_.defaults({skip:results.nextrow},opts),args,kwargs,{done:rec.done+(results.ids||[]).length,prev:results.nextrow}).then(function(r2){return{name:_.zip(results.name,r2.name).map(function(names){return names[0]||names[1];}),ids:(results.ids||[]).concat(r2.ids||[]),messages:results.messages.concat(r2.messages),skip:r2.skip||results.nextrow,nextrow:r2.nextrow}});});},onvalidate:function(){var prom=this.call_import({dryrun:true,tracking_disable:true});prom.then(this.proxy('validated'));return prom;},onimport:function(){var self=this;var prom=this.call_import({dryrun:false});prom.then(function(results){var message=results.messages;if(!_.any(message,function(message){return message.type==='error';})){self['import_succeeded'](results);return;}
self['import_failed'](results);});return prom;},onimported:function(event,from,to,results){this.do_notify(_t("Import completed"),_.str.sprintf(_t("%d records were successfully imported"),results.ids.length));this.exit();},exit:function(){this.trigger_up('history_back');},onresults:function(event,from,to,results){var fields=this.$('.oe_import_fields input.oe_import_match_field').map(function(index,el){return $(el).select2('val')||false;}).get();var message=results.messages;var no_messages=_.isEmpty(message);if(no_messages){message.push({type:'info',message:_t("Everything seems valid.")});}else if(event==='import_failed'&&results.ids){this.toggle_partial(results);}
var offset=1;if(this.import_options().headers){offset+=1;}
var messagesSorted=_.sortBy(_(message).groupBy('message'),function(group){if(group[0].priority){return-2;}
var order=0;switch(group[0].type){case'error':order=0;break;case'warning':order=fields.length+1;break;case'info':order=2*(fields.length+1);break;default:order=3*(fields.length+1);break;}
return order+_.indexOf(fields,group[0].field);});this.$form.addClass('oe_import_error');this.$('.oe_import_error_report').html(QWeb.render('ImportView.error',{errors:messagesSorted,at:function(rows){var from=rows.from+offset;var to=rows.to+offset;var rowName='';if(results.name.length>rows.from&&results.name[rows.from]!==''){rowName=_.str.sprintf(' (%s)',results.name[rows.from]);}
if(from===to){return _.str.sprintf(_t("at row %d%s"),from,rowName);}
return _.str.sprintf(_t("between rows %d and %d"),from,to);},at_multi:function(rows){var from=rows.from+offset;var to=rows.to+offset;var rowName='';if(results.name.length>rows.from&&results.name[rows.from]!==''){rowName=_.str.sprintf(' (%s)',results.name[rows.from]);}
if(from===to){return _.str.sprintf(_t("Row %d%s"),from,rowName);}
return _.str.sprintf(_t("Between rows %d and %d"),from,to);},at_multi_header:function(numberLines){return _.str.sprintf(_t("at %d different rows:"),numberLines);},more:function(n){return _.str.sprintf(_t("(%d more)"),n);},info:function(msg){if(typeof msg==='string'){return _.str.sprintf('<div class="oe_import_moreinfo oe_import_moreinfo_message">%s</div>',_.str.escapeHTML(msg));}
if(msg instanceof Array){return _.str.sprintf('<div class="oe_import_moreinfo oe_import_moreinfo_choices"><a href="#" class="oe_import_report_see_possible_value oe_import_see_all"><i class="fa fa-arrow-right"/> %s </a><ul class="oe_import_report_more">%s</ul></div>',_.str.escapeHTML(_t("See possible values")),_(msg).map(function(msg){return'<li>'
+_.str.escapeHTML(msg)
+'</li>';}).join(''));}
return['<div class="oe_import_moreinfo oe_import_moreinfo_action">',_.str.sprintf('<a href="#" data-action="%s" class="oe_import_see_all"><i class="fa fa-arrow-right"/> ',_.str.escapeHTML(JSON.stringify(msg))),_.str.escapeHTML(_t("See possible values")),'</a>','</div>'].join('');},}));},toggle_partial:function(result){var $form=this.$('.oe_import');var $partial_warning=this.$('.o_import_partial_alert');var $partial_count=this.$('.o_import_partial_count');if(result==null){$partial_warning.addClass('d-none');$form.add(this.$buttons).removeClass('o_import_partial_mode');var $skip=this.$('#oe_import_row_start');$skip.val($skip.attr('value'));$partial_count.text('');return;}
this.$('.o_import_batch_alert').addClass('d-none');$partial_warning.removeClass('d-none');$form.add(this.$buttons).addClass('o_import_partial_mode');$partial_count.text((result.skip||0)+1);}});core.action_registry.add('import',DataImport);StateMachine.create({target:DataImport.prototype,events:[{name:'loaded_file',from:['none','file_loaded','preview_error','preview_success','results'],to:'file_loaded'},{name:'settings_changed',from:['file_loaded','preview_error','preview_success','results'],to:'previewing'},{name:'preview_failed',from:'previewing',to:'preview_error'},{name:'preview_succeeded',from:'previewing',to:'preview_success'},{name:'validate',from:'preview_success',to:'validating'},{name:'validate',from:'results',to:'validating'},{name:'validated',from:'validating',to:'results'},{name:'import',from:['preview_success','results'],to:'importing'},{name:'import_succeeded',from:'importing',to:'imported'},{name:'import_failed',from:'importing',to:'results'}],});Loading.include({on_rpc_event:function(){if(this.ignore_events){return}
this._super.apply(this,arguments);}});AbstractWebClient.prototype.custom_events['with_client']=function(ev){ev.data.callback.call(this);};function offset_by(by){return function offset_message(msg){if(msg.rows){msg.rows.from+=by;msg.rows.to+=by;}}}
return{DataImport:DataImport,};});;

/* /base_import/static/src/js/import_buttons.js defined in bundle 'web.assets_backend' */
odoo.define('base_import.import_buttons',function(require){"use strict";var config=require('web.config');var KanbanController=require('web.KanbanController');var KanbanView=require('web.KanbanView');var ListController=require('web.ListController');var ListView=require('web.ListView');var ImportViewMixin={init:function(viewInfo,params){var importEnabled=!!JSON.parse(this.arch.attrs.import||'1')&&('import_enabled'in params?params.import_enabled:true);this.controllerParams.importEnabled=importEnabled&&!config.device.isMobile;},};var ImportControllerMixin={init:function(parent,model,renderer,params){this.importEnabled=params.importEnabled;},_bindImport:function(){if(!this.$buttons){return;}
var self=this;this.$buttons.on('click','.o_button_import',function(){var state=self.model.get(self.handle,{raw:true});self.do_action({type:'ir.actions.client',tag:'import',params:{model:self.modelName,context:state.getContext(),}});});}};ListView.include({init:function(){this._super.apply(this,arguments);ImportViewMixin.init.apply(this,arguments);},});ListController.include({init:function(){this._super.apply(this,arguments);ImportControllerMixin.init.apply(this,arguments);},renderButtons:function(){this._super.apply(this,arguments);ImportControllerMixin._bindImport.call(this);}});KanbanView.include({init:function(){this._super.apply(this,arguments);ImportViewMixin.init.apply(this,arguments);},});KanbanController.include({init:function(){this._super.apply(this,arguments);ImportControllerMixin.init.apply(this,arguments);},renderButtons:function(){this._super.apply(this,arguments);ImportControllerMixin._bindImport.call(this);}});});;

/* /web_diagram/static/src/js/vec2.js defined in bundle 'web.assets_backend' */
(function(window){function Vec2(x,y){this.x=x;this.y=y;}
window.Vec2=Vec2;var rad2deg=57.29577951308232;var deg2rad=0.017453292519943295;var epsilon=0.0000001;Vec2.new_polar_deg=function(len,angle){var v=new Vec2(len,0);return v.rotate_deg(angle);};Vec2.new_polar=function(len,angle){var v=new Vec2(len,0);v.rotate(angle);return v;};Vec2.prototype.len=function(){return Math.sqrt(this.x*this.x+this.y*this.y);};Vec2.prototype.len_sq=function(){return this.x*this.x+this.y*this.y;};Vec2.prototype.dist=function(v){var dx=this.x-v.x;var dy=this.y-v.y;return Math.sqrt(dx*dx+dy*dy);};Vec2.prototype.dist_xy=function(x,y){var dx=this.x-x;var dy=this.y-y;return Math.sqrt(dx*dx+dy*dy);};Vec2.prototype.dist_sq=function(v){var dx=this.x-v.x;var dy=this.y-v.y;return dx*dx+dy*dy;};Vec2.prototype.dist_sq_xy=function(x,y){var dx=this.x-x;var dy=this.y-y;return dx*dx+dy*dy;};Vec2.prototype.dot=function(v){return this.x*v.x+this.y*v.y;};Vec2.prototype.dot_xy=function(x,y){return this.x*x+this.y*y;};Vec2.prototype.clone=function(){return new Vec2(this.x,this.y);};Vec2.prototype.add=function(v){return new Vec2(this.x+v.x,this.y+v.y);};Vec2.prototype.add_xy=function(x,y){return new Vec2(this.x+x,this.y+y);};Vec2.prototype.sub=function(v){return new Vec2(this.x-v.x,this.y-v.y);};Vec2.prototype.sub_xy=function(x,y){return new Vec2(this.x-x,this.y-y);};Vec2.prototype.mult=function(v){return new Vec2(this.x*v.x,this.y*v.y);};Vec2.prototype.mult_xy=function(x,y){return new Vec2(this.x*x,this.y*y);};Vec2.prototype.scale=function(f){return new Vec2(this.x*f,this.y*f);};Vec2.prototype.neg=function(f){return new Vec2(-this.x,-this.y);};Vec2.prototype.normalize=function(){var len=this.len();if(len==0){return new Vec2(0,1);}else if(len!=1){return this.scale(1.0/len);}
return new Vec2(this.x,this.y);};Vec2.prototype.set_len=function(l){return this.normalize().scale(l);};Vec2.prototype.project=function(v){return v.set_len(this.dot(v));};Vec2.prototype.toString=function(){var str="";str+="[";str+=this.x;str+=",";str+=this.y;str+="]";return str;};Vec2.prototype.rotate=function(rad){var c=Math.cos(rad);var s=Math.sin(rad);var px=this.x*c-this.y*s;var py=this.x*s+this.y*c;return new Vec2(px,py);};Vec2.prototype.rotate_deg=function(deg){return this.rotate(deg*deg2rad);};Vec2.prototype.lerp=function(v,alpha){var inv_alpha=1-alpha;return new Vec2(this.x*inv_alpha+v.x*alpha,this.y*inv_alpha+v.y*alpha);};Vec2.prototype.angle=function(){return Math.atan2(this.y,this.x);};Vec2.prototype.angle_deg=function(){return Math.atan2(this.y,this.x)*rad2deg;};Vec2.prototype.equals=function(v){if(Math.abs(this.x-v.x)>epsilon){return false;}else if(Math.abs(this.y-v.y)>epsilon){return false;}
return true;};Vec2.prototype.equals_xy=function(x,y){if(Math.abs(this.x-x)>epsilon){return false;}else if(Math.abs(this.y-y)>epsilon){return false;}
return true;};})(window);(function(window){function BEllipse(cx,cy,rx,ry){this.type='ellipse';this.x=cx-rx;this.y=cy-ry;this.sx=2*rx;this.sy=2*ry;this.hx=rx;this.hy=ry;this.cx=cx;this.cy=cy;this.mx=cx+rx;this.my=cy+ry;}
window.BEllipse=BEllipse;BEllipse.prototype.collide_segment=function(a,b){var collisions=[];if(a.equals(b)){return collisions;}
var c=new Vec2(this.cx,this.cy);a=a.sub(c).mult_xy(1/this.hx,1/this.hy);b=b.sub(c).mult_xy(1/this.hx,1/this.hy);if(a.len_sq()<1&&b.len_sq()<1){return collisions;}
var ab=b.sub(a);var A=(ab.x*ab.x+ab.y*ab.y);var B=2*(ab.x*a.x+ab.y*a.y);var C=a.x*a.x+a.y*a.y-1;var u=B*B-4*A*C;if(u<0){return collisions;}
u=Math.sqrt(u);var u1=(-B+u)/(2*A);var u2=(-B-u)/(2*A);if(u1>=0&&u1<=1){var pos=a.add(ab.scale(u1));collisions.push(pos);}
if(u1!=u2&&u2>=0&&u2<=1){var pos=a.add(ab.scale(u2));collisions.push(pos);}
for(var i=0;i<collisions.length;i++){collisions[i]=collisions[i].mult_xy(this.hx,this.hy);collisions[i]=collisions[i].add_xy(this.cx,this.cy);}
return collisions;};function BRect(x,y,sx,sy){this.type='rect';this.x=x;this.y=y;this.sx=sx;this.sy=sy;this.hx=sx/2;this.hy=sy/2;this.cx=x+this.hx;this.cy=y+this.hy;this.mx=x+sx;this.my=y+sy;}
window.BRect=BRect;BRect.new_centered=function(cx,cy,sx,sy){return new BRect(cx-sx/2,cy-sy/2,sx,sy);};function line_intersect(a,b,c,d){var f=((d.y-c.y)*(b.x-a.x)-(d.x-c.x)*(b.y-a.y));if(f==0){return null;}
f=1/f;var fab=((d.x-c.x)*(a.y-c.y)-(d.y-c.y)*(a.x-c.x))*f;if(fab<0||fab>1){return null;}
var fcd=((b.x-a.x)*(a.y-c.y)-(b.y-a.y)*(a.x-c.x))*f;if(fcd<0||fcd>1){return null;}
return new Vec2(a.x+fab*(b.x-a.x),a.y+fab*(b.y-a.y));}
BRect.prototype.collide_segment=function(a,b){var collisions=[];var corners=[new Vec2(this.x,this.y),new Vec2(this.x,this.my),new Vec2(this.mx,this.my),new Vec2(this.mx,this.y)];var pos=line_intersect(a,b,corners[0],corners[1]);if(pos)collisions.push(pos);pos=line_intersect(a,b,corners[1],corners[2]);if(pos)collisions.push(pos);pos=line_intersect(a,b,corners[2],corners[3]);if(pos)collisions.push(pos);pos=line_intersect(a,b,corners[3],corners[0]);if(pos)collisions.push(pos);return collisions;};BRect.prototype.contains_vec=function(vec){return(vec.x>=this.x&&vec.x<=this.mx&&vec.y>=this.y&&vec.y<=this.my);};BRect.prototype.contains_xy=function(x,y){return(x>=this.x&&x<=this.mx&&y>=this.y&&y<=this.my);};BEllipse.prototype.contains_vec=function(v){v=v.mult_xy(this.hx,this.hy);return v.len_sq()<=1;};BEllipse.prototype.contains_xy=function(x,y){return this.contains(new Vec2(x,y));};})(window);;

/* /web_diagram/static/src/js/graph.js defined in bundle 'web.assets_backend' */
(function(window){function EdgeEnd(pos_x,pos_y){this.x=pos_x;this.y=pos_y;this.get_pos=function(){return new Vec2(this.x,this.y);}}
function CloseButton(graph,entity,entity_type,pos_x,pos_y){var self=this;var visible=false;var close_button_radius=graph.style.close_button_radius||8;var close_circle=graph.r.circle(entity.get_pos().x+pos_x,entity.get_pos().y+pos_y,close_button_radius);close_circle.attr({'opacity':0,'fill':graph.style.close_button_color||"black",'cursor':'pointer','stroke':'none'});close_circle.transform(graph.get_transform());graph.set_scrolling(close_circle);var close_label=graph.r.text(entity.get_pos().x+pos_x,entity.get_pos().y+pos_y,"x");close_label.attr({'fill':graph.style.close_button_x_color||"white",'font-size':close_button_radius,'cursor':'pointer'});close_label.transform(graph.get_transform());graph.set_scrolling(close_label);var dummy_circle=graph.r.circle(entity.get_pos().x+pos_x,entity.get_pos().y+pos_y,close_button_radius);dummy_circle.attr({'opacity':1,'fill':'transparent','stroke':'none','cursor':'pointer'});dummy_circle.transform(graph.get_transform());graph.set_scrolling(dummy_circle);this.get_pos=function(){return entity.get_pos().add_xy(pos_x,pos_y);};this.update_pos=function(){var pos=self.get_pos();close_circle.attr({'cx':pos.x,'cy':pos.y});dummy_circle.attr({'cx':pos.x,'cy':pos.y});close_label.attr({'x':pos.x,'y':pos.y});};function hover_in(){if(!visible){return;}
close_circle.animate({'r':close_button_radius*1.5},300,'elastic');dummy_circle.animate({'r':close_button_radius*1.5},300,'elastic');}
function hover_out(){if(!visible){return;}
close_circle.animate({'r':close_button_radius},400,'linear');dummy_circle.animate({'r':close_button_radius},400,'linear');}
dummy_circle.hover(hover_in,hover_out);close_circle.hover(hover_in,hover_out);close_label.hover(hover_in,hover_out);function click_action(){if(!visible){return;}
close_circle.attr({'r':close_button_radius*2});dummy_circle.attr({'r':close_button_radius*2});close_circle.animate({'r':close_button_radius},400,'linear');dummy_circle.animate({'r':close_button_radius},400,'linear');if(entity_type=="node"){Promise.resolve(GraphNode.destruction_callback(entity)).then(function(){entity.remove();});}else if(entity_type=="edge"){Promise.resolve(GraphEdge.destruction_callback(entity)).then(function(){entity.remove();});}}
dummy_circle.click(click_action);close_circle.click(click_action);close_label.click(click_action);this.show=function(){if(!visible){close_circle.animate({'opacity':1},100,'linear');close_label.animate({'opacity':1},100,'linear');visible=true;}}
this.hide=function(){if(visible){close_circle.animate({'opacity':0},100,'linear');close_label.animate({'opacity':0},100,'linear');visible=false;}}
this.remove=function(){if(visible){visible=false;close_circle.animate({'opacity':0},100,'linear');close_label.animate({'opacity':0},100,'linear',self.remove);}else{close_circle.remove();close_label.remove();dummy_circle.remove();}}}
function Connector(graph,node,pos_x,pos_y){var visible=false;var conn_circle=graph.r.circle(node.get_pos().x+pos_x,node.get_pos().y+pos_y,4);conn_circle.attr({'opacity':0,'fill':graph.style.node_outline_color,'stroke':'none'});conn_circle.transform(graph.get_transform());graph.set_scrolling(conn_circle);var self=this;this.update_pos=function(){conn_circle.attr({'cx':node.get_pos().x+pos_x,'cy':node.get_pos().y+pos_y});};this.get_pos=function(){return new node.get_pos().add_xy(pos_x,pos_y);};this.remove=function(){conn_circle.remove();}
function hover_in(){if(!visible){return;}
conn_circle.animate({'r':8},300,'elastic');if(graph.creating_edge){graph.target_node=node;conn_circle.animate({'fill':graph.style.connector_active_color,'stroke':graph.style.node_outline_color,'stroke-width':graph.style.node_selected_width,},100,'linear');}}
function hover_out(){if(!visible){return;}
conn_circle.animate({'r':graph.style.connector_radius,'fill':graph.style.node_outline_color,'stroke':'none'},400,'linear');graph.target_node=null;}
conn_circle.hover(hover_in,hover_out);var drag_down=function(){if(!visible){return;}
self.ox=conn_circle.attr("cx");self.oy=conn_circle.attr("cy");self.edge_start=new EdgeEnd(self.ox,self.oy);self.edge_end=new EdgeEnd(self.ox,self.oy);self.edge_tmp=new GraphEdge(graph,'',self.edge_start,self.edge_end,true);graph.creating_edge=true;};var drag_move=function(dx,dy){if(!visible){return;}
self.edge_end.x=self.ox+dx;self.edge_end.y=self.oy+dy;self.edge_tmp.update();};var drag_up=function(){if(!visible){return;}
graph.creating_edge=false;self.edge_tmp.remove();if(graph.target_node){var edge_prop=GraphEdge.creation_callback(node,graph.target_node);if(edge_prop){var new_edge=new GraphEdge(graph,edge_prop.label,node,graph.target_node);GraphEdge.new_edge_callback(new_edge);}}};conn_circle.drag(drag_move,drag_down,drag_up);function show(){if(!visible){conn_circle.animate({'opacity':1},100,'linear');visible=true;}}
function hide(){if(visible){conn_circle.animate({'opacity':0},100,'linear');visible=false;}}
this.show=show;this.hide=hide;}
function Graph(r,style,viewport){var self=this;var nodes=[];var edges=[];var graph={};var links={};var uid=1;var selected_entity=null;self.creating_edge=false;self.target_node=null;self.r=r;self.style=style;var tr_x=0,tr_y=0;var background=r.rect(0,0,'100%','100%').attr({'fill':'white','stroke':'none','opacity':0,'cursor':'move'});this.get_transform=function(){return"T"+tr_x+","+tr_y};var translate_all=function(dx,dy){tr_x+=dx;tr_y+=dy;var tstr=self.get_transform();r.forEach(function(el){if(el!=background){el.transform(tstr);}});};var get_bounds=function(){var minx=Number.MAX_VALUE;var miny=Number.MAX_VALUE;var maxx=Number.MIN_VALUE;var maxy=Number.MIN_VALUE;for(var i=0;i<nodes.length;i++){var pos=nodes[i].get_pos();minx=Math.min(minx,pos.x);miny=Math.min(miny,pos.y);maxx=Math.max(maxx,pos.x);maxy=Math.max(maxy,pos.y);}
minx=minx-style.node_size_x/2+tr_x;miny=miny-style.node_size_y/2+tr_y;maxx=maxx+style.node_size_x/2+tr_x;maxy=maxy+style.node_size_y/2+tr_y;return{minx:minx,miny:miny,maxx:maxx,maxy:maxy};};var translation_respects_viewport=function(dx,dy,margin){if(!viewport){return true;}
margin=margin||0;var b=get_bounds();var width=viewport.offsetWidth;var height=viewport.offsetHeight;if((dy<0&&b.maxy+dy<margin)||(dy>0&&b.miny+dy>height-margin)||(dx<0&&b.maxx+dx<margin)||(dx>0&&b.minx+dx>width-margin)){return false;}
return true;}
this.set_scrolling=function(raph_element){$(raph_element.node).bind('mousewheel',function(event,delta){var dy=delta*20;if(translation_respects_viewport(0,dy,style.viewport_margin)){translate_all(0,dy);}});};var px,py;var bg_drag_down=function(){px=py=0;};var bg_drag_move=function(x,y){var dx=x-px;var dy=y-py;px=x;py=y;if(translation_respects_viewport(dx,dy,style.viewport_margin)){translate_all(dx,dy);}};var bg_drag_up=function(){};background.drag(bg_drag_move,bg_drag_down,bg_drag_up);this.set_scrolling(background);this.add_node=function(n){nodes.push(n);n.uid=uid++;};this.get_node_list=function(){return nodes;};this.add_edge=function(n1,n2,e){edges.push(e);e.uid=uid++;if(!graph[n1.uid])graph[n1.uid]={};if(!graph[n1.uid][n2.uid])graph[n1.uid][n2.uid]=[];if(!links[n1.uid])links[n1.uid]=[];if(!links[n2.uid])links[n2.uid]=[];graph[n1.uid][n2.uid].push(e);links[n1.uid].push(e);if(n1!=n2){links[n2.uid].push(e);}};this.remove_edge=function(edge){edges=_.without(edges,edge);var n1=edge.get_start();var n2=edge.get_end();links[n1.uid]=_.without(links[n1.uid],edge);links[n2.uid]=_.without(links[n2.uid],edge);graph[n1.uid][n2.uid]=_.without(graph[n1.uid][n2.uid],edge);if(selected_entity==edge){selected_entity=null;}};this.remove_node=function(node){var linked_edges=self.get_linked_edge_list(node);for(var i=0;i<linked_edges.length;i++){linked_edges[i].remove();}
nodes=_.without(nodes,node);if(selected_entity==node){selected_entity=null;}}
this.get_edge_list=function(n1,n2){var list=[];if(!graph[n1.uid])return list;if(!graph[n1.uid][n2.uid])return list;return graph[n1.uid][n2.uid];};this.get_linked_edge_list=function(n){if(!links[n.uid])return[];return links[n.uid];};this.get_edge_curvature=function(n1,n2,e){var el_12=this.get_edge_list(n1,n2);var c12=el_12.length;var el_21=this.get_edge_list(n2,n1);var c21=el_21.length;if(c12+c21==1){return 0;}else{var index=0;for(var i=0;i<c12;i++){if(el_12[i].uid<e.uid){index++;}}
if(c21==0){return index-(c12-1)/2.0;}else{return index+0.5;}}};this.get_loop_angle=function(n,e){var loop_list=this.get_edge_list(n,n);var slots=[];for(var angle=0;angle<360;angle+=45){slots.push(Vec2.new_polar_deg(1,angle));}
var links=this.get_linked_edge_list(n);for(var i=0;i<links.length;i++){var edge=links[i];if(!edge.is_loop||edge.is_loop()){continue;}
var end=edge.get_end();if(end==n){end=edge.get_start();}
var dir=end.get_pos().sub(n.get_pos()).normalize();for(var s=0;s<slots.length;s++){var score=slots[s].dot(dir);if(score<0){score=-0.2*Math.pow(score,2);}else{score=Math.pow(score,2);}
if(!slots[s].score){slots[s].score=score;}else{slots[s].score+=score;}}}
slots.sort(function(a,b){return a.score<b.score?-1:1;});var index=0;for(var i=0;i<links.length;i++){var edge=links[i];if(!edge.is_loop||!edge.is_loop()){continue;}
if(edge.uid<e.uid){index++;}}
index%=slots.length;return slots[index].angle_deg();}
this.select=function(entity){if(selected_entity){if(selected_entity==entity){return;}else{if(selected_entity.set_not_selected){selected_entity.set_not_selected();}
selected_entity=null;}}
selected_entity=entity;if(entity&&entity.set_selected){entity.set_selected();}};}
function GraphNode(graph,pos_x,pos_y,label,type,color){var self=this;var r=graph.r;var sy=graph.style.node_size_y;var sx=graph.style.node_size_x;var node_fig=null;var selected=false;this.connectors=[];this.close_button=null;this.uid=0;graph.add_node(this);if(type=='circle'){node_fig=r.ellipse(pos_x,pos_y,sx/2,sy/2);}else{node_fig=r.rect(pos_x-sx/2,pos_y-sy/2,sx,sy);}
node_fig.attr({'fill':color,'stroke':graph.style.node_outline_color,'stroke-width':graph.style.node_outline_width,'cursor':'pointer'});node_fig.transform(graph.get_transform());graph.set_scrolling(node_fig);var node_label=r.text(pos_x,pos_y,label);node_label.attr({'fill':graph.style.node_label_color,'font-size':graph.style.node_label_font_size,'cursor':'pointer'});node_label.transform(graph.get_transform());graph.set_scrolling(node_label);var update_linked_edges=function(){var edges=graph.get_linked_edge_list(self);for(var i=0;i<edges.length;i++){edges[i].update();}};var set_pos=function(pos){if(type=='circle'){node_fig.attr({'cx':pos.x,'cy':pos.y});}else{node_fig.attr({'x':pos.x-sx/2,'y':pos.y-sy/2});}
node_label.attr({'x':pos.x,'y':pos.y});for(var i=0;i<self.connectors.length;i++){self.connectors[i].update_pos();}
if(self.close_button){self.close_button.update_pos();}
update_linked_edges();};var get_fig=function(){return node_fig;};var get_pos=function(){if(type=='circle'){return new Vec2(node_fig.attr('cx'),node_fig.attr('cy'));}else{return new Vec2(node_fig.attr('x')+sx/2,node_fig.attr('y')+sy/2);}};var get_label=function(){return node_label.attr("text");};var set_label=function(text){node_label.attr({'text':text});};var get_bound=function(){if(type=='circle'){return new BEllipse(get_pos().x,get_pos().y,sx/2,sy/2);}else{return BRect.new_centered(get_pos().x,get_pos().y,sx,sy);}};var set_selected=function(){if(!selected){selected=true;node_fig.attr({'stroke':graph.style.node_selected_color,'stroke-width':graph.style.node_selected_width});if(!self.close_button){self.close_button=new CloseButton(graph,self,"node",sx/2,-sy/2);self.close_button.show();}
for(var i=0;i<self.connectors.length;i++){self.connectors[i].show();}}};var set_not_selected=function(){if(selected){node_fig.animate({'stroke':graph.style.node_outline_color,'stroke-width':graph.style.node_outline_width},100,'linear');if(self.close_button){self.close_button.remove();self.close_button=null;}
selected=false;}
for(var i=0;i<self.connectors.length;i++){self.connectors[i].hide();}};var remove=function(){if(self.close_button){self.close_button.remove();}
for(var i=0;i<self.connectors.length;i++){self.connectors[i].remove();}
graph.remove_node(self);node_fig.remove();node_label.remove();}
this.set_pos=set_pos;this.get_pos=get_pos;this.set_label=set_label;this.get_label=get_label;this.get_bound=get_bound;this.get_fig=get_fig;this.set_selected=set_selected;this.set_not_selected=set_not_selected;this.update_linked_edges=update_linked_edges;this.remove=remove;var click_action=function(){if(type=='circle'){node_fig.attr({'rx':sx/2+3,'ry':sy/2+3});node_fig.animate({'rx':sx/2,'ry':sy/2},500,'elastic');}else{var cx=get_pos().x;var cy=get_pos().y;node_fig.attr({'x':cx-(sx/2)-3,'y':cy-(sy/2)-3,'ẃidth':sx+6,'height':sy+6});node_fig.animate({'x':cx-sx/2,'y':cy-sy/2,'ẃidth':sx,'height':sy},500,'elastic');}
graph.select(self);};node_fig.click(click_action);node_label.click(click_action);var drag_down=function(){this.opos=get_pos();};var drag_move=function(dx,dy){var edges=graph.get_linked_edge_list(self);for(var i=0;i<edges.length;i++){edges[i].label_disable();}
if(self.close_button){self.close_button.hide();}
set_pos(this.opos.add_xy(dx,dy));};var drag_up=function(){var edges=graph.get_linked_edge_list(self);for(var i=0;i<edges.length;i++){edges[i].label_enable();}
if(self.close_button){self.close_button.show();}};node_fig.drag(drag_move,drag_down,drag_up);node_label.drag(drag_move,drag_down,drag_up);function hover_in(){if(graph.creating_edge){graph.target_node=self;}}
function hover_out(){graph.target_node=null;}
node_fig.hover(hover_in,hover_out);node_label.hover(hover_in,hover_out);function double_click(){GraphNode.double_click_callback(self);}
node_fig.dblclick(double_click);node_label.dblclick(double_click);this.connectors.push(new Connector(graph,this,-sx/2,0));this.connectors.push(new Connector(graph,this,sx/2,0));this.connectors.push(new Connector(graph,this,0,-sy/2));this.connectors.push(new Connector(graph,this,0,sy/2));this.close_button=new CloseButton(graph,this,"node",sx/2,-sy/2);}
GraphNode.double_click_callback=function(node){console.log("double click from node:",node);};GraphNode.destruction_callback=function(node){return true;};function GraphEdge(graph,label,start,end,tmp){var self=this;var r=graph.r;var curvature=0;var s,e;var mc;var mc1,mc2;var elfs=graph.style.edge_label_font_size||10;var label_enabled=true;this.uid=0;var edge_path="";var selected=false;if(!tmp){graph.add_edge(start,end,this);}
function get_label_pos(path){var cpos=path.getTotalLength()*0.5;var cindex=Math.abs(Math.floor(curvature));var mod=((cindex%3))*(elfs*3.1)-(elfs*0.5);var verticality=Math.abs(end.get_pos().sub(start.get_pos()).normalize().dot_xy(0,1));verticality=Math.max(verticality-0.5,0)*2;var lpos=path.getPointAtLength(cpos+mod*verticality);return new Vec2(lpos.x,lpos.y-elfs*(1-verticality));}
this.get_pos=function(){if(!edge){return start.get_pos().lerp(end.get_pos(),0.5);}
return get_label_pos(edge);}
function make_line(){return"M"+s.x+","+s.y+"L"+e.x+","+e.y;}
function make_curve(){return"M"+s.x+","+s.y+"Q"+mc.x+","+mc.y+" "+e.x+","+e.y;}
function make_loop(){return"M"+s.x+" "+s.y+"C"+mc1.x+" "+mc1.y+" "+mc2.x+" "+mc2.y+" "+e.x+" "+e.y;}
function update_curve(){if(start!=end){if(!tmp){curvature=graph.get_edge_curvature(start,end,self);}else{curvature=0;}
s=start.get_pos();e=end.get_pos();mc=s.lerp(e,0.5);var se=e.sub(s);se=se.normalize();se=se.rotate_deg(-90);se=se.scale(curvature*graph.style.edge_spacing);mc=mc.add(se);if(start.get_bound){var col=start.get_bound().collide_segment(s,mc);if(col.length>0){s=col[0];}}
if(end.get_bound){var col=end.get_bound().collide_segment(mc,e);if(col.length>0){e=col[0];}}
if(curvature!=0){edge_path=make_curve();}else{edge_path=make_line();}}else{var rad=graph.style.edge_loop_radius||100;s=start.get_pos();e=end.get_pos();var r=Vec2.new_polar_deg(rad,graph.get_loop_angle(start,self));mc=s.add(r);var p=r.rotate_deg(90);mc1=mc.add(p.set_len(rad*0.5));mc2=mc.add(p.set_len(-rad*0.5));if(start.get_bound){var col=start.get_bound().collide_segment(s,mc1);if(col.length>0){s=col[0];}
var col=start.get_bound().collide_segment(e,mc2);if(col.length>0){e=col[0];}}
edge_path=make_loop();}}
update_curve();var edge=r.path(edge_path).attr({'stroke':graph.style.edge_color,'stroke-width':graph.style.edge_width,'arrow-end':'block-wide-long','cursor':'pointer'}).insertBefore(graph.get_node_list()[0].get_fig());var labelpos=get_label_pos(edge);var edge_label=r.text(labelpos.x,labelpos.y-elfs,label).attr({'fill':graph.style.edge_label_color,'cursor':'pointer','font-size':elfs});edge.transform(graph.get_transform());graph.set_scrolling(edge);edge_label.transform(graph.get_transform());graph.set_scrolling(edge_label);if(!tmp){var edges_start=graph.get_linked_edge_list(start);var edges_end=graph.get_linked_edge_list(end);var edges=edges_start.length<edges_end.length?edges_start:edges_end;for(var i=0;i<edges.length;i++){if(edges[i]!=self){edges[i].update();}}}
function label_enable(){if(!label_enabled){label_enabled=true;edge_label.animate({'opacity':1},100,'linear');if(self.close_button){self.close_button.show();}
self.update();}}
function label_disable(){if(label_enabled){label_enabled=false;edge_label.animate({'opacity':0},100,'linear');if(self.close_button){self.close_button.hide();}}}
function update(){update_curve();edge.attr({'path':edge_path});if(label_enabled){var labelpos=get_label_pos(edge);edge_label.attr({'x':labelpos.x,'y':labelpos.y-14});}}
function remove(){edge.remove();edge_label.remove();if(!tmp){graph.remove_edge(self);}
if(start.update_linked_edges){start.update_linked_edges();}
if(start!=end&&end.update_linked_edges){end.update_linked_edges();}
if(self.close_button){self.close_button.remove();}}
this.set_selected=function(){if(!selected){selected=true;edge.attr({'stroke':graph.style.node_selected_color,'stroke-width':graph.style.node_selected_width});edge_label.attr({'fill':graph.style.node_selected_color});if(!self.close_button){self.close_button=new CloseButton(graph,self,"edge",0,30);self.close_button.show();}}};this.set_not_selected=function(){if(selected){selected=false;edge.animate({'stroke':graph.style.edge_color,'stroke-width':graph.style.edge_width},100,'linear');edge_label.animate({'fill':graph.style.edge_label_color},100,'linear');if(self.close_button){self.close_button.remove();self.close_button=null;}}};function click_action(){graph.select(self);}
edge.click(click_action);edge_label.click(click_action);function double_click_action(){GraphEdge.double_click_callback(self);}
edge.dblclick(double_click_action);edge_label.dblclick(double_click_action);this.label_enable=label_enable;this.label_disable=label_disable;this.update=update;this.remove=remove;this.is_loop=function(){return start==end;};this.get_start=function(){return start;};this.get_end=function(){return end;};}
GraphEdge.double_click_callback=function(edge){console.log("double click from edge:",edge);};GraphEdge.creation_callback=function(start,end){var edge_prop={};edge_prop.label='new edge!';return edge_prop;};GraphEdge.new_edge_callback=function(new_edge){};GraphEdge.destruction_callback=function(edge){return true;};function wordwrap(str,width){width=width||32;var cut=true;var brk='\n';if(!str){return str;}
var regex='.{1,'+width+'}(\\s|$)'+(cut?'|.{'+width+'}|.+$':'|\\S+?(\\s|$)');return str.match(new RegExp(regex,'g')).join(brk);}
window.CuteGraph=Graph;window.CuteNode=GraphNode;window.CuteEdge=GraphEdge;window.CuteGraph.wordwrap=wordwrap;})(window);;

/* /web_diagram/static/src/js/diagram_model.js defined in bundle 'web.assets_backend' */
odoo.define('web_diagram.DiagramModel',function(require){"use strict";var AbstractModel=require('web.AbstractModel');var DiagramModel=AbstractModel.extend({get:function(){return $.extend(true,{},{labels:this.labels,nodes:this.datanodes,edges:this.edges,node_model:this.node_model,parent_field:this.parent_field,res_id:this.res_id,connector_model:this.connector_model,connectors:this.connectors,});},load:function(params){this.modelName=params.modelName;this.res_id=params.res_id;this.node_model=params.node_model;this.connector_model=params.connector_model;this.connectors=params.connectors;this.nodes=params.nodes;this.visible_nodes=params.visible_nodes;this.invisible_nodes=params.invisible_nodes;this.node_fields_string=params.node_fields_string;this.connector_fields_string=params.connector_fields_string;this.labels=params.labels;return this._fetchDiagramInfo();},reload:function(){return this._fetchDiagramInfo();},_fetchDiagramInfo:function(){var self=this;return this._rpc({route:'/web_diagram/diagram/get_diagram_info',params:{id:this.res_id,model:this.modelName,node:this.node_model,connector:this.connector_model,src_node:this.connectors.attrs.source,des_node:this.connectors.attrs.destination,label:this.connectors.attrs.label||false,bgcolor:this.nodes.attrs.bgcolor,shape:this.nodes.attrs.shape,visible_nodes:this.visible_nodes,invisible_nodes:this.invisible_nodes,node_fields_string:this.node_fields_string,connector_fields_string:this.connector_fields_string,},}).then(function(data){self.datanodes=data.nodes;self.edges=data.conn;self.parent_field=data.parent_field;});},});return DiagramModel;});;

/* /web_diagram/static/src/js/diagram_controller.js defined in bundle 'web.assets_backend' */
odoo.define('web_diagram.DiagramController',function(require){"use strict";var AbstractController=require('web.AbstractController');var core=require('web.core');var Dialog=require('web.Dialog');var view_dialogs=require('web.view_dialogs');var _t=core._t;var QWeb=core.qweb;var FormViewDialog=view_dialogs.FormViewDialog;var DiagramController=AbstractController.extend({className:'o_diagram_view',custom_events:{add_edge:'_onAddEdge',edit_edge:'_onEditEdge',edit_node:'_onEditNode',remove_edge:'_onRemoveEdge',remove_node:'_onRemoveNode',},init:function(parent,model,renderer,params){this._super.apply(this,arguments);this.domain=params.domain||[];this.context=params.context;this.ids=params.ids;this.currentId=params.currentId;},renderButtons:function($node){this.$buttons=$(QWeb.render("DiagramView.buttons",{widget:this}));this.$buttons.on('click','.o_diagram_new_button',this._addNode.bind(this));this.$buttons.appendTo($node);},_addNode:function(){var state=this.model.get();var pop=new FormViewDialog(this,{res_model:state.node_model,domain:this.domain,context:this.context,title:_.str.sprintf("%s %s",_t("Create:"),_t('Activity')),disable_multiple_selection:true,on_saved:this.reload.bind(this,{}),}).open();pop.opened().then(function(){var changes={};changes[state.parent_field]={id:state.res_id};pop.form_view.trigger_up('field_changed',{dataPointID:pop.form_view.handle,changes:changes,});});},_onAddEdge:function(event){var self=this;var state=this.model.get();var pop=new FormViewDialog(self,{res_model:state.connector_model,domain:this.domain,context:this.context,title:_.str.sprintf("%s %s",_t("Create:"),_t('Transition')),disable_multiple_selection:true,}).open();pop.opened().then(function(){var changes={};changes[state.connectors.attrs.source]={id:event.data.source_id};changes[state.connectors.attrs.destination]={id:event.data.dest_id};pop.form_view.trigger_up('field_changed',{dataPointID:pop.form_view.handle,changes:changes,});});pop.on('closed',this,this.reload.bind(this,{}));},_onEditEdge:function(event){var state=this.model.get();new FormViewDialog(this,{res_model:state.connector_model,res_id:parseInt(event.data.id,10),context:this.context,title:_.str.sprintf("%s %s",_t("Open:"),_t('Transition')),on_saved:this.reload.bind(this,{}),}).open();},_onEditNode:function(event){var state=this.model.get();new FormViewDialog(this,{res_model:state.node_model,res_id:event.data.id,context:this.context,title:_.str.sprintf("%s %s",_t("Open:"),_t('Activity')),on_saved:this.reload.bind(this,{}),}).open();},_onRemoveEdge:function(event){var self=this;Dialog.confirm(this,(_t("Are you sure you want to remove this transition?")),{confirm_callback:function(){var state=self.model.get();self._rpc({model:state.connector_model,method:'unlink',args:[event.data.id],}).then(self.reload.bind(self,{}));},});},_onRemoveNode:function(event){var self=this;var msg=_t("Are you sure you want to remove this node ? This will remove its connected transitions as well.");Dialog.confirm(this,(msg),{confirm_callback:function(){var state=self.model.get();self._rpc({model:state.node_model,method:'unlink',args:[event.data.id],}).then(self.reload.bind(self,{}));},});},});return DiagramController;});;

/* /web_diagram/static/src/js/diagram_renderer.js defined in bundle 'web.assets_backend' */
odoo.define('web_diagram.DiagramRenderer',function(require){"use strict";var AbstractRenderer=require('web.AbstractRenderer');var DiagramRenderer=AbstractRenderer.extend({template:'DiagramView',start:function(){var $header=this.$el.filter('.o_diagram_header');_.each(this.state.labels,function(label){$header.append($('<span>').html(label));});this.$diagram_container=this.$el.filter('.o_diagram');return this._super.apply(this,arguments);},_render:function(){var self=this;var nodes=this.state.nodes;var edges=this.state.edges;var id_to_node={};var style={edge_color:"#A0A0A0",edge_label_color:"#555",edge_label_font_size:10,edge_width:2,edge_spacing:100,edge_loop_radius:100,node_label_color:"#333",node_label_font_size:12,node_outline_color:"#333",node_outline_width:1,node_selected_color:"#0097BE",node_selected_width:2,node_size_x:110,node_size_y:80,connector_active_color:"#FFF",connector_radius:4,close_button_radius:8,close_button_color:"#333",close_button_x_color:"#FFF",gray:"#DCDCDC",white:"#FFF",viewport_margin:50};this.$diagram_container.empty();var $div=$('<div>').css({position:'absolute',top:-10000,right:-10000}).appendTo($('body'));var r=new Raphael($div[0],'100%','100%');var graph=new CuteGraph(r,style,this.$diagram_container[0]);_.each(nodes,function(node){var n=new CuteNode(graph,node.x+50,node.y+50,CuteGraph.wordwrap(node.name,14),node.shape==='rectangle'?'rect':'circle',node.color==='white'?style.white:style.gray);n.id=node.id;id_to_node[node.id]=n;});_.each(edges,function(edge){var e=new CuteEdge(graph,CuteGraph.wordwrap(edge.signal,32),id_to_node[edge.s_id],id_to_node[edge.d_id]||id_to_node[edge.s_id]);e.id=edge.id;});$div.contents().appendTo(this.$diagram_container);$div.remove();CuteNode.double_click_callback=function(cutenode){self.trigger_up('edit_node',{id:cutenode.id});};CuteNode.destruction_callback=function(cutenode){self.trigger_up('remove_node',{id:cutenode.id});return Promise.reject();};CuteEdge.double_click_callback=function(cuteedge){self.trigger_up('edit_edge',{id:cuteedge.id});};CuteEdge.creation_callback=function(node_start,node_end){return{label:''};};CuteEdge.new_edge_callback=function(cuteedge){self.trigger_up('add_edge',{source_id:cuteedge.get_start().id,dest_id:cuteedge.get_end().id,});};CuteEdge.destruction_callback=function(cuteedge){self.trigger_up('remove_edge',{id:cuteedge.id});return Promise.reject();};return this._super.apply(this,arguments);},});return DiagramRenderer;});;

/* /web_diagram/static/src/js/diagram_view.js defined in bundle 'web.assets_backend' */
odoo.define('web_diagram.DiagramView',function(require){"use strict";var BasicView=require('web.BasicView');var core=require('web.core');var DiagramModel=require('web_diagram.DiagramModel');var DiagramRenderer=require('web_diagram.DiagramRenderer');var DiagramController=require('web_diagram.DiagramController');var _lt=core._lt;var DiagramView=BasicView.extend({display_name:_lt('Diagram'),icon:'fa-code-fork',multi_record:false,withSearchBar:false,searchMenuTypes:[],jsLibs:[['/web_diagram/static/lib/js/jquery.mousewheel.js','/web_diagram/static/lib/js/raphael.js',]],config:_.extend({},BasicView.prototype.config,{Model:DiagramModel,Renderer:DiagramRenderer,Controller:DiagramController,}),viewType:'diagram',init:function(viewInfo,params){this._super.apply(this,arguments);var self=this;var arch=this.arch;function toTitleCase(str){return str.replace(/\w\S*/g,function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase();});}
var nodes=arch.children[0];var connectors=arch.children[1];var node_model=nodes.attrs.object;var connector_model=connectors.attrs.object;var labels=_.map(_.where(arch.children,{tag:'label'}),function(label){return label.attrs.string;});var invisible_nodes=[];var visible_nodes=[];var node_fields_string=[];_.each(nodes.children,function(child){if(child.attrs.invisible==='1')
invisible_nodes.push(child.attrs.name);else{var fieldString=self.fields[child.attrs.name].string||toTitleCase(child.attrs.name);visible_nodes.push(child.attrs.name);node_fields_string.push(fieldString);}});var connector_fields_string=_.map(connectors.children,function(conn){return self.fields[conn.attrs.name].string||toTitleCase(conn.attrs.name);});this.loadParams=_.extend({},this.loadParams,{currentId:params.currentId,nodes:nodes,labels:labels,invisible_nodes:invisible_nodes,visible_nodes:visible_nodes,node_fields_string:node_fields_string,node_model:node_model,connectors:connectors,connector_model:connector_model,connector_fields_string:connector_fields_string,});this.controllerParams=_.extend({},this.controllerParams,{domain:params.domain,context:params.context,ids:params.ids,currentId:params.currentId,});},getController:function(){var oldDefine=window.define;delete window.define;return this._super.apply(this,arguments).then(function(view){window.define=oldDefine;return view;});},});return DiagramView;});;

/* /web_diagram/static/src/js/view_registry.js defined in bundle 'web.assets_backend' */
odoo.define('web_diagram.view_registry',function(require){"use strict";var view_registry=require('web.view_registry');var DiagramView=require('web_diagram.DiagramView');view_registry.add('diagram',DiagramView);});;

/* /web_editor/static/src/js/backend/field_html.js defined in bundle 'web.assets_backend' */
odoo.define('web_editor.field.html',function(require){'use strict';var ajax=require('web.ajax');var basic_fields=require('web.basic_fields');var core=require('web.core');var Wysiwyg=require('web_editor.wysiwyg.root');var field_registry=require('web.field_registry');require('web._field_registry');var _lt=core._lt;var TranslatableFieldMixin=basic_fields.TranslatableFieldMixin;var QWeb=core.qweb;var assetsLoaded;var FieldHtml=basic_fields.DebouncedField.extend(TranslatableFieldMixin,{description:_lt("Html"),className:'oe_form_field oe_form_field_html',supportedFieldTypes:['html'],custom_events:{wysiwyg_focus:'_onWysiwygFocus',wysiwyg_blur:'_onWysiwygBlur',wysiwyg_change:'_onChange',wysiwyg_attachment:'_onAttachmentChange',},willStart:function(){var self=this;this.isRendered=false;this._onUpdateIframeId='onLoad_'+_.uniqueId('FieldHtml');var defAsset;if(this.nodeOptions.cssReadonly){defAsset=ajax.loadAsset(this.nodeOptions.cssReadonly);}
if(!assetsLoaded){assetsLoaded=new Promise(function(resolve){var wysiwyg=new Wysiwyg(self,{});wysiwyg.attachTo($('<textarea>')).then(function(){wysiwyg.destroy();resolve();});});}
return Promise.all([this._super(),assetsLoaded,defAsset]);},destroy:function(){delete window.top[this._onUpdateIframeId];if(this.$iframe){this.$iframe.remove();}
this._super();},activate:function(options){if(this.wysiwyg){this.wysiwyg.focus();return true;}},commitChanges:function(){var self=this;if(this.mode=="readonly"||!this.isRendered){return this._super();}
var _super=this._super.bind(this);return this.wysiwyg.save().then(function(result){self._isDirty=result.isDirty;_super();});},isSet:function(){return this.value&&this.value!=="<p><br/></p>"&&this.value.match(/\S/);},getFocusableElement:function(){return this.$target||$();},reset:function(record,event){this._reset(record,event);var value=this.value;if(this.nodeOptions.wrapper){value=this._wrap(value);}
value=this._textToHtml(value);if(!event||event.target!==this){if(this.mode==='edit'){this.wysiwyg.setValue(value);}else{this.$content.html(value);}}
return Promise.resolve();},_getValue:function(){var value=this.$target.val();if(this.nodeOptions.wrapper){return this._unWrap(value);}
return value;},_createWysiwygIntance:function(){var self=this;this.wysiwyg=new Wysiwyg(this,this._getWysiwygOptions());return this.wysiwyg.attachTo(this.$target).then(function(){self.$content=self.wysiwyg.$editor.closest('body, odoo-wysiwyg-container');self._onLoadWysiwyg();self.isRendered=true;});},_getWysiwygOptions:function(){return Object.assign({},this.nodeOptions,{recordInfo:{context:this.record.getContext(this.recordParams),res_model:this.model,res_id:this.res_id,},noAttachment:this.nodeOptions['no-attachment'],inIframe:!!this.nodeOptions.cssEdit,iframeCssAssets:this.nodeOptions.cssEdit,snippets:this.nodeOptions.snippets,tabsize:0,height:180,generateOptions:function(options){var para=_.find(options.toolbar,function(item){return item[0]==='para';});if(para&&para[1]&&para[1].indexOf('checklist')===-1){para[1].splice(2,0,'checklist');}
return options;},});},_onAttachmentChange:function(attachments){if(!this.fieldNameAttachment){return;}
this.trigger_up('field_changed',{dataPointID:this.dataPointID,changes:_.object([this.fieldNameAttachment],[{operation:'ADD_M2M',ids:attachments}])});},_renderEdit:function(){var value=this._textToHtml(this.value);if(this.nodeOptions.wrapper){value=this._wrap(value);}
this.$target=$('<textarea>').val(value).hide();this.$target.appendTo(this.$el);var fieldNameAttachment=_.chain(this.recordData).pairs().find(function(value){return _.isObject(value[1])&&value[1].model==="ir.attachment";}).first().value();if(fieldNameAttachment){this.fieldNameAttachment=fieldNameAttachment;}
if(this.nodeOptions.cssEdit){this._createWysiwygIntance();}else{return this._createWysiwygIntance();}},_renderReadonly:function(){var self=this;var value=this._textToHtml(this.value);if(this.nodeOptions.wrapper){value=this._wrap(value);}
this.$el.empty();var resolver;var def=new Promise(function(resolve){resolver=resolve;});if(this.nodeOptions.cssReadonly){this.$iframe=$('<iframe class="o_readonly"/>');this.$iframe.appendTo(this.$el);var avoidDoubleLoad=0;this.$iframe.data('loadDef',def);window.top[this._onUpdateIframeId]=function(_avoidDoubleLoad){if(_avoidDoubleLoad!==avoidDoubleLoad){console.warn('Wysiwyg iframe double load detected');return;}
self.$content=$('#iframe_target',self.$iframe[0].contentWindow.document.body);resolver();};this.$iframe.on('load',function onLoad(){var _avoidDoubleLoad=++avoidDoubleLoad;ajax.loadAsset(self.nodeOptions.cssReadonly).then(function(asset){if(_avoidDoubleLoad!==avoidDoubleLoad){console.warn('Wysiwyg immediate iframe double load detected');return;}
var cwindow=self.$iframe[0].contentWindow;cwindow.document.open("text/html","replace").write('<head>'+'<meta charset="utf-8"/>'+'<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>\n'+'<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no"/>\n'+
_.map(asset.cssLibs,function(cssLib){return'<link type="text/css" rel="stylesheet" href="'+cssLib+'"/>';}).join('\n')+'\n'+
_.map(asset.cssContents,function(cssContent){return'<style type="text/css">'+cssContent+'</style>';}).join('\n')+'\n'+'</head>\n'+'<body class="o_in_iframe o_readonly">\n'+'<div id="iframe_target">'+value+'</div>\n'+'<script type="text/javascript">'+'if (window.top.'+self._onUpdateIframeId+') {'+'window.top.'+self._onUpdateIframeId+'('+_avoidDoubleLoad+')'+'}'+'</script>\n'+'</body>');var height=cwindow.document.body.scrollHeight;self.$iframe.css('height',Math.max(30,Math.min(height,500))+'px');});});}else{this.$content=$('<div class="o_readonly"/>').html(value);this.$content.appendTo(this.$el);resolver();}
def.then(function(){self.$content.on('click','ul.o_checklist > li',self._onReadonlyClickChecklist.bind(self));});},_textToHtml:function(text){var value=text||"";if(/%\send/.test(value)){return value;}
try{$(text)[0].innerHTML;}catch(e){if(value.match(/^\s*$/)){value='<p><br/></p>';}else{value="<p>"+value.split(/<br\/?>/).join("<br/></p><p>")+"</p>";value=value.replace(/<p><\/p>/g,'').replace('<p><p>','<p>').replace('<p><p ','<p ').replace('</p></p>','</p>');}}
return value;},_unWrap:function(html){var $wrapper=$(html).find('#wrapper');return $wrapper.length?$wrapper.html():html;},_wrap:function(html){return $(QWeb.render(this.nodeOptions.wrapper)).find('#wrapper').html(html).end().prop('outerHTML');},_onChange:function(ev){this._doDebouncedAction.apply(this,arguments);var $lis=this.$content.find('.note-editable ul.o_checklist > li:not(:has(> ul.o_checklist))');if(!$lis.length){return;}
var max=0;var ids=[];$lis.map(function(){var checklistId=parseInt(($(this).attr('id')||'0').replace(/^checklist-id-/,''));if(ids.indexOf(checklistId)===-1){if(checklistId>max){max=checklistId;}
ids.push(checklistId);}else{$(this).removeAttr('id');}});$lis.not('[id]').each(function(){$(this).attr('id','checklist-id-'+(++max));});},_onReadonlyClickChecklist:function(ev){var self=this;if(ev.offsetX>0){return;}
ev.stopPropagation();ev.preventDefault();var checked=$(ev.target).hasClass('o_checked');var checklistId=parseInt(($(ev.target).attr('id')||'0').replace(/^checklist-id-/,''));this._rpc({route:'/web_editor/checklist',params:{res_model:this.model,res_id:this.res_id,filename:this.name,checklistId:checklistId,checked:!checked,},}).then(function(value){self._setValue(value);});},_onLoadWysiwyg:function(){var $button=this._renderTranslateButton();$button.css({'font-size':'15px',position:'absolute',right:'+5px',top:'+5px',});this.$el.append($button);},_onWysiwygBlur:function(ev){ev.stopPropagation();this._doAction();if(ev.data.key==='TAB'){this.trigger_up('navigation_move',{direction:ev.data.shiftKey?'left':'right',});}},_onWysiwygFocus:function(ev){},});field_registry.add('html',FieldHtml);return FieldHtml;});;

/* /web_editor/static/src/js/backend/convert_inline.js defined in bundle 'web.assets_backend' */
odoo.define('web_editor.convertInline',function(require){'use strict';var FieldHtml=require('web_editor.field.html');function getMatchedCSSRules(a){var i,r,k;var doc=a.ownerDocument;var rulesCache=a.ownerDocument._rulesCache||(a.ownerDocument._rulesCache=[]);if(!rulesCache.length){var sheets=doc.styleSheets;for(i=sheets.length-1;i>=0;i--){var rules;try{rules=sheets[i].rules||sheets[i].cssRules;}catch(e){console.warn("Can't read the css rules of: "+sheets[i].href,e);continue;}
if(rules){for(r=rules.length-1;r>=0;r--){var selectorText=rules[r].selectorText;if(selectorText&&rules[r].cssText&&selectorText!=='*'&&selectorText.indexOf(':hover')===-1&&selectorText.indexOf(':before')===-1&&selectorText.indexOf(':after')===-1&&selectorText.indexOf(':active')===-1&&selectorText.indexOf(':link')===-1&&selectorText.indexOf('::')===-1&&selectorText.indexOf("'")===-1){var st=selectorText.split(/\s*,\s*/);for(k=0;k<st.length;k++){rulesCache.push({'selector':st[k],'style':rules[r].style});}}}}}
rulesCache.reverse();}
var css=[];var style;a.matches=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.msMatchesSelector||a.oMatchesSelector;for(r=0;r<rulesCache.length;r++){if(a.matches(rulesCache[r].selector)){style=rulesCache[r].style;if(style.parentRule){var style_obj={};var len;for(k=0,len=style.length;k<len;k++){if(style[k].indexOf('animation')!==-1){continue;}
style_obj[style[k]]=style[style[k].replace(/-(.)/g,function(a,b){return b.toUpperCase();})];if(new RegExp(style[k]+'\s*:[^:;]+!important').test(style.cssText)){style_obj[style[k]]+=' !important';}}
rulesCache[r].style=style=style_obj;}
css.push([rulesCache[r].selector,style]);}}
function specificity(selector){var a=0;selector=selector.replace(/#[a-z0-9_-]+/gi,function(){a++;return'';});var b=0;selector=selector.replace(/(\.[a-z0-9_-]+)|(\[.*?\])/gi,function(){b++;return'';});var c=0;selector=selector.replace(/(^|\s+|:+)[a-z0-9_-]+/gi,function(a){if(a.indexOf(':not(')===-1)c++;return'';});return a*100+b*10+c;}
css.sort(function(a,b){return specificity(a[0])-specificity(b[0]);});style={};_.each(css,function(v,k){_.each(v[1],function(v,k){if(v&&_.isString(v)&&k.indexOf('-webkit')===-1&&(!style[k]||style[k].indexOf('important')===-1||v.indexOf('important')!==-1)){style[k]=v;}});});_.each(style,function(v,k){if(v.indexOf('important')!==-1){style[k]=v.slice(0,v.length-11);}});if(style.display==='block'){delete style.display;}
_.each([{property:'margin'},{property:'padding'},{property:'border',propertyEnd:'-style',defaultValue:'none'},],function(propertyInfo){var p=propertyInfo.property;var e=propertyInfo.propertyEnd||'';var defVal=propertyInfo.defaultValue||0;if(style[p+'-top'+e]||style[p+'-right'+e]||style[p+'-bottom'+e]||style[p+'-left'+e]){if(style[p+'-top'+e]===style[p+'-right'+e]&&style[p+'-top'+e]===style[p+'-bottom'+e]&&style[p+'-top'+e]===style[p+'-left'+e]){style[p+e]=style[p+'-top'+e];}
else{style[p+e]=(style[p+'-top'+e]||defVal)+' '+(style[p+'-right'+e]||defVal)+' '+(style[p+'-bottom'+e]||defVal)+' '+(style[p+'-left'+e]||defVal);if(style[p+e].indexOf('inherit')!==-1||style[p+e].indexOf('initial')!==-1){delete style[p+e];return;}}
delete style[p+'-top'+e];delete style[p+'-right'+e];delete style[p+'-bottom'+e];delete style[p+'-left'+e];}});if(style['border-bottom-left-radius']){style['border-radius']=style['border-bottom-left-radius'];delete style['border-bottom-left-radius'];delete style['border-bottom-right-radius'];delete style['border-top-left-radius'];delete style['border-top-right-radius'];}
_.each(_.keys(style),function(k){if(k.indexOf('border')!==-1&&style[k]==='initial'){delete style[k];}});if(style['text-decoration-line']){style['text-decoration']=style['text-decoration-line'];delete style['text-decoration-line'];delete style['text-decoration-color'];delete style['text-decoration-style'];}
if(style['text-align']==='inherit'){var $el=$(a).parent();do{var align=$el.css('text-align');if(_.indexOf(['left','right','center','justify'],align)>=0){style['text-align']=align;break;}
$el=$el.parent();}while($el.length&&!$el.is('html'));}
return style;}
function fontToImg($editable){var fonts=odoo.__DEBUG__.services["wysiwyg.fonts"];$editable.find('.fa').each(function(){var $font=$(this);var icon,content;_.find(fonts.fontIcons,function(font){return _.find(fonts.getCssSelectors(font.parser),function(data){if($font.is(data.selector.replace(/::?before/g,''))){icon=data.names[0].split('-').shift();content=data.css.match(/content:\s*['"]?(.)['"]?/)[1];return true;}});});if(content){var color=$font.css('color').replace(/\s/g,'');$font.replaceWith($('<img/>',{src:_.str.sprintf('/web_editor/font_to_img/%s/%s/%s',content.charCodeAt(0),window.encodeURI(color),Math.max(1,$font.height())),'data-class':$font.attr('class'),'data-style':$font.attr('style'),class:$font.attr('class').replace(new RegExp('(^|\\s+)'+icon+'(-[^\\s]+)?','gi'),''),style:$font.attr('style'),}).css({height:'auto',width:'auto'}));}else{$font.remove();}});}
function imgToFont($editable){$editable.find('img[src*="/web_editor/font_to_img/"]').each(function(){var $img=$(this);$img.replaceWith($('<span/>',{class:$img.data('class'),style:$img.data('style')}));});}
function applyOverDescendants(node,func){node=node.firstChild;while(node){if(node.nodeType===1){func(node);applyOverDescendants(node,func);}
var $node=$(node);if(node.nodeName==='A'&&$node.hasClass('btn')&&!$node.children().length&&$(node).parents('.o_outlook_hack').length){node=$(node).parents('.o_outlook_hack')[0];}
else if(node.nodeName==='IMG'&&$node.parent('p').hasClass('o_outlook_hack')){node=$node.parent()[0];}
node=node.nextSibling;}}
function classToStyle($editable){applyOverDescendants($editable[0],function(node){var $target=$(node);var css=getMatchedCSSRules(node);var style=$target.attr('style')||'';_.each(css,function(v,k){if(!(new RegExp('(^|;)\s*'+k).test(style))){style=k+':'+v+';'+style;}});if(_.isEmpty(style)){$target.removeAttr('style');}else{$target.attr('style',style);}
if(node.nodeName==='TD'&&!node.childNodes.length){node.innerHTML='&nbsp;';}
if(node.nodeName==='A'&&$target.hasClass('btn')&&!$target.hasClass('btn-link')&&!$target.children().length){var $hack=$('<table class="o_outlook_hack" style="display: inline-table;vertical-align:middle"><tr><td></td></tr></table>');$hack.find('td').attr('height',$target.outerHeight()).css({'text-align':$target.parent().css('text-align'),'margin':$target.css('padding'),'border-radius':$target.css('border-radius'),'background-color':$target.css('background-color'),});$target.after($hack);$target.appendTo($hack.find('td'));node=$hack[0].previousSibling;if(node&&node.nodeType===Node.TEXT_NODE&&!node.textContent.match(/\S/)){$(node).remove();}
node=$hack[0].nextSibling;if(node&&node.nodeType===Node.TEXT_NODE&&!node.textContent.match(/\S/)){$(node).remove();}}
else if(node.nodeName==='IMG'&&$target.is('.mx-auto.d-block')){$target.wrap('<p class="o_outlook_hack" style="text-align:center;margin:0"/>');}});}
function styleToClass($editable){$editable.find('.o_outlook_hack').each(function(){$(this).after($('a,img',this));}).remove();var $c=$('<span/>').appendTo($editable[0].ownerDocument.body);applyOverDescendants($editable[0],function(node){var $target=$(node);var css=getMatchedCSSRules(node);var style='';_.each(css,function(v,k){if(!(new RegExp('(^|;)\s*'+k).test(style))){style=k+':'+v+';'+style;}});css=($c.attr('style',style).attr('style')||'').split(/\s*;\s*/);style=($target.attr('style')||'').replace(/\s*:\s*/,':').replace(/\s*;\s*/,';');_.each(css,function(v){style=style.replace(v,'');});style=style.replace(/;+(\s;)*/g,';').replace(/^;/g,'');if(style!==''){$target.attr('style',style);}else{$target.removeAttr('style');}});$c.remove();}
function attachmentThumbnailToLinkImg($editable){$editable.find('a[href*="/web/content/"][data-mimetype]').filter(':empty, :containsExact( )').each(function(){var $link=$(this);var $img=$('<img/>').attr('src',$link.css('background-image').replace(/(^url\(['"])|(['"]\)$)/g,'')).css('height',Math.max(1,$link.height())+'px').css('width',Math.max(1,$link.width())+'px');$link.prepend($img);});}
function linkImgToAttachmentThumbnail($editable){$editable.find('a[href*="/web/content/"][data-mimetype] > img').remove();}
FieldHtml.include({commitChanges:function(){if(this.nodeOptions['style-inline']&&this.mode==="edit"){this._toInline();}
return this._super();},_toInline:function(){var $editable=this.wysiwyg.getEditable();var html=this.wysiwyg.getValue();$editable.html(html);attachmentThumbnailToLinkImg($editable);fontToImg($editable);classToStyle($editable);this.wysiwyg.setValue($editable.html(),{notifyChange:false,});},_fromInline:function(){var $editable=this.wysiwyg.getEditable();var html=this.wysiwyg.getValue();$editable.html(html);styleToClass($editable);imgToFont($editable);linkImgToAttachmentThumbnail($editable);this.wysiwyg.setValue($editable.html(),{notifyChange:false,});},_onLoadWysiwyg:function(){if(this.nodeOptions['style-inline']&&this.mode==="edit"){this._fromInline();}
this._super();},});return{fontToImg:fontToImg,imgToFont:imgToFont,classToStyle:classToStyle,styleToClass:styleToClass,attachmentThumbnailToLinkImg:attachmentThumbnailToLinkImg,linkImgToAttachmentThumbnail:linkImgToAttachmentThumbnail,};});;

/* /web_kanban_gauge/static/src/js/kanban_gauge.js defined in bundle 'web.assets_backend' */
odoo.define('web_kanban_gauge.widget',function(require){"use strict";var AbstractField=require('web.AbstractField');var core=require('web.core');var field_registry=require('web.field_registry');var utils=require('web.utils');var _t=core._t;var GaugeWidget=AbstractField.extend({className:"oe_gauge",jsLibs:['/web/static/lib/Chart/Chart.js',],_render:function(){var val=this.value;if(_.isArray(JSON.parse(val))){val=JSON.parse(val);}
var gauge_value=_.isArray(val)&&val.length?val[val.length-1].value:val;if(this.nodeOptions.gauge_value_field){gauge_value=this.recordData[this.nodeOptions.gauge_value_field];}
var max_value=this.nodeOptions.max_value||100;if(this.nodeOptions.max_field){max_value=this.recordData[this.nodeOptions.max_field];}
max_value=Math.max(gauge_value,max_value);var label=this.nodeOptions.label||"";if(this.nodeOptions.label_field){label=this.recordData[this.nodeOptions.label_field];}
var title=this.nodeOptions.title||this.field.string;var maxLabel=max_value;if(gauge_value===0&&max_value===0){max_value=1;maxLabel=0;}
var config={type:'doughnut',data:{datasets:[{data:[gauge_value,max_value-gauge_value],backgroundColor:["#1f77b4","#dddddd"],label:title}],},options:{circumference:Math.PI,rotation:-Math.PI,responsive:true,tooltips:{displayColors:false,callbacks:{label:function(tooltipItems){if(tooltipItems.index===0){return _t('Value: ')+gauge_value;}
return _t('Max: ')+maxLabel;},},},title:{display:true,text:title,padding:4,},layout:{padding:{bottom:5}},maintainAspectRatio:false,cutoutPercentage:70,}};this.$canvas=$('<canvas/>');this.$el.empty();this.$el.append(this.$canvas);this.$el.attr('style',this.nodeOptions.style);this.$el.css({position:'relative'});var context=this.$canvas[0].getContext('2d');this.chart=new Chart(context,config);var humanValue=utils.human_number(gauge_value,1);var $value=$('<span class="o_gauge_value">').text(humanValue);$value.css({'text-align':'center',position:'absolute',left:0,right:0,bottom:'6px','font-weight':'bold'});this.$el.append($value);},});field_registry.add("gauge",GaugeWidget);return GaugeWidget;});;

/* /web_tour/static/src/js/debug_manager.js defined in bundle 'web.assets_backend' */
odoo.define('web_tour.DebugManager.Backend',function(require){"use strict";var core=require("web.core");var DebugManager=require('web.DebugManager.Backend');var Dialog=require("web.Dialog");var tour=require('web_tour.tour');function get_active_tours(){return _.difference(_.keys(tour.tours),tour.consumed_tours);}
DebugManager.include({start:function(){this.consume_tours_enabled=get_active_tours().length>0;return this._super.apply(this,arguments);},consume_tours:function(){var active_tours=get_active_tours();if(active_tours.length>0){this._rpc({model:'web_tour.tour',method:'consume',args:[active_tours],}).then(function(){window.location.reload();});}},start_tour:function(){var dialog=new Dialog(this,{title:'Tours',$content:core.qweb.render('WebClient.DebugManager.ToursDialog',{tours:tour.tours}),});dialog.opened().then(function(){dialog.$('.o_start_tour').on('click',function(e){e.preventDefault();tour.run($(e.target).data('name'));});});dialog.open();},});});</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>